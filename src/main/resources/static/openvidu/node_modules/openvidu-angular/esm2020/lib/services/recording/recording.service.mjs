import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { RecordingStatus } from '../../models/recording.model';
import * as i0 from "@angular/core";
import * as i1 from "../action/action.service";
import * as i2 from "@angular/platform-browser";
export class RecordingService {
    /**
     * @internal
     * @param actionService
     * @param sanitizer
     */
    constructor(actionService, sanitizer) {
        this.actionService = actionService;
        this.sanitizer = sanitizer;
        this.currentRecording = { status: RecordingStatus.STOPPED };
        this.recordingStatus = new BehaviorSubject(null);
        this.baseUrl = '/' + (!!window.location.pathname.split('/')[1] ? window.location.pathname.split('/')[1] + '/' : '');
        this.recordingStatusObs = this.recordingStatus.asObservable();
    }
    /**
     * @internal
     * @param status
     */
    updateStatus(status) {
        this.currentRecording = {
            status: status
        };
        this.recordingStatus.next({ info: this.currentRecording });
    }
    /**
     * @internal
     * @param event
     */
    startRecording(event) {
        this.currentRecording = {
            status: RecordingStatus.STARTED,
            id: event.id,
            name: event.name,
            reason: event.reason
        };
        this.startRecordingTime();
        this.recordingStatus.next({ info: this.currentRecording, time: this.recordingTime });
    }
    /**
     * @internal
     * @param event
     */
    stopRecording(event) {
        this.currentRecording.status = RecordingStatus.STOPPED;
        this.currentRecording.reason = event.reason;
        this.recordingStatus.next({ info: this.currentRecording, time: null });
        this.stopRecordingTime();
    }
    /**
     * @internal
     * Play the recording blob received as parameter. This parameter must be obtained from backend using the OpenVidu REST API
     */
    playRecording(recording) {
        const recordingId = recording.id;
        // Only COMPOSED recording is supported. The extension will allways be 'mp4'.
        const extension = 'mp4'; //recording.url?.split('.').pop()  || 'mp4';
        this.actionService.openRecordingPlayerDialog(`${this.baseUrl}recordings/${recordingId}/${recordingId}.${extension}`);
    }
    /**
     * @internal
     * Download the the recording file received .
     * @param recording
     */
    downloadRecording(recording) {
        const recordingId = recording.id;
        // Only COMPOSED recording is supported. The extension will allways be 'mp4'.
        const extension = 'mp4'; //recording.url?.split('.').pop()  || 'mp4';
        const link = document.createElement('a');
        link.href = `/recordings/${recordingId}/${recordingId}.${extension}`;
        link.download = `${recordingId}.${extension}`;
        link.dispatchEvent(new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
            view: window
        }));
        setTimeout(() => {
            // For Firefox it is necessary to delay revoking the ObjectURL
            link.remove();
        }, 100);
    }
    startRecordingTime() {
        this.recordingTime = new Date();
        this.recordingTime.setHours(0, 0, 0, 0);
        this.recordingTimeInterval = setInterval(() => {
            this.recordingTime.setSeconds(this.recordingTime.getSeconds() + 1);
            this.recordingTime = new Date(this.recordingTime.getTime());
            this.recordingStatus.next({ info: this.currentRecording, time: this.recordingTime });
        }, 1000);
    }
    stopRecordingTime() {
        clearInterval(this.recordingTimeInterval);
        this.recordingTime = null;
    }
}
RecordingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: RecordingService, deps: [{ token: i1.ActionService }, { token: i2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Injectable });
RecordingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: RecordingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: RecordingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.ActionService }, { type: i2.DomSanitizer }]; } });
//# sourceMappingURL=data:application/json;base64,