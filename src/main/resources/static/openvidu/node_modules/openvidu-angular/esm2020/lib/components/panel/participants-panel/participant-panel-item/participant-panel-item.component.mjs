import { ChangeDetectionStrategy, Component, ContentChild, Input, TemplateRef } from '@angular/core';
import { ParticipantPanelItemElementsDirective } from '../../../../directives/template/openvidu-angular.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/config/openvidu-angular.config.service";
import * as i2 from "../../../../services/participant/participant.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/icon";
import * as i6 from "@angular/material/core";
import * as i7 from "@angular/material/list";
import * as i8 from "../../../../pipes/participant.pipe";
/**
 *
 * The **ParticipantPanelItemComponent** is hosted inside of the {@link ParticipantsPanelComponent}.
 * It is in charge of displaying the participants information inside of the ParticipansPanelComponent.
 *
 * <div class="custom-table-container">
 * <div>
 *  <h3>API Directives</h3>
 *
 * This component allows us to show or hide certain HTML elements with the following {@link https://angular.io/guide/attribute-directives Angular attribute directives}
 * with the aim of fully customizing the ToolbarComponent.
 *
 * | **Name**                  | **Type**  | **Reference**                                   |
 * | :----------------------------: | :-------: | :---------------------------------------------: |
 * | **muteButton** | `boolean` | {@link ParticipantPanelItemMuteButtonDirective} |
 *
 * <p class="component-link-text">
 * <span class="italic">See all {@link ApiDirectiveModule API Directives}</span>
 * </p>
 *
 * </div>
 * <div>
 *
 * <h3>OpenVidu Angular Directives</h3>
 *
 * The ParticipantPanelItemComponent can be replaced with a custom component. It provides us the following {@link https://angular.io/guide/structural-directives Angular structural directives}
 * for doing this.
 *
 * |            **Directive**           |                 **Reference**                 |
 * |:----------------------------------:|:---------------------------------------------:|
 * |     ***ovParticipantPanelItem**     |     {@link ParticipantPanelItemDirective}     |
 *
 * </br>
 *
 * It is also providing us a way to **add additional buttons** to the default participant panel item.
 * It will recognise the following directive in a child element.
 *
 * |            **Directive**           |                 **Reference**                 |
 * |:----------------------------------:|:---------------------------------------------:|
 * | ***ovParticipantPanelItemElements** | {@link ParticipantPanelItemElementsDirective} |
 *
 * <p class="component-link-text">
 * 	<span class="italic">See all {@link OpenViduAngularDirectiveModule OpenVidu Angular Directives}</span>
 * </p>
 * </div>
 * </div>
 */
export class ParticipantPanelItemComponent {
    /**
     * @ignore
     */
    constructor(libService, participantService, cd) {
        this.libService = libService;
        this.participantService = participantService;
        this.cd = cd;
        /**
         * @ignore
         */
        this.showMuteButton = true;
    }
    /**
     * @ignore
     */
    set externalItemElements(externalItemElements) {
        // This directive will has value only when ITEM ELEMENTS component tagget with '*ovParticipantPanelItemElements' directive
        // is inside of the P PANEL ITEM component tagged with '*ovParticipantPanelItem' directive
        if (externalItemElements) {
            this.participantPanelItemElementsTemplate = externalItemElements.template;
        }
    }
    set participant(participant) {
        this._participant = participant;
    }
    ngOnInit() {
        this.subscribeToParticipantPanelItemDirectives();
    }
    ngOnDestroy() {
        if (this.muteButtonSub)
            this.muteButtonSub.unsubscribe();
    }
    /**
     * @ignore
     */
    toggleMuteForcibly() {
        this.participantService.setRemoteMutedForcibly(this._participant.id, !this._participant.isMutedForcibly);
    }
    subscribeToParticipantPanelItemDirectives() {
        this.muteButtonSub = this.libService.participantItemMuteButton.subscribe((value) => {
            this.showMuteButton = value;
            this.cd.markForCheck();
        });
    }
}
ParticipantPanelItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantPanelItemComponent, deps: [{ token: i1.OpenViduAngularConfigService }, { token: i2.ParticipantService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ParticipantPanelItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: ParticipantPanelItemComponent, selector: "ov-participant-panel-item", inputs: { participant: "participant" }, queries: [{ propertyName: "participantPanelItemElementsTemplate", first: true, predicate: ["participantPanelItemElements"], descendants: true, read: TemplateRef }, { propertyName: "externalItemElements", first: true, predicate: ParticipantPanelItemElementsDirective, descendants: true }], ngImport: i0, template: "<mat-list>\n\t<mat-list-item>\n\t\t<mat-icon matListAvatar class=\"participant-avatar\">person</mat-icon>\n\t\t<h3 matLine class=\"participant-nickname\">{{ _participant.nickname }}</h3>\n\t\t<p matLine class=\"participant-subtitle\">{{ _participant | streamTypesEnabled }}</p>\n\t\t<!-- <p matLine>\n\t\t\t<span class=\"participant-subtitle\"></span>\n\t\t</p> -->\n\n\t\t<div class=\"participant-action-buttons\">\n\t\t\t<button\n\t\t\t\tmat-icon-button\n\t\t\t\tid=\"mute-btn\"\n\t\t\t\t*ngIf=\"!_participant.local && showMuteButton\"\n\t\t\t\t[class.warn-btn]=\"_participant.isMutedForcibly\"\n\t\t\t\t(click)=\"toggleMuteForcibly()\"\n\t\t\t>\n\t\t\t\t<mat-icon *ngIf=\"!_participant.isMutedForcibly\">volume_up</mat-icon>\n\t\t\t\t<mat-icon *ngIf=\"_participant.isMutedForcibly\">volume_off</mat-icon>\n\t\t\t</button>\n\n\t\t\t<!-- External item elements  -->\n\t\t\t<ng-container *ngIf=\"participantPanelItemElementsTemplate\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"participantPanelItemElementsTemplate\"></ng-container>\n\t\t\t</ng-container>\n\t\t</div>\n\t</mat-list-item>\n</mat-list>\n", styles: [".participant-subtitle{font-style:italic;font-size:11px!important}.participant-nickname{font-weight:700!important}.participant-action-buttons{display:flex}::ng-deep .participant-action-buttons>*:not(#mute-btn){display:contents}::ng-deep .participant-action-buttons>*:not(#mute-btn)>*{margin:auto}mat-list-item{height:max-content!important;padding-bottom:10px!important}mat-list{padding:3px}.participant-avatar{display:contents}#mute-btn{border-radius:var(--ov-buttons-radius)}.warn-btn{color:var(--ov-warn-color)}\n"], dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i6.MatLine, selector: "[mat-line], [matLine]" }, { kind: "component", type: i7.MatList, selector: "mat-list, mat-action-list", inputs: ["disableRipple", "disabled"], exportAs: ["matList"] }, { kind: "component", type: i7.MatListItem, selector: "mat-list-item, a[mat-list-item], button[mat-list-item]", inputs: ["disableRipple", "disabled"], exportAs: ["matListItem"] }, { kind: "directive", type: i7.MatListAvatarCssMatStyler, selector: "[mat-list-avatar], [matListAvatar]" }, { kind: "pipe", type: i8.StreamTypesEnabledPipe, name: "streamTypesEnabled" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantPanelItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-participant-panel-item', changeDetection: ChangeDetectionStrategy.OnPush, template: "<mat-list>\n\t<mat-list-item>\n\t\t<mat-icon matListAvatar class=\"participant-avatar\">person</mat-icon>\n\t\t<h3 matLine class=\"participant-nickname\">{{ _participant.nickname }}</h3>\n\t\t<p matLine class=\"participant-subtitle\">{{ _participant | streamTypesEnabled }}</p>\n\t\t<!-- <p matLine>\n\t\t\t<span class=\"participant-subtitle\"></span>\n\t\t</p> -->\n\n\t\t<div class=\"participant-action-buttons\">\n\t\t\t<button\n\t\t\t\tmat-icon-button\n\t\t\t\tid=\"mute-btn\"\n\t\t\t\t*ngIf=\"!_participant.local && showMuteButton\"\n\t\t\t\t[class.warn-btn]=\"_participant.isMutedForcibly\"\n\t\t\t\t(click)=\"toggleMuteForcibly()\"\n\t\t\t>\n\t\t\t\t<mat-icon *ngIf=\"!_participant.isMutedForcibly\">volume_up</mat-icon>\n\t\t\t\t<mat-icon *ngIf=\"_participant.isMutedForcibly\">volume_off</mat-icon>\n\t\t\t</button>\n\n\t\t\t<!-- External item elements  -->\n\t\t\t<ng-container *ngIf=\"participantPanelItemElementsTemplate\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"participantPanelItemElementsTemplate\"></ng-container>\n\t\t\t</ng-container>\n\t\t</div>\n\t</mat-list-item>\n</mat-list>\n", styles: [".participant-subtitle{font-style:italic;font-size:11px!important}.participant-nickname{font-weight:700!important}.participant-action-buttons{display:flex}::ng-deep .participant-action-buttons>*:not(#mute-btn){display:contents}::ng-deep .participant-action-buttons>*:not(#mute-btn)>*{margin:auto}mat-list-item{height:max-content!important;padding-bottom:10px!important}mat-list{padding:3px}.participant-avatar{display:contents}#mute-btn{border-radius:var(--ov-buttons-radius)}.warn-btn{color:var(--ov-warn-color)}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.OpenViduAngularConfigService }, { type: i2.ParticipantService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { participantPanelItemElementsTemplate: [{
                type: ContentChild,
                args: ['participantPanelItemElements', { read: TemplateRef }]
            }], externalItemElements: [{
                type: ContentChild,
                args: [ParticipantPanelItemElementsDirective]
            }], participant: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljaXBhbnQtcGFuZWwtaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9vcGVudmlkdS1hbmd1bGFyL3NyYy9saWIvY29tcG9uZW50cy9wYW5lbC9wYXJ0aWNpcGFudHMtcGFuZWwvcGFydGljaXBhbnQtcGFuZWwtaXRlbS9wYXJ0aWNpcGFudC1wYW5lbC1pdGVtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL29wZW52aWR1LWFuZ3VsYXIvc3JjL2xpYi9jb21wb25lbnRzL3BhbmVsL3BhcnRpY2lwYW50cy1wYW5lbC9wYXJ0aWNpcGFudC1wYW5lbC1pdGVtL3BhcnRpY2lwYW50LXBhbmVsLWl0ZW0uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFxQixTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNJLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLDREQUE0RCxDQUFDOzs7Ozs7Ozs7O0FBS25IOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOENHO0FBUUgsTUFBTSxPQUFPLDZCQUE2QjtJQWtDekM7O09BRU07SUFDTixZQUFvQixVQUF3QyxFQUFZLGtCQUFzQyxFQUFVLEVBQXFCO1FBQXpILGVBQVUsR0FBVixVQUFVLENBQThCO1FBQVksdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBL0I3STs7V0FFTTtRQUNOLG1CQUFjLEdBQVksSUFBSSxDQUFDO0lBNEJpSCxDQUFDO0lBekJqSjs7T0FFRztJQUNILElBQ0ksb0JBQW9CLENBQUMsb0JBQTJEO1FBQ25GLDBIQUEwSDtRQUMxSCwwRkFBMEY7UUFDMUYsSUFBSSxvQkFBb0IsRUFBRTtZQUN6QixJQUFJLENBQUMsb0NBQW9DLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDO1NBQzFFO0lBQ0YsQ0FBQztJQUVELElBQ0ksV0FBVyxDQUFDLFdBQXFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO0lBQ2pDLENBQUM7SUFZRCxRQUFRO1FBQ1AsSUFBSSxDQUFDLHlDQUF5QyxFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUNELFdBQVc7UUFDVixJQUFJLElBQUksQ0FBQyxhQUFhO1lBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxrQkFBa0I7UUFDakIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMxRyxDQUFDO0lBRU8seUNBQXlDO1FBQ2hELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFjLEVBQUUsRUFBRTtZQUMzRixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztZQUM1QixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQzs7MEhBMURXLDZCQUE2Qjs4R0FBN0IsNkJBQTZCLHNPQUlhLFdBQVcsb0VBV25ELHFDQUFxQyxnREM1RXBELGlsQ0E0QkE7MkZEaUNhLDZCQUE2QjtrQkFOekMsU0FBUzsrQkFDQywyQkFBMkIsbUJBR3BCLHVCQUF1QixDQUFDLE1BQU07b0xBTXNCLG9DQUFvQztzQkFBeEcsWUFBWTt1QkFBQyw4QkFBOEIsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUU7Z0JBWS9ELG9CQUFvQjtzQkFEdkIsWUFBWTt1QkFBQyxxQ0FBcUM7Z0JBVS9DLFdBQVc7c0JBRGQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUGFydGljaXBhbnRQYW5lbEl0ZW1FbGVtZW50c0RpcmVjdGl2ZSB9IGZyb20gJy4uLy4uLy4uLy4uL2RpcmVjdGl2ZXMvdGVtcGxhdGUvb3BlbnZpZHUtYW5ndWxhci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUGFydGljaXBhbnRBYnN0cmFjdE1vZGVsIH0gZnJvbSAnLi4vLi4vLi4vLi4vbW9kZWxzL3BhcnRpY2lwYW50Lm1vZGVsJztcbmltcG9ydCB7IE9wZW5WaWR1QW5ndWxhckNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9jb25maWcvb3BlbnZpZHUtYW5ndWxhci5jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBQYXJ0aWNpcGFudFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9wYXJ0aWNpcGFudC9wYXJ0aWNpcGFudC5zZXJ2aWNlJztcblxuLyoqXG4gKlxuICogVGhlICoqUGFydGljaXBhbnRQYW5lbEl0ZW1Db21wb25lbnQqKiBpcyBob3N0ZWQgaW5zaWRlIG9mIHRoZSB7QGxpbmsgUGFydGljaXBhbnRzUGFuZWxDb21wb25lbnR9LlxuICogSXQgaXMgaW4gY2hhcmdlIG9mIGRpc3BsYXlpbmcgdGhlIHBhcnRpY2lwYW50cyBpbmZvcm1hdGlvbiBpbnNpZGUgb2YgdGhlIFBhcnRpY2lwYW5zUGFuZWxDb21wb25lbnQuXG4gKlxuICogPGRpdiBjbGFzcz1cImN1c3RvbS10YWJsZS1jb250YWluZXJcIj5cbiAqIDxkaXY+XG4gKiAgPGgzPkFQSSBEaXJlY3RpdmVzPC9oMz5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBhbGxvd3MgdXMgdG8gc2hvdyBvciBoaWRlIGNlcnRhaW4gSFRNTCBlbGVtZW50cyB3aXRoIHRoZSBmb2xsb3dpbmcge0BsaW5rIGh0dHBzOi8vYW5ndWxhci5pby9ndWlkZS9hdHRyaWJ1dGUtZGlyZWN0aXZlcyBBbmd1bGFyIGF0dHJpYnV0ZSBkaXJlY3RpdmVzfVxuICogd2l0aCB0aGUgYWltIG9mIGZ1bGx5IGN1c3RvbWl6aW5nIHRoZSBUb29sYmFyQ29tcG9uZW50LlxuICpcbiAqIHwgKipOYW1lKiogICAgICAgICAgICAgICAgICB8ICoqVHlwZSoqICB8ICoqUmVmZXJlbmNlKiogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgOi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS06IHwgOi0tLS0tLS06IHwgOi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTogfFxuICogfCAqKm11dGVCdXR0b24qKiB8IGBib29sZWFuYCB8IHtAbGluayBQYXJ0aWNpcGFudFBhbmVsSXRlbU11dGVCdXR0b25EaXJlY3RpdmV9IHxcbiAqXG4gKiA8cCBjbGFzcz1cImNvbXBvbmVudC1saW5rLXRleHRcIj5cbiAqIDxzcGFuIGNsYXNzPVwiaXRhbGljXCI+U2VlIGFsbCB7QGxpbmsgQXBpRGlyZWN0aXZlTW9kdWxlIEFQSSBEaXJlY3RpdmVzfTwvc3Bhbj5cbiAqIDwvcD5cbiAqXG4gKiA8L2Rpdj5cbiAqIDxkaXY+XG4gKlxuICogPGgzPk9wZW5WaWR1IEFuZ3VsYXIgRGlyZWN0aXZlczwvaDM+XG4gKlxuICogVGhlIFBhcnRpY2lwYW50UGFuZWxJdGVtQ29tcG9uZW50IGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgY3VzdG9tIGNvbXBvbmVudC4gSXQgcHJvdmlkZXMgdXMgdGhlIGZvbGxvd2luZyB7QGxpbmsgaHR0cHM6Ly9hbmd1bGFyLmlvL2d1aWRlL3N0cnVjdHVyYWwtZGlyZWN0aXZlcyBBbmd1bGFyIHN0cnVjdHVyYWwgZGlyZWN0aXZlc31cbiAqIGZvciBkb2luZyB0aGlzLlxuICpcbiAqIHwgICAgICAgICAgICAqKkRpcmVjdGl2ZSoqICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAqKlJlZmVyZW5jZSoqICAgICAgICAgICAgICAgICB8XG4gKiB8Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS06fDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS06fFxuICogfCAgICAgKioqb3ZQYXJ0aWNpcGFudFBhbmVsSXRlbSoqICAgICB8ICAgICB7QGxpbmsgUGFydGljaXBhbnRQYW5lbEl0ZW1EaXJlY3RpdmV9ICAgICB8XG4gKlxuICogPC9icj5cbiAqXG4gKiBJdCBpcyBhbHNvIHByb3ZpZGluZyB1cyBhIHdheSB0byAqKmFkZCBhZGRpdGlvbmFsIGJ1dHRvbnMqKiB0byB0aGUgZGVmYXVsdCBwYXJ0aWNpcGFudCBwYW5lbCBpdGVtLlxuICogSXQgd2lsbCByZWNvZ25pc2UgdGhlIGZvbGxvd2luZyBkaXJlY3RpdmUgaW4gYSBjaGlsZCBlbGVtZW50LlxuICpcbiAqIHwgICAgICAgICAgICAqKkRpcmVjdGl2ZSoqICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAqKlJlZmVyZW5jZSoqICAgICAgICAgICAgICAgICB8XG4gKiB8Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS06fDotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS06fFxuICogfCAqKipvdlBhcnRpY2lwYW50UGFuZWxJdGVtRWxlbWVudHMqKiB8IHtAbGluayBQYXJ0aWNpcGFudFBhbmVsSXRlbUVsZW1lbnRzRGlyZWN0aXZlfSB8XG4gKlxuICogPHAgY2xhc3M9XCJjb21wb25lbnQtbGluay10ZXh0XCI+XG4gKiBcdDxzcGFuIGNsYXNzPVwiaXRhbGljXCI+U2VlIGFsbCB7QGxpbmsgT3BlblZpZHVBbmd1bGFyRGlyZWN0aXZlTW9kdWxlIE9wZW5WaWR1IEFuZ3VsYXIgRGlyZWN0aXZlc308L3NwYW4+XG4gKiA8L3A+XG4gKiA8L2Rpdj5cbiAqIDwvZGl2PlxuICovXG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ292LXBhcnRpY2lwYW50LXBhbmVsLWl0ZW0nLFxuXHR0ZW1wbGF0ZVVybDogJy4vcGFydGljaXBhbnQtcGFuZWwtaXRlbS5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL3BhcnRpY2lwYW50LXBhbmVsLWl0ZW0uY29tcG9uZW50LmNzcyddLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQYXJ0aWNpcGFudFBhbmVsSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblx0LyoqXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cdEBDb250ZW50Q2hpbGQoJ3BhcnRpY2lwYW50UGFuZWxJdGVtRWxlbWVudHMnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmIH0pIHBhcnRpY2lwYW50UGFuZWxJdGVtRWxlbWVudHNUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuXHQvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cdHNob3dNdXRlQnV0dG9uOiBib29sZWFuID0gdHJ1ZTtcblx0cHJpdmF0ZSBtdXRlQnV0dG9uU3ViOiBTdWJzY3JpcHRpb247XG5cblx0LyoqXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cdEBDb250ZW50Q2hpbGQoUGFydGljaXBhbnRQYW5lbEl0ZW1FbGVtZW50c0RpcmVjdGl2ZSlcblx0c2V0IGV4dGVybmFsSXRlbUVsZW1lbnRzKGV4dGVybmFsSXRlbUVsZW1lbnRzOiBQYXJ0aWNpcGFudFBhbmVsSXRlbUVsZW1lbnRzRGlyZWN0aXZlKSB7XG5cdFx0Ly8gVGhpcyBkaXJlY3RpdmUgd2lsbCBoYXMgdmFsdWUgb25seSB3aGVuIElURU0gRUxFTUVOVFMgY29tcG9uZW50IHRhZ2dldCB3aXRoICcqb3ZQYXJ0aWNpcGFudFBhbmVsSXRlbUVsZW1lbnRzJyBkaXJlY3RpdmVcblx0XHQvLyBpcyBpbnNpZGUgb2YgdGhlIFAgUEFORUwgSVRFTSBjb21wb25lbnQgdGFnZ2VkIHdpdGggJypvdlBhcnRpY2lwYW50UGFuZWxJdGVtJyBkaXJlY3RpdmVcblx0XHRpZiAoZXh0ZXJuYWxJdGVtRWxlbWVudHMpIHtcblx0XHRcdHRoaXMucGFydGljaXBhbnRQYW5lbEl0ZW1FbGVtZW50c1RlbXBsYXRlID0gZXh0ZXJuYWxJdGVtRWxlbWVudHMudGVtcGxhdGU7XG5cdFx0fVxuXHR9XG5cblx0QElucHV0KClcblx0c2V0IHBhcnRpY2lwYW50KHBhcnRpY2lwYW50OiBQYXJ0aWNpcGFudEFic3RyYWN0TW9kZWwpIHtcblx0XHR0aGlzLl9wYXJ0aWNpcGFudCA9IHBhcnRpY2lwYW50O1xuXHR9XG5cblx0LyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXHRfcGFydGljaXBhbnQ6IFBhcnRpY2lwYW50QWJzdHJhY3RNb2RlbDtcblxuXHQvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgbGliU2VydmljZTogT3BlblZpZHVBbmd1bGFyQ29uZmlnU2VydmljZSwgcHJvdGVjdGVkIHBhcnRpY2lwYW50U2VydmljZTogUGFydGljaXBhbnRTZXJ2aWNlLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuXHRuZ09uSW5pdCgpOiB2b2lkIHtcblx0XHR0aGlzLnN1YnNjcmliZVRvUGFydGljaXBhbnRQYW5lbEl0ZW1EaXJlY3RpdmVzKCk7XG5cdH1cblx0bmdPbkRlc3Ryb3koKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMubXV0ZUJ1dHRvblN1YikgdGhpcy5tdXRlQnV0dG9uU3ViLnVuc3Vic2NyaWJlKCk7XG5cdH1cblxuXHQvKipcblx0ICogQGlnbm9yZVxuXHQgKi9cblx0dG9nZ2xlTXV0ZUZvcmNpYmx5KCkge1xuXHRcdHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLnNldFJlbW90ZU11dGVkRm9yY2libHkodGhpcy5fcGFydGljaXBhbnQuaWQsICF0aGlzLl9wYXJ0aWNpcGFudC5pc011dGVkRm9yY2libHkpO1xuXHR9XG5cblx0cHJpdmF0ZSBzdWJzY3JpYmVUb1BhcnRpY2lwYW50UGFuZWxJdGVtRGlyZWN0aXZlcygpIHtcblx0XHR0aGlzLm11dGVCdXR0b25TdWIgPSB0aGlzLmxpYlNlcnZpY2UucGFydGljaXBhbnRJdGVtTXV0ZUJ1dHRvbi5zdWJzY3JpYmUoKHZhbHVlOiBib29sZWFuKSA9PiB7XG5cdFx0XHR0aGlzLnNob3dNdXRlQnV0dG9uID0gdmFsdWU7XG5cdFx0XHR0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xuXHRcdH0pO1xuXHR9XG59XG4iLCI8bWF0LWxpc3Q+XG5cdDxtYXQtbGlzdC1pdGVtPlxuXHRcdDxtYXQtaWNvbiBtYXRMaXN0QXZhdGFyIGNsYXNzPVwicGFydGljaXBhbnQtYXZhdGFyXCI+cGVyc29uPC9tYXQtaWNvbj5cblx0XHQ8aDMgbWF0TGluZSBjbGFzcz1cInBhcnRpY2lwYW50LW5pY2tuYW1lXCI+e3sgX3BhcnRpY2lwYW50Lm5pY2tuYW1lIH19PC9oMz5cblx0XHQ8cCBtYXRMaW5lIGNsYXNzPVwicGFydGljaXBhbnQtc3VidGl0bGVcIj57eyBfcGFydGljaXBhbnQgfCBzdHJlYW1UeXBlc0VuYWJsZWQgfX08L3A+XG5cdFx0PCEtLSA8cCBtYXRMaW5lPlxuXHRcdFx0PHNwYW4gY2xhc3M9XCJwYXJ0aWNpcGFudC1zdWJ0aXRsZVwiPjwvc3Bhbj5cblx0XHQ8L3A+IC0tPlxuXG5cdFx0PGRpdiBjbGFzcz1cInBhcnRpY2lwYW50LWFjdGlvbi1idXR0b25zXCI+XG5cdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdG1hdC1pY29uLWJ1dHRvblxuXHRcdFx0XHRpZD1cIm11dGUtYnRuXCJcblx0XHRcdFx0Km5nSWY9XCIhX3BhcnRpY2lwYW50LmxvY2FsICYmIHNob3dNdXRlQnV0dG9uXCJcblx0XHRcdFx0W2NsYXNzLndhcm4tYnRuXT1cIl9wYXJ0aWNpcGFudC5pc011dGVkRm9yY2libHlcIlxuXHRcdFx0XHQoY2xpY2spPVwidG9nZ2xlTXV0ZUZvcmNpYmx5KClcIlxuXHRcdFx0PlxuXHRcdFx0XHQ8bWF0LWljb24gKm5nSWY9XCIhX3BhcnRpY2lwYW50LmlzTXV0ZWRGb3JjaWJseVwiPnZvbHVtZV91cDwvbWF0LWljb24+XG5cdFx0XHRcdDxtYXQtaWNvbiAqbmdJZj1cIl9wYXJ0aWNpcGFudC5pc011dGVkRm9yY2libHlcIj52b2x1bWVfb2ZmPC9tYXQtaWNvbj5cblx0XHRcdDwvYnV0dG9uPlxuXG5cdFx0XHQ8IS0tIEV4dGVybmFsIGl0ZW0gZWxlbWVudHMgIC0tPlxuXHRcdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cInBhcnRpY2lwYW50UGFuZWxJdGVtRWxlbWVudHNUZW1wbGF0ZVwiPlxuXHRcdFx0XHQ8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwicGFydGljaXBhbnRQYW5lbEl0ZW1FbGVtZW50c1RlbXBsYXRlXCI+PC9uZy1jb250YWluZXI+XG5cdFx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHQ8L2Rpdj5cblx0PC9tYXQtbGlzdC1pdGVtPlxuPC9tYXQtbGlzdD5cbiJdfQ==