import { Injectable } from '@angular/core';
import { Storage } from '../../models/storage.model';
import * as i0 from "@angular/core";
import * as i1 from "../logger/logger.service";
/**
 * @internal
 */
export class StorageService {
    constructor(loggerSrv) {
        this.loggerSrv = loggerSrv;
        this.storage = window.localStorage;
        this.log = this.loggerSrv.get('StorageService');
    }
    getNickname() {
        return this.get(Storage.USER_NICKNAME);
    }
    setNickname(name) {
        this.set(Storage.USER_NICKNAME, name);
    }
    getVideoDevice() {
        return this.get(Storage.VIDEO_DEVICE);
    }
    setVideoDevice(device) {
        this.set(Storage.VIDEO_DEVICE, device);
    }
    getAudioDevice() {
        return this.get(Storage.AUDIO_DEVICE);
    }
    setAudioDevice(device) {
        this.set(Storage.AUDIO_DEVICE, device);
    }
    isVideoMuted() {
        return this.get(Storage.VIDEO_MUTED) === 'true';
    }
    setVideoMuted(muted) {
        this.set(Storage.VIDEO_MUTED, `${muted}`);
    }
    isAudioMuted() {
        return this.get(Storage.AUDIO_MUTED) === 'true';
    }
    setAudioMuted(muted) {
        this.set(Storage.AUDIO_MUTED, `${muted}`);
    }
    setLang(lang) {
        this.set(Storage.LANG, lang);
    }
    getLang() {
        return this.get(Storage.LANG);
    }
    setCaptionLang(lang) {
        this.set(Storage.CAPTION_LANG, lang);
    }
    getCaptionsLang() {
        return this.get(Storage.CAPTION_LANG);
    }
    setBackground(id) {
        this.set(Storage.BACKGROUND, id);
    }
    getBackground() {
        return this.get(Storage.BACKGROUND);
    }
    removeBackground() {
        this.remove(Storage.BACKGROUND);
    }
    set(key, item) {
        const value = JSON.stringify({ item: item });
        // this.log.d('Storing on localStorage "' + key + '" with value "' + value + '"');
        this.storage.setItem(key, value);
    }
    get(key) {
        const str = this.storage.getItem(key);
        if (!!str) {
            return JSON.parse(str).item;
        }
        return null;
    }
    remove(key) {
        this.storage.removeItem(key);
    }
    clear() {
        this.log.d('Clearing localStorage');
        this.storage.clear();
    }
}
StorageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StorageService, deps: [{ token: i1.LoggerService }], target: i0.ɵɵFactoryTarget.Injectable });
StorageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StorageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StorageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.LoggerService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvb3BlbnZpZHUtYW5ndWxhci9zcmMvbGliL3NlcnZpY2VzL3N0b3JhZ2Uvc3RvcmFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFHckQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8sY0FBYztJQUkxQixZQUFvQixTQUF3QjtRQUF4QixjQUFTLEdBQVQsU0FBUyxDQUFlO1FBSHJDLFlBQU8sR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBSXBDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsV0FBVztRQUNWLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFZO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQ0QsY0FBYztRQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUFXO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsY0FBYztRQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUFXO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsWUFBWTtRQUNYLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssTUFBTSxDQUFDO0lBQ2pELENBQUM7SUFDRCxhQUFhLENBQUMsS0FBYztRQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxZQUFZO1FBQ1gsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxNQUFNLENBQUM7SUFDakQsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFjO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFZO1FBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsT0FBTztRQUNOLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELGNBQWMsQ0FBQyxJQUFZO1FBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsZUFBZTtRQUNkLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELGFBQWEsQ0FBQyxFQUFVO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsYUFBYTtRQUNaLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELGdCQUFnQjtRQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTyxHQUFHLENBQUMsR0FBVyxFQUFFLElBQVM7UUFDakMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLGtGQUFrRjtRQUNsRixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNPLEdBQUcsQ0FBQyxHQUFXO1FBQ3RCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRTtZQUNWLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDNUI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFTyxNQUFNLENBQUMsR0FBVztRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRU0sS0FBSztRQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QixDQUFDOzsyR0E3RlcsY0FBYzsrR0FBZCxjQUFjLGNBRmQsTUFBTTsyRkFFTixjQUFjO2tCQUgxQixVQUFVO21CQUFDO29CQUNYLFVBQVUsRUFBRSxNQUFNO2lCQUNsQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElMb2dnZXIgfSBmcm9tICcuLi8uLi9tb2RlbHMvbG9nZ2VyLm1vZGVsJztcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICcuLi8uLi9tb2RlbHMvc3RvcmFnZS5tb2RlbCc7XG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbG9nZ2VyL2xvZ2dlci5zZXJ2aWNlJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU3RvcmFnZVNlcnZpY2Uge1xuXHRwdWJsaWMgc3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG5cdHB1YmxpYyBsb2c6IElMb2dnZXI7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSBsb2dnZXJTcnY6IExvZ2dlclNlcnZpY2UpIHtcblx0XHR0aGlzLmxvZyA9IHRoaXMubG9nZ2VyU3J2LmdldCgnU3RvcmFnZVNlcnZpY2UnKTtcblx0fVxuXG5cdGdldE5pY2tuYW1lKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0KFN0b3JhZ2UuVVNFUl9OSUNLTkFNRSk7XG5cdH1cblxuXHRzZXROaWNrbmFtZShuYW1lOiBzdHJpbmcpIHtcblx0XHR0aGlzLnNldChTdG9yYWdlLlVTRVJfTklDS05BTUUsIG5hbWUpO1xuXHR9XG5cdGdldFZpZGVvRGV2aWNlKCkge1xuXHRcdHJldHVybiB0aGlzLmdldChTdG9yYWdlLlZJREVPX0RFVklDRSk7XG5cdH1cblxuXHRzZXRWaWRlb0RldmljZShkZXZpY2U6IGFueSkge1xuXHRcdHRoaXMuc2V0KFN0b3JhZ2UuVklERU9fREVWSUNFLCBkZXZpY2UpO1xuXHR9XG5cblx0Z2V0QXVkaW9EZXZpY2UoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0KFN0b3JhZ2UuQVVESU9fREVWSUNFKTtcblx0fVxuXG5cdHNldEF1ZGlvRGV2aWNlKGRldmljZTogYW55KSB7XG5cdFx0dGhpcy5zZXQoU3RvcmFnZS5BVURJT19ERVZJQ0UsIGRldmljZSk7XG5cdH1cblx0aXNWaWRlb011dGVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmdldChTdG9yYWdlLlZJREVPX01VVEVEKSA9PT0gJ3RydWUnO1xuXHR9XG5cdHNldFZpZGVvTXV0ZWQobXV0ZWQ6IGJvb2xlYW4pIHtcblx0XHR0aGlzLnNldChTdG9yYWdlLlZJREVPX01VVEVELCBgJHttdXRlZH1gKTtcblx0fVxuXG5cdGlzQXVkaW9NdXRlZCgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5nZXQoU3RvcmFnZS5BVURJT19NVVRFRCkgPT09ICd0cnVlJztcblx0fVxuXG5cdHNldEF1ZGlvTXV0ZWQobXV0ZWQ6IGJvb2xlYW4pIHtcblx0XHR0aGlzLnNldChTdG9yYWdlLkFVRElPX01VVEVELCBgJHttdXRlZH1gKTtcblx0fVxuXG5cdHNldExhbmcobGFuZzogc3RyaW5nKSB7XG5cdFx0dGhpcy5zZXQoU3RvcmFnZS5MQU5HLCBsYW5nKTtcblx0fVxuXG5cdGdldExhbmcoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5nZXQoU3RvcmFnZS5MQU5HKTtcblx0fVxuXG5cdHNldENhcHRpb25MYW5nKGxhbmc6IHN0cmluZykge1xuXHRcdHRoaXMuc2V0KFN0b3JhZ2UuQ0FQVElPTl9MQU5HLCBsYW5nKTtcblx0fVxuXG5cdGdldENhcHRpb25zTGFuZygpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLmdldChTdG9yYWdlLkNBUFRJT05fTEFORyk7XG5cdH1cblxuXHRzZXRCYWNrZ3JvdW5kKGlkOiBzdHJpbmcpIHtcblx0XHR0aGlzLnNldChTdG9yYWdlLkJBQ0tHUk9VTkQsIGlkKTtcblx0fVxuXG5cdGdldEJhY2tncm91bmQoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5nZXQoU3RvcmFnZS5CQUNLR1JPVU5EKTtcblx0fVxuXG5cdHJlbW92ZUJhY2tncm91bmQoKSB7XG5cdFx0dGhpcy5yZW1vdmUoU3RvcmFnZS5CQUNLR1JPVU5EKTtcblx0fVxuXG5cdHByaXZhdGUgc2V0KGtleTogc3RyaW5nLCBpdGVtOiBhbnkpIHtcblx0XHRjb25zdCB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHsgaXRlbTogaXRlbSB9KTtcblx0XHQvLyB0aGlzLmxvZy5kKCdTdG9yaW5nIG9uIGxvY2FsU3RvcmFnZSBcIicgKyBrZXkgKyAnXCIgd2l0aCB2YWx1ZSBcIicgKyB2YWx1ZSArICdcIicpO1xuXHRcdHRoaXMuc3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuXHR9XG5cdHByaXZhdGUgZ2V0KGtleTogc3RyaW5nKTogYW55IHtcblx0XHRjb25zdCBzdHIgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuXHRcdGlmICghIXN0cikge1xuXHRcdFx0cmV0dXJuIEpTT04ucGFyc2Uoc3RyKS5pdGVtO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHByaXZhdGUgcmVtb3ZlKGtleTogc3RyaW5nKSB7XG5cdFx0dGhpcy5zdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcblx0fVxuXG5cdHB1YmxpYyBjbGVhcigpIHtcblx0XHR0aGlzLmxvZy5kKCdDbGVhcmluZyBsb2NhbFN0b3JhZ2UnKTtcblx0XHR0aGlzLnN0b3JhZ2UuY2xlYXIoKTtcblx0fVxufVxuIl19