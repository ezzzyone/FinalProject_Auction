import { Injectable } from '@angular/core';
import { DeleteDialogComponent } from '../../components/dialogs/delete-recording.component';
import { DialogTemplateComponent } from '../../components/dialogs/dialog.component';
import { ProFeatureDialogTemplateComponent } from '../../components/dialogs/pro-feature-dialog.component';
import { RecordingDialogComponent } from '../../components/dialogs/recording-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/snack-bar";
import * as i2 from "@angular/material/dialog";
/**
 * @internal
 */
export class ActionService {
    constructor(snackBar, dialog) {
        this.snackBar = snackBar;
        this.dialog = dialog;
    }
    launchNotification(options, callback) {
        if (!options.config) {
            options.config = {
                duration: 3000,
                verticalPosition: 'top',
                horizontalPosition: 'end'
            };
        }
        const notification = this.snackBar.open(options.message, options.buttonActionText, options.config);
        if (callback) {
            notification.onAction().subscribe(() => {
                callback();
            });
        }
    }
    openDialog(titleMessage, descriptionMessage, allowClose = true) {
        try {
            this.closeDialog();
        }
        catch (error) {
        }
        finally {
            const config = {
                minWidth: '250px',
                data: { title: titleMessage, description: descriptionMessage, showActionButtons: allowClose },
                disableClose: !allowClose
            };
            this.dialogRef = this.dialog.open(DialogTemplateComponent, config);
            this.dialogSubscription = this.dialogRef.afterClosed().subscribe((result) => {
                this.dialogRef = undefined;
            });
        }
    }
    openProFeatureDialog(titleMessage, descriptionMessage, allowClose = true) {
        try {
            this.closeDialog();
        }
        catch (error) {
        }
        finally {
            const config = {
                minWidth: '250px',
                data: { title: titleMessage, description: descriptionMessage, showActionButtons: allowClose },
                disableClose: !allowClose
            };
            this.dialogRef = this.dialog.open(ProFeatureDialogTemplateComponent, config);
            this.dialogSubscription = this.dialogRef.afterClosed().subscribe((result) => {
                this.dialogRef = undefined;
            });
        }
    }
    openDeleteRecordingDialog(succsessCallback) {
        try {
            this.closeDialog();
        }
        catch (error) {
        }
        finally {
            this.dialogRef = this.dialog.open(DeleteDialogComponent);
            this.dialogSubscription = this.dialogRef.afterClosed().subscribe((result) => {
                if (result) {
                    succsessCallback();
                }
            });
        }
    }
    openRecordingPlayerDialog(src, allowClose = true) {
        try {
            this.closeDialog();
        }
        catch (error) {
        }
        finally {
            const config = {
                minWidth: '250px',
                data: { src, showActionButtons: allowClose },
                disableClose: !allowClose
            };
            this.dialogRef = this.dialog.open(RecordingDialogComponent, config);
        }
    }
    closeDialog() {
        this.dialogRef?.close();
        if (this.dialogSubscription)
            this.dialogSubscription.unsubscribe();
    }
}
ActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ActionService, deps: [{ token: i1.MatSnackBar }, { token: i2.MatDialog }], target: i0.ɵɵFactoryTarget.Injectable });
ActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ActionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ActionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.MatSnackBar }, { type: i2.MatDialog }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9vcGVudmlkdS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvYWN0aW9uL2FjdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scURBQXFELENBQUM7QUFDNUYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDcEYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDMUcsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0scURBQXFELENBQUM7Ozs7QUFHL0Y7O0dBRUc7QUFJSCxNQUFNLE9BQU8sYUFBYTtJQUt6QixZQUFvQixRQUFxQixFQUFTLE1BQWlCO1FBQS9DLGFBQVEsR0FBUixRQUFRLENBQWE7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFXO0lBQUcsQ0FBQztJQUV2RSxrQkFBa0IsQ0FBQyxPQUE2QixFQUFFLFFBQVE7UUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDcEIsT0FBTyxDQUFDLE1BQU0sR0FBRztnQkFDaEIsUUFBUSxFQUFFLElBQUk7Z0JBQ2QsZ0JBQWdCLEVBQUUsS0FBSztnQkFDdkIsa0JBQWtCLEVBQUUsS0FBSzthQUN6QixDQUFDO1NBQ0Y7UUFFRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkcsSUFBSSxRQUFRLEVBQUU7WUFDYixZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDdEMs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QUksQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNwRTtJQUNGLENBQUM7SUFFRCxXQUFXO1FBQ1YsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxrQkFBa0I7WUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEUsQ0FBQzs7MEdBMUZXLGFBQWE7OEdBQWIsYUFBYSxjQUZiLE1BQU07MkZBRU4sYUFBYTtrQkFIekIsVUFBVTttQkFBQztvQkFDWCxVQUFVLEVBQUUsTUFBTTtpQkFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2csIE1hdERpYWxvZ0NvbmZpZywgTWF0RGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IE1hdFNuYWNrQmFyIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc25hY2stYmFyJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGVsZXRlRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9kaWFsb2dzL2RlbGV0ZS1yZWNvcmRpbmcuY29tcG9uZW50JztcbmltcG9ydCB7IERpYWxvZ1RlbXBsYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9kaWFsb2dzL2RpYWxvZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgUHJvRmVhdHVyZURpYWxvZ1RlbXBsYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9kaWFsb2dzL3Byby1mZWF0dXJlLWRpYWxvZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVjb3JkaW5nRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9kaWFsb2dzL3JlY29yZGluZy1kaWFsb2cuY29tcG9uZW50JztcbmltcG9ydCB7IElOb3RpZmljYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vLi4vbW9kZWxzL25vdGlmaWNhdGlvbi1vcHRpb25zLm1vZGVsJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQWN0aW9uU2VydmljZSB7XG5cdHByaXZhdGUgZGlhbG9nUmVmOlxuXHRcdHwgTWF0RGlhbG9nUmVmPERpYWxvZ1RlbXBsYXRlQ29tcG9uZW50IHwgUmVjb3JkaW5nRGlhbG9nQ29tcG9uZW50IHwgRGVsZXRlRGlhbG9nQ29tcG9uZW50IHwgUHJvRmVhdHVyZURpYWxvZ1RlbXBsYXRlQ29tcG9uZW50PlxuXHRcdHwgdW5kZWZpbmVkO1xuXHRwcml2YXRlIGRpYWxvZ1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHNuYWNrQmFyOiBNYXRTbmFja0JhciwgcHVibGljIGRpYWxvZzogTWF0RGlhbG9nKSB7fVxuXG5cdGxhdW5jaE5vdGlmaWNhdGlvbihvcHRpb25zOiBJTm90aWZpY2F0aW9uT3B0aW9ucywgY2FsbGJhY2spOiB2b2lkIHtcblx0XHRpZiAoIW9wdGlvbnMuY29uZmlnKSB7XG5cdFx0XHRvcHRpb25zLmNvbmZpZyA9IHtcblx0XHRcdFx0ZHVyYXRpb246IDMwMDAsXG5cdFx0XHRcdHZlcnRpY2FsUG9zaXRpb246ICd0b3AnLFxuXHRcdFx0XHRob3Jpem9udGFsUG9zaXRpb246ICdlbmQnXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGNvbnN0IG5vdGlmaWNhdGlvbiA9IHRoaXMuc25hY2tCYXIub3BlbihvcHRpb25zLm1lc3NhZ2UsIG9wdGlvbnMuYnV0dG9uQWN0aW9uVGV4dCwgb3B0aW9ucy5jb25maWcpO1xuXHRcdGlmIChjYWxsYmFjaykge1xuXHRcdFx0bm90aWZpY2F0aW9uLm9uQWN0aW9uKCkuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdG9wZW5EaWFsb2codGl0bGVNZXNzYWdlOiBzdHJpbmcsIGRlc2NyaXB0aW9uTWVzc2FnZTogc3RyaW5nLCBhbGxvd0Nsb3NlID0gdHJ1ZSkge1xuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLmNsb3NlRGlhbG9nKCk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0Y29uc3QgY29uZmlnOiBNYXREaWFsb2dDb25maWcgPSB7XG5cdFx0XHRcdG1pbldpZHRoOiAnMjUwcHgnLFxuXHRcdFx0XHRkYXRhOiB7IHRpdGxlOiB0aXRsZU1lc3NhZ2UsIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbk1lc3NhZ2UsIHNob3dBY3Rpb25CdXR0b25zOiBhbGxvd0Nsb3NlIH0sXG5cdFx0XHRcdGRpc2FibGVDbG9zZTogIWFsbG93Q2xvc2Vcblx0XHRcdH07XG5cdFx0XHR0aGlzLmRpYWxvZ1JlZiA9IHRoaXMuZGlhbG9nLm9wZW4oRGlhbG9nVGVtcGxhdGVDb21wb25lbnQsIGNvbmZpZyk7XG5cdFx0XHR0aGlzLmRpYWxvZ1N1YnNjcmlwdGlvbiA9IHRoaXMuZGlhbG9nUmVmLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKChyZXN1bHQpID0+IHtcblx0XHRcdFx0dGhpcy5kaWFsb2dSZWYgPSB1bmRlZmluZWQ7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRvcGVuUHJvRmVhdHVyZURpYWxvZyh0aXRsZU1lc3NhZ2U6IHN0cmluZywgZGVzY3JpcHRpb25NZXNzYWdlOiBzdHJpbmcsIGFsbG93Q2xvc2UgPSB0cnVlKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHRoaXMuY2xvc2VEaWFsb2coKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRjb25zdCBjb25maWc6IE1hdERpYWxvZ0NvbmZpZyA9IHtcblx0XHRcdFx0bWluV2lkdGg6ICcyNTBweCcsXG5cdFx0XHRcdGRhdGE6IHsgdGl0bGU6IHRpdGxlTWVzc2FnZSwgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uTWVzc2FnZSwgc2hvd0FjdGlvbkJ1dHRvbnM6IGFsbG93Q2xvc2UgfSxcblx0XHRcdFx0ZGlzYWJsZUNsb3NlOiAhYWxsb3dDbG9zZVxuXHRcdFx0fTtcblx0XHRcdHRoaXMuZGlhbG9nUmVmID0gdGhpcy5kaWFsb2cub3BlbihQcm9GZWF0dXJlRGlhbG9nVGVtcGxhdGVDb21wb25lbnQsIGNvbmZpZyk7XG5cdFx0XHR0aGlzLmRpYWxvZ1N1YnNjcmlwdGlvbiA9IHRoaXMuZGlhbG9nUmVmLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKChyZXN1bHQpID0+IHtcblx0XHRcdFx0dGhpcy5kaWFsb2dSZWYgPSB1bmRlZmluZWQ7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRvcGVuRGVsZXRlUmVjb3JkaW5nRGlhbG9nKHN1Y2NzZXNzQ2FsbGJhY2spIHtcblx0XHR0cnkge1xuXHRcdFx0dGhpcy5jbG9zZURpYWxvZygpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdHRoaXMuZGlhbG9nUmVmID0gdGhpcy5kaWFsb2cub3BlbihEZWxldGVEaWFsb2dDb21wb25lbnQpO1xuXG5cdFx0XHR0aGlzLmRpYWxvZ1N1YnNjcmlwdGlvbiA9IHRoaXMuZGlhbG9nUmVmLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKChyZXN1bHQpID0+IHtcblx0XHRcdFx0aWYgKHJlc3VsdCkge1xuXHRcdFx0XHRcdHN1Y2NzZXNzQ2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0b3BlblJlY29yZGluZ1BsYXllckRpYWxvZyhzcmM6IHN0cmluZywgYWxsb3dDbG9zZSA9IHRydWUpIHtcblx0XHR0cnkge1xuXHRcdFx0dGhpcy5jbG9zZURpYWxvZygpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdGNvbnN0IGNvbmZpZzogTWF0RGlhbG9nQ29uZmlnID0ge1xuXHRcdFx0XHRtaW5XaWR0aDogJzI1MHB4Jyxcblx0XHRcdFx0ZGF0YTogeyBzcmMsIHNob3dBY3Rpb25CdXR0b25zOiBhbGxvd0Nsb3NlIH0sXG5cdFx0XHRcdGRpc2FibGVDbG9zZTogIWFsbG93Q2xvc2Vcblx0XHRcdH07XG5cdFx0XHR0aGlzLmRpYWxvZ1JlZiA9IHRoaXMuZGlhbG9nLm9wZW4oUmVjb3JkaW5nRGlhbG9nQ29tcG9uZW50LCBjb25maWcpO1xuXHRcdH1cblx0fVxuXG5cdGNsb3NlRGlhbG9nKCkge1xuXHRcdHRoaXMuZGlhbG9nUmVmPy5jbG9zZSgpO1xuXHRcdGlmICh0aGlzLmRpYWxvZ1N1YnNjcmlwdGlvbikgdGhpcy5kaWFsb2dTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblx0fVxufVxuIl19