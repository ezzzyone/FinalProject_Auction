import { Injectable } from '@angular/core';
import { OpenVidu, OpenViduErrorName } from 'openvidu-browser';
import { CameraType, DeviceType } from '../../models/device.model';
import * as i0 from "@angular/core";
import * as i1 from "../logger/logger.service";
import * as i2 from "../platform/platform.service";
import * as i3 from "../storage/storage.service";
import * as i4 from "../config/openvidu-angular.config.service";
/**
 * @internal
 */
export class DeviceService {
    constructor(loggerSrv, platformSrv, storageSrv, libSrv) {
        this.loggerSrv = loggerSrv;
        this.platformSrv = platformSrv;
        this.storageSrv = storageSrv;
        this.libSrv = libSrv;
        this.OV = null;
        this.cameras = [];
        this.microphones = [];
        this.videoDevicesEnabled = true;
        this.audioDevicesEnabled = true;
        // Whether the media devices permission have been rejected or not
        this.deviceAccessDeniedError = false;
        this.log = this.loggerSrv.get('DevicesService');
    }
    /**
     * Initialize media devices and select a devices checking in local storage (if exists) or
     * first devices found by default
     */
    async forceInitDevices() {
        this.clear();
        this.OV = new OpenVidu();
        try {
            // if (this.devices?.some((device) => !device.deviceId || !device.label)) {
            // Forcing media permissions request.
            // Sometimes, browser doesn't request the media permissions.
            await this.OV.getUserMedia({ audioSource: undefined, videoSource: undefined });
            // }
            this.devices = await this.getOpenViduDevices();
        }
        catch (error) {
            this.deviceAccessDeniedError = error.name === OpenViduErrorName.DEVICE_ACCESS_DENIED;
            if (this.deviceAccessDeniedError) {
                this.disableVideoDevices();
                this.disableAudioDevices();
            }
        }
        finally {
            if (this.deviceAccessDeniedError) {
                this.log.w('Media devices permissions were not granted.');
            }
            else {
                this.initializeCustomDevices();
                this.updateAudioDeviceSelected();
                this.updateVideoDeviceSelected();
                this._isVideoMuted = this.storageSrv.isVideoMuted() || this.libSrv.videoMuted.getValue();
                this._isAudioMuted = this.storageSrv.isAudioMuted() || this.libSrv.audioMuted.getValue();
                this.log.d('Media devices', this.cameras, this.microphones);
            }
        }
    }
    /**
     * Check and update the media devices devices available
     */
    async refreshDevices() {
        if (!this.deviceAccessDeniedError) {
            this.devices = await this.getOpenViduDevices();
            this.initializeCustomDevices();
        }
    }
    initializeCustomDevices(updateSelected = true) {
        const FIRST_POSITION = 0;
        const defaultMicrophones = this.devices.filter((device) => device.kind === DeviceType.AUDIO_INPUT);
        const defaultCameras = this.devices.filter((device) => device.kind === DeviceType.VIDEO_INPUT);
        if (defaultMicrophones.length > 0) {
            this.microphones = [];
            defaultMicrophones.forEach((device) => {
                this.microphones.push({ label: device.label, device: device.deviceId });
            });
        }
        if (defaultCameras.length > 0) {
            this.cameras = [];
            defaultCameras.forEach((device, index) => {
                const myDevice = {
                    label: device.label,
                    device: device.deviceId,
                    type: CameraType.BACK
                };
                if (this.platformSrv.isMobile()) {
                    // We assume front video device has 'front' in its label in Mobile devices
                    if (myDevice.label.toLowerCase().includes(CameraType.FRONT.toLowerCase())) {
                        myDevice.type = CameraType.FRONT;
                    }
                }
                else {
                    // We assume first device is web camera in Browser Desktop
                    if (index === FIRST_POSITION) {
                        myDevice.type = CameraType.FRONT;
                    }
                }
                this.cameras.push(myDevice);
            });
        }
    }
    updateAudioDeviceSelected() {
        // Setting microphone selected
        if (this.microphones.length > 0) {
            const storageMicrophone = this.getMicrophoneFromStogare();
            if (!!storageMicrophone) {
                this.microphoneSelected = storageMicrophone;
            }
            else if (this.microphones.length > 0) {
                if (this.deviceAccessDeniedError && this.microphones.length > 1) {
                    // We assume that the default device is already in use
                    // Assign an alternative device with the aim of avoiding the DEVICE_ALREADY_IN_USE error
                    this.microphoneSelected = this.microphones[1];
                }
                else {
                    this.microphoneSelected = this.microphones[0];
                }
            }
        }
    }
    updateVideoDeviceSelected() {
        // Setting camera selected
        if (this.cameras.length > 0) {
            const storageCamera = this.getCameraFromStorage();
            if (!!storageCamera) {
                this.cameraSelected = storageCamera;
            }
            else if (this.cameras.length > 0) {
                if (this.deviceAccessDeniedError && this.cameras.length > 1) {
                    // We assume that the default device is already in use
                    // Assign an alternative device with the aim of avoiding the DEVICE_ALREADY_IN_USE error
                    this.cameraSelected = this.cameras[1];
                }
                else {
                    this.cameraSelected = this.cameras[0];
                }
            }
        }
    }
    isVideoMuted() {
        return this.hasVideoDeviceAvailable() && this._isVideoMuted;
    }
    isAudioMuted() {
        return this.hasAudioDeviceAvailable() && this._isAudioMuted;
    }
    getCameraSelected() {
        return this.cameraSelected;
    }
    getMicrophoneSelected() {
        return this.microphoneSelected;
    }
    setCameraSelected(deviceField) {
        this.cameraSelected = this.getCameraByDeviceField(deviceField);
        this.saveCameraToStorage(this.cameraSelected);
    }
    setMicSelected(deviceField) {
        this.microphoneSelected = this.getMicrophoneByDeviceField(deviceField);
        this.saveMicrophoneToStorage(this.microphoneSelected);
    }
    needUpdateVideoTrack(newVideoSource) {
        return this.cameraSelected?.device !== newVideoSource;
    }
    needUpdateAudioTrack(newAudioSource) {
        return this.microphoneSelected?.device !== newAudioSource;
    }
    getCameras() {
        return this.cameras;
    }
    getMicrophones() {
        return this.microphones;
    }
    hasVideoDeviceAvailable() {
        return this.videoDevicesEnabled && this.cameras.length > 0;
    }
    hasAudioDeviceAvailable() {
        return this.audioDevicesEnabled && this.microphones.length > 0;
    }
    cameraNeedsMirror(deviceField) {
        return this.getCameraByDeviceField(deviceField)?.type === CameraType.FRONT;
    }
    disableVideoDevices() {
        this.videoDevicesEnabled = false;
    }
    disableAudioDevices() {
        this.audioDevicesEnabled = false;
    }
    clear() {
        this.OV = null;
        this.devices = [];
        this.cameras = [];
        this.microphones = [];
        this.cameraSelected = null;
        this.microphoneSelected = null;
        this.videoDevicesEnabled = true;
        this.audioDevicesEnabled = true;
    }
    getCameraByDeviceField(deviceField) {
        return this.cameras.find((opt) => opt.device === deviceField || opt.label === deviceField);
    }
    getMicrophoneByDeviceField(deviceField) {
        return this.microphones.find((opt) => opt.device === deviceField || opt.label === deviceField);
    }
    getMicrophoneFromStogare() {
        const storageDevice = this.storageSrv.getAudioDevice();
        if (!!storageDevice && this.microphones.some((device) => device.device === storageDevice.device)) {
            return storageDevice;
        }
    }
    getCameraFromStorage() {
        const storageDevice = this.storageSrv.getVideoDevice();
        if (!!storageDevice && this.cameras.some((device) => device.device === storageDevice.device)) {
            return storageDevice;
        }
    }
    saveCameraToStorage(cam) {
        this.storageSrv.setVideoDevice(cam);
    }
    saveMicrophoneToStorage(mic) {
        this.storageSrv.setAudioDevice(mic);
    }
    async getOpenViduDevices() {
        let devices = (await this.OV?.getDevices()) || [];
        return devices.filter((d) => !!d.label && !!d.deviceId);
    }
}
DeviceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: DeviceService, deps: [{ token: i1.LoggerService }, { token: i2.PlatformService }, { token: i3.StorageService }, { token: i4.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Injectable });
DeviceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: DeviceService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: DeviceService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.LoggerService }, { type: i2.PlatformService }, { type: i3.StorageService }, { type: i4.OpenViduAngularConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,