import { ChangeDetectionStrategy, Component, ContentChild, TemplateRef } from '@angular/core';
import { skip } from 'rxjs';
import { ChatPanelDirective, AdditionalPanelsDirective, ParticipantsPanelDirective, ActivitiesPanelDirective } from '../../directives/template/openvidu-angular.directive';
import { PanelType } from '../../models/panel.model';
import * as i0 from "@angular/core";
import * as i1 from "../../services/panel/panel.service";
import * as i2 from "@angular/common";
/**
 *
 * The **PanelComponent** is hosted inside of the {@link VideoconferenceComponent}.
 * It is in charge of displaying the videoconference panels providing functionalities to the videoconference app
 * such as the chat ({@link ChatPanelComponent}) and list of participants ({@link ParticipantsPanelComponent}) .
 *
 * <div class="custom-table-container">

 * <div>
 *
 * <h3>OpenVidu Angular Directives</h3>
 *
 * The PanelComponent can be replaced with a custom component. It provides us the following {@link https://angular.io/guide/structural-directives Angular structural directives}
 * for doing this.
 *
 * |            **Directive**           |                 **Reference**                 |
 * |:----------------------------------:|:---------------------------------------------:|
 * |           ***ovPanel**           |            {@link PanelDirective}           |
 *
 * </br>
 *
 * It is also providing us a way to **replace the children panels** to the default panel.
 * It will recognise the following directive in a child element.
 *
 * |            **Directive**           |                 **Reference**                 |
 * |:----------------------------------:|:---------------------------------------------:|
 * |           ***ovChatPanel**          |           {@link ChatPanelDirective}          |
 * |       ***ovParticipantsPanel**      |       {@link ParticipantsPanelDirective}      |
 * |        ***ovAdditionalPanels**      |       {@link AdditionalPanelsDirective}       |
 *
 * <p class="component-link-text">
 * 	<span class="italic">See all {@link OpenViduAngularDirectiveModule OpenVidu Angular Directives}</span>
 * </p>
 * </div>
 * </div>
 */
export class PanelComponent {
    /**
     * @ignore
     */
    constructor(panelService, cd) {
        this.panelService = panelService;
        this.cd = cd;
    }
    set externalParticipantPanel(externalParticipantsPanel) {
        // This directive will has value only when PARTICIPANTS PANEL component tagged with '*ovParticipantsPanel'
        // is inside of the PANEL component tagged with '*ovPanel'
        if (externalParticipantsPanel) {
            this.participantsPanelTemplate = externalParticipantsPanel.template;
        }
    }
    // TODO: backgroundEffectsPanel does not provides customization
    // @ContentChild(BackgroundEffectsPanelDirective)
    // set externalBackgroundEffectsPanel(externalBackgroundEffectsPanel: BackgroundEffectsPanelDirective) {
    // This directive will has value only when BACKGROUND EFFECTS PANEL component tagged with '*ovBackgroundEffectsPanel'
    // is inside of the PANEL component tagged with '*ovPanel'
    // if (externalBackgroundEffectsPanel) {
    // 	this.backgroundEffectsPanelTemplate = externalBackgroundEffectsPanel.template;
    // }
    // }
    // TODO: settingsPanel does not provides customization
    // @ContentChild(SettingsPanelDirective)
    // set externalSettingsPanel(externalSettingsPanel: SettingsPanelDirective) {
    // This directive will has value only when SETTINGS PANEL component tagged with '*ovSettingsPanel'
    // is inside of the PANEL component tagged with '*ovPanel'
    // if (externalSettingsPanel) {
    // 	this.settingsPanelTemplate = externalSettingsPanel.template;
    // }
    // }
    set externalActivitiesPanel(externalActivitiesPanel) {
        // This directive will has value only when ACTIVITIES PANEL component tagged with '*ovActivitiesPanel'
        // is inside of the PANEL component tagged with '*ovPanel'
        if (externalActivitiesPanel) {
            this.activitiesPanelTemplate = externalActivitiesPanel.template;
        }
    }
    set externalChatPanel(externalChatPanel) {
        // This directive will has value only when CHAT PANEL component tagged with '*ovChatPanel'
        // is inside of the PANEL component tagged with '*ovPanel'
        if (externalChatPanel) {
            this.chatPanelTemplate = externalChatPanel.template;
        }
    }
    set externalAdditionalPanels(externalAdditionalPanels) {
        // This directive will has value only when ADDITIONAL PANELS component tagged with '*ovPanelAdditionalPanels'
        // is inside of the PANEL component tagged with '*ovPanel'
        if (externalAdditionalPanels) {
            this.additionalPanelsTemplate = externalAdditionalPanels.template;
        }
    }
    ngOnInit() {
        this.subscribeToPanelToggling();
    }
    ngOnDestroy() {
        this.isChatPanelOpened = false;
        this.isParticipantsPanelOpened = false;
        if (this.panelSubscription)
            this.panelSubscription.unsubscribe();
    }
    subscribeToPanelToggling() {
        this.panelSubscription = this.panelService.panelOpenedObs.pipe(skip(1)).subscribe((ev) => {
            this.isChatPanelOpened = ev.opened && ev.type === PanelType.CHAT;
            this.isParticipantsPanelOpened = ev.opened && ev.type === PanelType.PARTICIPANTS;
            this.isBackgroundEffectsPanelOpened = ev.opened && ev.type === PanelType.BACKGROUND_EFFECTS;
            this.isSettingsPanelOpened = ev.opened && ev.type === PanelType.SETTINGS;
            this.isActivitiesPanelOpened = ev.opened && ev.type === PanelType.ACTIVITIES;
            this.isExternalPanelOpened = ev.opened && ev.type !== PanelType.PARTICIPANTS && ev.type !== PanelType.CHAT;
            this.cd.markForCheck();
        });
    }
}
PanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: PanelComponent, deps: [{ token: i1.PanelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
PanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: PanelComponent, selector: "ov-panel", queries: [{ propertyName: "participantsPanelTemplate", first: true, predicate: ["participantsPanel"], descendants: true, read: TemplateRef }, { propertyName: "backgroundEffectsPanelTemplate", first: true, predicate: ["backgroundEffectsPanel"], descendants: true, read: TemplateRef }, { propertyName: "settingsPanelTemplate", first: true, predicate: ["settingsPanel"], descendants: true, read: TemplateRef }, { propertyName: "activitiesPanelTemplate", first: true, predicate: ["activitiesPanel"], descendants: true, read: TemplateRef }, { propertyName: "chatPanelTemplate", first: true, predicate: ["chatPanel"], descendants: true, read: TemplateRef }, { propertyName: "additionalPanelsTemplate", first: true, predicate: ["additionalPanels"], descendants: true, read: TemplateRef }, { propertyName: "externalParticipantPanel", first: true, predicate: ParticipantsPanelDirective, descendants: true }, { propertyName: "externalActivitiesPanel", first: true, predicate: ActivitiesPanelDirective, descendants: true }, { propertyName: "externalChatPanel", first: true, predicate: ChatPanelDirective, descendants: true }, { propertyName: "externalAdditionalPanels", first: true, predicate: AdditionalPanelsDirective, descendants: true }], ngImport: i0, template: "<!-- CHAT panel -->\n<ng-container *ngIf=\"isChatPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"chatPanelTemplate\"></ng-container>\n</ng-container>\n\n\n<!-- PARTICIPANTS panel -->\n<ng-container *ngIf=\"isParticipantsPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"participantsPanelTemplate\"></ng-container>\n</ng-container>\n\n<!-- Background effects panel -->\n<ng-container *ngIf=\"isBackgroundEffectsPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"backgroundEffectsPanelTemplate\"></ng-container>\n</ng-container>\n\n<!-- Settings panel -->\n<ng-container *ngIf=\"isSettingsPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"settingsPanelTemplate\"></ng-container>\n</ng-container>\n\n<!-- Activities panel -->\n<ng-container *ngIf=\"isActivitiesPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"activitiesPanelTemplate\"></ng-container>\n</ng-container>\n\n<!-- External additional panels  -->\n<ng-container *ngIf=\"additionalPanelsTemplate && isExternalPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"additionalPanelsTemplate\"></ng-container>\n</ng-container>\n", styles: [".panel-container{margin:20px;background-color:var(--ov-panel-background);border-radius:var(--ov-panel-radius);max-height:calc(100% - 40px);min-height:calc(100% - 40px)}.panel-header-container{padding:10px;display:flex}.panel-title{margin-left:5px;margin-top:auto;margin-bottom:auto}.panel-close-button{margin-left:auto;border-radius:var(--ov-buttons-radius)}::-webkit-scrollbar{width:8px}::-webkit-scrollbar-thumb{background:#a7a7a7;border-radius:4px}::-webkit-scrollbar-thumb:hover{background:#7c7c7c}::-webkit-scrollbar-track{background:var(--ov-light-color);border-radius:4px}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: PanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-panel', changeDetection: ChangeDetectionStrategy.OnPush, template: "<!-- CHAT panel -->\n<ng-container *ngIf=\"isChatPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"chatPanelTemplate\"></ng-container>\n</ng-container>\n\n\n<!-- PARTICIPANTS panel -->\n<ng-container *ngIf=\"isParticipantsPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"participantsPanelTemplate\"></ng-container>\n</ng-container>\n\n<!-- Background effects panel -->\n<ng-container *ngIf=\"isBackgroundEffectsPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"backgroundEffectsPanelTemplate\"></ng-container>\n</ng-container>\n\n<!-- Settings panel -->\n<ng-container *ngIf=\"isSettingsPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"settingsPanelTemplate\"></ng-container>\n</ng-container>\n\n<!-- Activities panel -->\n<ng-container *ngIf=\"isActivitiesPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"activitiesPanelTemplate\"></ng-container>\n</ng-container>\n\n<!-- External additional panels  -->\n<ng-container *ngIf=\"additionalPanelsTemplate && isExternalPanelOpened\">\n\t<ng-container *ngTemplateOutlet=\"additionalPanelsTemplate\"></ng-container>\n</ng-container>\n", styles: [".panel-container{margin:20px;background-color:var(--ov-panel-background);border-radius:var(--ov-panel-radius);max-height:calc(100% - 40px);min-height:calc(100% - 40px)}.panel-header-container{padding:10px;display:flex}.panel-title{margin-left:5px;margin-top:auto;margin-bottom:auto}.panel-close-button{margin-left:auto;border-radius:var(--ov-buttons-radius)}::-webkit-scrollbar{width:8px}::-webkit-scrollbar-thumb{background:#a7a7a7;border-radius:4px}::-webkit-scrollbar-thumb:hover{background:#7c7c7c}::-webkit-scrollbar-track{background:var(--ov-light-color);border-radius:4px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.PanelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { participantsPanelTemplate: [{
                type: ContentChild,
                args: ['participantsPanel', { read: TemplateRef }]
            }], backgroundEffectsPanelTemplate: [{
                type: ContentChild,
                args: ['backgroundEffectsPanel', { read: TemplateRef }]
            }], settingsPanelTemplate: [{
                type: ContentChild,
                args: ['settingsPanel', { read: TemplateRef }]
            }], activitiesPanelTemplate: [{
                type: ContentChild,
                args: ['activitiesPanel', { read: TemplateRef }]
            }], chatPanelTemplate: [{
                type: ContentChild,
                args: ['chatPanel', { read: TemplateRef }]
            }], additionalPanelsTemplate: [{
                type: ContentChild,
                args: ['additionalPanels', { read: TemplateRef }]
            }], externalParticipantPanel: [{
                type: ContentChild,
                args: [ParticipantsPanelDirective]
            }], externalActivitiesPanel: [{
                type: ContentChild,
                args: [ActivitiesPanelDirective]
            }], externalChatPanel: [{
                type: ContentChild,
                args: [ChatPanelDirective]
            }], externalAdditionalPanels: [{
                type: ContentChild,
                args: [AdditionalPanelsDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,