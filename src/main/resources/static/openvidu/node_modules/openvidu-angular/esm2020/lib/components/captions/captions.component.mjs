import { ChangeDetectionStrategy, Component, ViewChildren } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { PanelSettingsOptions, PanelType } from '../../models/panel.model';
import * as i0 from "@angular/core";
import * as i1 from "../../services/panel/panel.service";
import * as i2 from "../../services/openvidu/openvidu.service";
import * as i3 from "../../services/participant/participant.service";
import * as i4 from "../../services/caption/caption.service";
import * as i5 from "@angular/common";
import * as i6 from "@angular/material/button";
import * as i7 from "@angular/material/icon";
import * as i8 from "@angular/flex-layout/extended";
/**
 * @internal
 */
export class CaptionsComponent {
    constructor(panelService, openviduService, participantService, captionService, cd) {
        this.panelService = panelService;
        this.openviduService = openviduService;
        this.participantService = participantService;
        this.captionService = captionService;
        this.cd = cd;
        this.captionEvents = [];
        this.DELETE_TIMEOUT = 10 * 1000;
        this.MAX_EVENTS_LIMIT = 3;
    }
    set captionEventRef(captionEventsRef) {
        setTimeout(() => {
            if (captionEventsRef) {
                this.scrollContainer = captionEventsRef;
            }
        }, 0);
    }
    async ngOnInit() {
        this.captionService.setCaptionsEnabled(true);
        this.captionLangSelected = this.captionService.getLangSelected();
        this.session = this.openviduService.getWebcamSession();
        for (const p of this.participantService.getRemoteParticipants()) {
            const stream = p.getCameraConnection().streamManager.stream;
            await this.session.subscribeToSpeechToText(stream, this.captionLangSelected.ISO);
        }
        this.subscribeToCaptionLanguage();
        this.subscribeToPanelToggling();
        this.subscribeToTranscription();
    }
    async ngOnDestroy() {
        this.captionService.setCaptionsEnabled(false);
        if (this.screenSizeSub)
            this.screenSizeSub.unsubscribe();
        if (this.panelTogglingSubscription)
            this.panelTogglingSubscription.unsubscribe();
        this.session.off('speechToTextMessage');
        this.captionEvents = [];
        for (const p of this.participantService.getRemoteParticipants()) {
            const stream = p.getCameraConnection().streamManager.stream;
            await this.session.unsubscribeFromSpeechToText(stream);
        }
    }
    onSettingsCliked() {
        this.panelService.togglePanel(PanelType.SETTINGS, PanelSettingsOptions.CAPTIONS);
    }
    subscribeToTranscription() {
        this.session.on('speechToTextMessage', (event) => {
            clearInterval(this.deleteAllTimeout);
            const { connectionId, data } = event.connection;
            const nickname = this.participantService.getNicknameFromConnectionData(data);
            const color = this.participantService.getRemoteParticipantByConnectionId(connectionId)?.colorProfile || '';
            const caption = {
                connectionId,
                nickname,
                color,
                text: event.text,
                type: event.reason
            };
            this.updateCaption(caption);
            // Delete all events when there are no more events for a period of time
            this.deleteAllEventsAfterDelay(this.DELETE_TIMEOUT);
            this.cd.markForCheck();
        });
    }
    updateCaption(caption) {
        let captionEventsCopy = [...this.captionEvents];
        let eventsNumber = captionEventsCopy.length;
        if (eventsNumber === 0) {
            captionEventsCopy.push(caption);
        }
        else {
            const lastCaption = captionEventsCopy[eventsNumber - 1];
            const sameSpeakerAsAbove = lastCaption.connectionId === caption.connectionId;
            const lastSpeakerHasStoppedTalking = lastCaption.type === 'recognized';
            if (sameSpeakerAsAbove) {
                if (lastSpeakerHasStoppedTalking) {
                    // Add event if different from previous one
                    if (caption.text !== lastCaption.text) {
                        this.deleteFirstEventAfterDelay(this.DELETE_TIMEOUT);
                        captionEventsCopy.push(caption);
                    }
                }
                else {
                    //Updating last 'recognizing' caption
                    lastCaption.text = caption.text;
                    lastCaption.type = caption.type;
                }
            }
            else {
                // Different speaker is talking
                const speakerExists = captionEventsCopy.some((ev) => ev.connectionId === caption.connectionId);
                if (speakerExists) {
                    // Speaker is already showing
                    if (lastSpeakerHasStoppedTalking) {
                        this.deleteFirstEventAfterDelay(this.DELETE_TIMEOUT);
                        captionEventsCopy.push(caption);
                    }
                    else {
                        // There was an interruption. Last event is still being 'recognizing' (speaker is talking)
                        // Update last speaker event.
                        const lastSpeakerCaption = captionEventsCopy.find((cap) => cap.connectionId === caption.connectionId);
                        if (lastSpeakerCaption) {
                            if (lastSpeakerCaption.type === 'recognized') {
                                captionEventsCopy.push(caption);
                            }
                            else {
                                lastSpeakerCaption.text = caption.text;
                                lastSpeakerCaption.type = caption.type;
                            }
                        }
                    }
                }
                else {
                    this.deleteFirstEventAfterDelay(this.DELETE_TIMEOUT);
                    captionEventsCopy.push(caption);
                }
            }
        }
        if (captionEventsCopy.length === this.MAX_EVENTS_LIMIT) {
            clearInterval(this.deleteFirstTimeout);
            captionEventsCopy.shift();
        }
        this.captionEvents = [...captionEventsCopy];
        this.scrollToBottom();
    }
    deleteFirstEventAfterDelay(timeout) {
        this.deleteFirstTimeout = setTimeout(() => {
            this.captionEvents.shift();
            this.cd.markForCheck();
        }, timeout);
    }
    deleteAllEventsAfterDelay(timeout) {
        this.deleteAllTimeout = setTimeout(() => {
            this.captionEvents = [];
            this.cd.markForCheck();
        }, timeout);
    }
    subscribeToCaptionLanguage() {
        this.captionLanguageSubscription = this.captionService.captionLangObs.subscribe((lang) => {
            this.captionLangSelected = lang;
            this.cd.markForCheck();
        });
    }
    subscribeToPanelToggling() {
        this.panelTogglingSubscription = this.panelService.panelOpenedObs.subscribe((ev) => {
            this.settingsPanelOpened = ev.opened;
            setTimeout(() => this.cd.markForCheck(), 300);
        });
    }
    scrollToBottom() {
        setTimeout(() => {
            try {
                this.scrollContainer.forEach((el, index) => {
                    el.nativeElement.scroll({
                        top: this.scrollContainer.get(index)?.nativeElement.scrollHeight,
                        left: 0
                        // behavior: 'smooth'
                    });
                });
            }
            catch (err) { }
        }, 20);
    }
}
CaptionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: CaptionsComponent, deps: [{ token: i1.PanelService }, { token: i2.OpenViduService }, { token: i3.ParticipantService }, { token: i4.CaptionService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
CaptionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: CaptionsComponent, selector: "ov-captions", viewQueries: [{ propertyName: "captionEventRef", predicate: ["captionEventElement"], descendants: true }], ngImport: i0, template: "<div class=\"captions-container\" #captionsContainer>\n\t<div\n\t\t*ngIf=\"captionsContainer.offsetWidth >= 600 && !settingsPanelOpened\"\n\t\tclass=\"captions-offset\"\n\t\t[ngClass]=\"{ 'captions-offset': captionsContainer.offsetWidth >= 1000 }\"\n\t>\n\t\t<button (click)=\"onSettingsCliked()\" id=\"caption-settings-btn\" mat-flat-button>\n\t\t\t<mat-icon id=\"subtitle-settings-icon\">settings</mat-icon>\n\t\t\t<span>{{ captionLangSelected.name }}</span>\n\t\t</button>\n\t</div>\n\t<div\n\t\tclass=\"captions-center-container\"\n\t\t[ngClass]=\"{\n\t\t\t'events-one': captionEvents.length === 1,\n\t\t\t'events-two': captionEvents.length === 2,\n\t\t\t'events-three': captionEvents.length === 3,\n\t\t\t'screen-xl': captionsContainer.offsetWidth >= 1000,\n\t\t\t'screen-md': captionsContainer.offsetWidth >= 960 && captionsContainer.offsetWidth < 1000,\n\t\t\t'screen-sm': captionsContainer.offsetWidth >= 600 && captionsContainer.offsetWidth < 960,\n\t\t\t'screen-xs': captionsContainer.offsetWidth < 600\n\t\t}\"\n\t>\n\t\t<div class=\"element\" *ngFor=\"let caption of captionEvents; let i = index\" @captionAnimation>\n\t\t\t<p id=\"speaker\" [ngStyle]=\"{ color: caption.color }\">\n\t\t\t\t{{ caption.nickname }}\n\t\t\t</p>\n\t\t\t<div\n\t\t\t\tid=\"caption-event\"\n\t\t\t\tclass=\"caption-event\"\n\t\t\t\t[ngClass]=\"{ 'going-to-disappear': i === 0 && captionEvents.length === MAX_EVENTS_LIMIT }\"\n\t\t\t\t#captionEventElement\n\t\t\t>\n\t\t\t\t<span id=\"caption-text\" class=\"caption-text\">{{ caption.text }}</span>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<div *ngIf=\"captionsContainer.offsetWidth >= 600 && !settingsPanelOpened\" class=\"captions-offset\"></div>\n</div>\n", styles: [".captions-container{display:flex;height:var(--ov-captions-height, 230px);margin:0 10px}.captions-offset{height:var(--ov-captions-height, 230px);width:15%;text-align:center}.captions-offset-xl{width:25%!important}.captions-center-container{flex-grow:1;align-self:center;max-height:var(--ov-captions-height, 230px);width:70%;overflow:hidden;height:var(--ov-captions-height, 230px);padding:0px 10vw}.captions-center-container.screen-xl{padding:0px 14vw}.captions-center-container.screen-xl .caption-event>span{font-size:22px}.captions-center-container.screen-xl #speaker{font-size:16px}.captions-center-container.screen-xl.events-one .caption-event{max-height:140px}.captions-center-container.screen-xl.events-two .caption-event{max-height:69px}.captions-center-container.screen-xl.events-three .caption-event{max-height:35px}.captions-center-container.screen-md .caption-event>span{font-size:20px}.captions-center-container.screen-md #speaker{font-size:14px}.captions-center-container.screen-md.events-one .caption-event{max-height:140px}.captions-center-container.screen-md.events-two .caption-event{max-height:69px}.captions-center-container.screen-md.events-three .caption-event{max-height:35px}.captions-center-container.screen-sm{padding:0px 2vw}.captions-center-container.screen-sm .caption-event>span{font-size:20px}.captions-center-container.screen-sm #speaker{font-size:12px}.captions-center-container.screen-sm.events-one .caption-event{max-height:127px}.captions-center-container.screen-sm.events-two .caption-event{max-height:64px}.captions-center-container.screen-sm.events-three .caption-event{max-height:33px}.captions-center-container.screen-xs{padding:0px 2vw}.captions-center-container.screen-xs .caption-event>span{font-size:20px}.captions-center-container.screen-xs #speaker{font-size:12px}.captions-center-container.screen-xs.events-one .caption-event{max-height:130px}.captions-center-container.screen-xs.events-two .caption-event{max-height:69px}.captions-center-container.screen-xs.events-three .caption-event{max-height:35px}.captions-center-container .going-to-disappear{max-height:30px!important}#caption-settings-btn{color:var(--ov-text-color);background-color:var(--ov-secondary-color)}#caption-settings-icon{font-size:15px;height:15px;width:15px;padding-right:5px}#speaker{margin-bottom:2px;font-weight:700;margin-left:-5px;width:fit-content}.captions-center-container .element{margin:8px 0}.caption-event{overflow:auto;pointer-events:none}.caption-text,#speaker{color:var(--ov-text-color);font-family:Roboto,arial,sans-serif}.caption-text{background-color:var(--ov-logo-background-color);padding:4.5px;line-height:1.6;word-break:break-word}::-webkit-scrollbar{display:none}\n"], dependencies: [{ kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: i6.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i7.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i8.DefaultClassDirective, selector: "  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]", inputs: ["ngClass", "ngClass.xs", "ngClass.sm", "ngClass.md", "ngClass.lg", "ngClass.xl", "ngClass.lt-sm", "ngClass.lt-md", "ngClass.lt-lg", "ngClass.lt-xl", "ngClass.gt-xs", "ngClass.gt-sm", "ngClass.gt-md", "ngClass.gt-lg"] }, { kind: "directive", type: i8.DefaultStyleDirective, selector: "  [ngStyle],  [ngStyle.xs], [ngStyle.sm], [ngStyle.md], [ngStyle.lg], [ngStyle.xl],  [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],  [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]", inputs: ["ngStyle", "ngStyle.xs", "ngStyle.sm", "ngStyle.md", "ngStyle.lg", "ngStyle.xl", "ngStyle.lt-sm", "ngStyle.lt-md", "ngStyle.lt-lg", "ngStyle.lt-xl", "ngStyle.gt-xs", "ngStyle.gt-sm", "ngStyle.gt-md", "ngStyle.gt-lg"] }], animations: [
        trigger('captionAnimation', [
            transition(':enter', [style({ opacity: 0 }), animate('50ms ease-in', style({ opacity: 1 }))])
            // transition(':leave', [style({ opacity: 1 }), animate('10ms ease-out', style({ opacity: 0 }))])
        ])
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: CaptionsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-captions', animations: [
                        trigger('captionAnimation', [
                            transition(':enter', [style({ opacity: 0 }), animate('50ms ease-in', style({ opacity: 1 }))])
                            // transition(':leave', [style({ opacity: 1 }), animate('10ms ease-out', style({ opacity: 0 }))])
                        ])
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"captions-container\" #captionsContainer>\n\t<div\n\t\t*ngIf=\"captionsContainer.offsetWidth >= 600 && !settingsPanelOpened\"\n\t\tclass=\"captions-offset\"\n\t\t[ngClass]=\"{ 'captions-offset': captionsContainer.offsetWidth >= 1000 }\"\n\t>\n\t\t<button (click)=\"onSettingsCliked()\" id=\"caption-settings-btn\" mat-flat-button>\n\t\t\t<mat-icon id=\"subtitle-settings-icon\">settings</mat-icon>\n\t\t\t<span>{{ captionLangSelected.name }}</span>\n\t\t</button>\n\t</div>\n\t<div\n\t\tclass=\"captions-center-container\"\n\t\t[ngClass]=\"{\n\t\t\t'events-one': captionEvents.length === 1,\n\t\t\t'events-two': captionEvents.length === 2,\n\t\t\t'events-three': captionEvents.length === 3,\n\t\t\t'screen-xl': captionsContainer.offsetWidth >= 1000,\n\t\t\t'screen-md': captionsContainer.offsetWidth >= 960 && captionsContainer.offsetWidth < 1000,\n\t\t\t'screen-sm': captionsContainer.offsetWidth >= 600 && captionsContainer.offsetWidth < 960,\n\t\t\t'screen-xs': captionsContainer.offsetWidth < 600\n\t\t}\"\n\t>\n\t\t<div class=\"element\" *ngFor=\"let caption of captionEvents; let i = index\" @captionAnimation>\n\t\t\t<p id=\"speaker\" [ngStyle]=\"{ color: caption.color }\">\n\t\t\t\t{{ caption.nickname }}\n\t\t\t</p>\n\t\t\t<div\n\t\t\t\tid=\"caption-event\"\n\t\t\t\tclass=\"caption-event\"\n\t\t\t\t[ngClass]=\"{ 'going-to-disappear': i === 0 && captionEvents.length === MAX_EVENTS_LIMIT }\"\n\t\t\t\t#captionEventElement\n\t\t\t>\n\t\t\t\t<span id=\"caption-text\" class=\"caption-text\">{{ caption.text }}</span>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<div *ngIf=\"captionsContainer.offsetWidth >= 600 && !settingsPanelOpened\" class=\"captions-offset\"></div>\n</div>\n", styles: [".captions-container{display:flex;height:var(--ov-captions-height, 230px);margin:0 10px}.captions-offset{height:var(--ov-captions-height, 230px);width:15%;text-align:center}.captions-offset-xl{width:25%!important}.captions-center-container{flex-grow:1;align-self:center;max-height:var(--ov-captions-height, 230px);width:70%;overflow:hidden;height:var(--ov-captions-height, 230px);padding:0px 10vw}.captions-center-container.screen-xl{padding:0px 14vw}.captions-center-container.screen-xl .caption-event>span{font-size:22px}.captions-center-container.screen-xl #speaker{font-size:16px}.captions-center-container.screen-xl.events-one .caption-event{max-height:140px}.captions-center-container.screen-xl.events-two .caption-event{max-height:69px}.captions-center-container.screen-xl.events-three .caption-event{max-height:35px}.captions-center-container.screen-md .caption-event>span{font-size:20px}.captions-center-container.screen-md #speaker{font-size:14px}.captions-center-container.screen-md.events-one .caption-event{max-height:140px}.captions-center-container.screen-md.events-two .caption-event{max-height:69px}.captions-center-container.screen-md.events-three .caption-event{max-height:35px}.captions-center-container.screen-sm{padding:0px 2vw}.captions-center-container.screen-sm .caption-event>span{font-size:20px}.captions-center-container.screen-sm #speaker{font-size:12px}.captions-center-container.screen-sm.events-one .caption-event{max-height:127px}.captions-center-container.screen-sm.events-two .caption-event{max-height:64px}.captions-center-container.screen-sm.events-three .caption-event{max-height:33px}.captions-center-container.screen-xs{padding:0px 2vw}.captions-center-container.screen-xs .caption-event>span{font-size:20px}.captions-center-container.screen-xs #speaker{font-size:12px}.captions-center-container.screen-xs.events-one .caption-event{max-height:130px}.captions-center-container.screen-xs.events-two .caption-event{max-height:69px}.captions-center-container.screen-xs.events-three .caption-event{max-height:35px}.captions-center-container .going-to-disappear{max-height:30px!important}#caption-settings-btn{color:var(--ov-text-color);background-color:var(--ov-secondary-color)}#caption-settings-icon{font-size:15px;height:15px;width:15px;padding-right:5px}#speaker{margin-bottom:2px;font-weight:700;margin-left:-5px;width:fit-content}.captions-center-container .element{margin:8px 0}.caption-event{overflow:auto;pointer-events:none}.caption-text,#speaker{color:var(--ov-text-color);font-family:Roboto,arial,sans-serif}.caption-text{background-color:var(--ov-logo-background-color);padding:4.5px;line-height:1.6;word-break:break-word}::-webkit-scrollbar{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.PanelService }, { type: i2.OpenViduService }, { type: i3.ParticipantService }, { type: i4.CaptionService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { captionEventRef: [{
                type: ViewChildren,
                args: ['captionEventElement']
            }] } });
//# sourceMappingURL=data:application/json;base64,