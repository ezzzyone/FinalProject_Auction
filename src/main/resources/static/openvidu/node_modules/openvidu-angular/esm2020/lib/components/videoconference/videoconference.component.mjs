import { animate, style, transition, trigger } from '@angular/animations';
import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { OpenViduErrorName } from 'openvidu-browser';
import { ActivitiesPanelDirective, AdditionalPanelsDirective, ChatPanelDirective, LayoutDirective, PanelDirective, ParticipantPanelItemDirective, ParticipantPanelItemElementsDirective, ParticipantsPanelDirective, StreamDirective, ToolbarAdditionalButtonsDirective, ToolbarAdditionalPanelButtonsDirective, ToolbarDirective } from '../../directives/template/openvidu-angular.directive';
import { OpenViduEdition } from '../../models/openvidu.model';
import * as i0 from "@angular/core";
import * as i1 from "../../services/logger/logger.service";
import * as i2 from "../../services/storage/storage.service";
import * as i3 from "../../services/participant/participant.service";
import * as i4 from "../../services/device/device.service";
import * as i5 from "../../services/openvidu/openvidu.service";
import * as i6 from "../../services/action/action.service";
import * as i7 from "../../services/config/openvidu-angular.config.service";
import * as i8 from "../../services/translate/translate.service";
import * as i9 from "@angular/common";
import * as i10 from "@angular/material/icon";
import * as i11 from "@angular/material/progress-spinner";
import * as i12 from "../toolbar/toolbar.component";
import * as i13 from "../panel/panel.component";
import * as i14 from "../panel/activities-panel/activities-panel.component";
import * as i15 from "../panel/participants-panel/participants-panel/participants-panel.component";
import * as i16 from "../panel/participants-panel/participant-panel-item/participant-panel-item.component";
import * as i17 from "../panel/chat-panel/chat-panel.component";
import * as i18 from "../stream/stream.component";
import * as i19 from "../layout/layout.component";
import * as i20 from "../pre-join/pre-join.component";
import * as i21 from "../session/session.component";
import * as i22 from "../panel/background-effects-panel/background-effects-panel.component";
import * as i23 from "../panel/settings-panel/settings-panel.component";
import * as i24 from "../../pipes/translate.pipe";
/**
 * The **VideoconferenceComponent** is the parent of all OpenVidu components.
 * It allow us to create a modern, useful and powerful videoconference apps with ease.
 *
 * <div class="custom-table-container">
 * <div>
 *  <h3>API Directives</h3>
 *
 * This component allows us to show or hide certain HTML elements with the following {@link https://angular.io/guide/attribute-directives Angular attribute directives}
 * with the aim of fully customizing the videoconference application.
 *
 * | **Parameter**                  | **Type**  | **Reference**                                   |
 * | :----------------------------: | :-------: | :---------------------------------------------: |
 * | **minimal**                        | `boolean` | {@link MinimalDirective}                        |
 * | **lang**                           | `string`  | {@link LangDirective}                           |
 * | **captionsLang**                   | `string`  | {@link CaptionsLangDirective}                   |
 * | **prejoin**                        | `boolean` | {@link PrejoinDirective}                        |
 * | **participantName**                | `string`  | {@link ParticipantNameDirective}                |
 * | **videoMuted**                     | `boolean` | {@link VideoMutedDirective}                     |
 * | **audioMuted**                     | `boolean` | {@link AudioMutedDirective}                     |
 * | **toolbarScreenshareButton**       | `boolean` | {@link ToolbarScreenshareButtonDirective}       |
 * | **toolbarFullscreenButton**        | `boolean` | {@link ToolbarFullscreenButtonDirective}        |
 * | **toolbarCaptionsButton** 			| `boolean` | {@link ToolbarCaptionsButtonDirective} 		  |
 * | **toolbarBackgroundEffectsButton** | `boolean` | {@link ToolbarBackgroundEffectsButtonDirective} |
 * | **toolbarLeaveButton**             | `boolean` | {@link ToolbarLeaveButtonDirective}             |
 * | **toolbarChatPanelButton**         | `boolean` | {@link ToolbarChatPanelButtonDirective}         |
 * | **toolbarParticipantsPanelButton** | `boolean` | {@link ToolbarParticipantsPanelButtonDirective} |
 * | **toolbarDisplayLogo**             | `boolean` | {@link ToolbarDisplayLogoDirective}             |
 * | **toolbarDisplaySessionName**      | `boolean` | {@link ToolbarDisplaySessionNameDirective}      |
 * | **streamDisplayParticipantName**   | `boolean` | {@link StreamDisplayParticipantNameDirective}   |
 * | **streamDisplayAudioDetection**    | `boolean` | {@link StreamDisplayAudioDetectionDirective}    |
 * | **streamSettingsButton**           | `boolean` | {@link StreamSettingsButtonDirective}           |
 * | **participantPanelItemMuteButton** | `boolean` | {@link ParticipantPanelItemMuteButtonDirective} |
 * | **recordingActivityRecordingList** | `{@link RecordingInfo}[]` | {@link RecordingActivityRecordingsListDirective} |
 * | **recordingActivityRecordingError** | `any` | {@link RecordingActivityRecordingErrorDirective} |
 *
 * <p class="component-link-text">
 * <span class="italic">See all {@link ApiDirectiveModule API Directives}</span>
 * </p>
 * </div>
 *
 * <div>
 *
 * <h3>OpenVidu Angular Directives</h3>
 *
 *
 * The VideoconferenceComponent is also providing us a way to **replace the default templates** with a custom one.
 * It will recognise the following {@link https://angular.io/guide/structural-directives Angular structural directives}
 * in the elements added as children.
 *
 * |             **Directive**           |                 **Reference**                 |
 * |:-----------------------------------:|:---------------------------------------------:|
 * |            ***ovToolbar**           |            {@link ToolbarDirective}           |
 * |   ***ovToolbarAdditionalButtons**   |   {@link ToolbarAdditionalButtonsDirective}   |
 * |***ovToolbarAdditionalPanelButtons**   |   {@link ToolbarAdditionalPanelButtonsDirective}   |
 * |             ***ovPanel**            |             {@link PanelDirective}            |
 * |        ***ovAdditionalPanels**      |       {@link AdditionalPanelsDirective}       |
 * |           ***ovChatPanel**          |           {@link ChatPanelDirective}          |
 * |       ***ovParticipantsPanel**      |       {@link ParticipantsPanelDirective}      |
 * |     ***ovParticipantPanelItem**     |     {@link ParticipantPanelItemDirective}     |
 * | ***ovParticipantPanelItemElements** | {@link ParticipantPanelItemElementsDirective} |
 * |            ***ovLayout**            |            {@link LayoutDirective}            |
 * |            ***ovStream**            |            {@link StreamDirective}            |
 *
 * <p class="component-link-text">
 * 	<span class="italic">See all {@link OpenViduAngularDirectiveModule OpenVidu Angular Directives}</span>
 * </p>
 * </div>
 * </div>
 */
export class VideoconferenceComponent {
    /**
     * @internal
     */
    constructor(loggerSrv, storageSrv, participantService, deviceSrv, openviduService, actionService, libService, translateService) {
        this.loggerSrv = loggerSrv;
        this.storageSrv = storageSrv;
        this.participantService = participantService;
        this.deviceSrv = deviceSrv;
        this.openviduService = openviduService;
        this.actionService = actionService;
        this.libService = libService;
        this.translateService = translateService;
        /**
         * Provides event notifications that fire when join button (in prejoin page) has been clicked.
         */
        this.onJoinButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when leave button has been clicked.
         */
        this.onToolbarLeaveButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when camera toolbar button has been clicked.
         */
        this.onToolbarCameraButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when microphone toolbar button has been clicked.
         */
        this.onToolbarMicrophoneButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when screenshare toolbar button has been clicked.
         */
        this.onToolbarScreenshareButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when fullscreen toolbar button has been clicked.
         */
        this.onToolbarFullscreenButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when participants panel button has been clicked.
         */
        this.onToolbarParticipantsPanelButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when chat panel button has been clicked.
         */
        this.onToolbarChatPanelButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when activities panel button has been clicked.
         */
        this.onToolbarActivitiesPanelButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when start recording button is clicked {@link ToolbarComponent}.
         *  The recording should be stopped using the REST API.
         */
        this.onToolbarStartRecordingClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when stop recording button is clicked from {@link ToolbarComponent}.
         *  The recording should be stopped using the REST API.
         */
        this.onToolbarStopRecordingClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when start recording button is clicked {@link ActivitiesPanelComponent}.
         *  The recording should be stopped using the REST API.
         */
        this.onActivitiesPanelStartRecordingClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when stop recording button is clicked from {@link ActivitiesPanelComponent}.
         *  The recording should be stopped using the REST API.
         */
        this.onActivitiesPanelStopRecordingClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when delete recording button is clicked from {@link ActivitiesPanelComponent}.
         *  The recording should be deleted using the REST API.
         */
        this.onActivitiesPanelDeleteRecordingClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when play recording button is clicked from {@link ActivitiesPanelComponent}.
         */
        this.onActivitiesPanelPlayRecordingClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when OpenVidu Session is created.
         * See {@link https://docs.openvidu.io/en/stable/api/openvidu-browser/classes/Session.html openvidu-browser Session}.
         */
        this.onSessionCreated = new EventEmitter();
        /**
         * Provides event notifications that fire when local participant is created.
         */
        this.onParticipantCreated = new EventEmitter();
        /**
         * Provides event notifications that fire in the case of a node crash in your OpenVidu deployment.
         * OpenVidu delegates the recovery of the sessions to the application in the event of a node crash.
         * See {@link https://docs.openvidu.io/en/stable/openvidu-pro/fault-tolerance/ OpenVidu Pro Fault tolerance}.
         */
        this.onNodeCrashed = new EventEmitter();
        /**
         * @internal
         */
        this.showVideoconference = false;
        /**
         * @internal
         */
        this.participantReady = false;
        /**
         * @internal
         */
        this.error = false;
        /**
         * @internal
         */
        this.errorMessage = '';
        /**
         * @internal
         */
        this.showPrejoin = true;
        /**
         * @internal
         */
        this.isSessionInitialized = false;
        /**
         * @internal
         */
        this.loading = true;
        this.nodeCrashed = false;
        this.log = this.loggerSrv.get('VideoconferenceComponent');
    }
    /**
     * @param {TokenModel} tokens  The tokens parameter must be an object with `webcam` and `screen` fields.
     *  Both of them are `string` type. See {@link TokenModel}
     */
    set tokens(tokens) {
        if (!tokens || !tokens.webcam) {
            this.log.w('No tokens received');
        }
        else {
            this.log.w('Tokens received');
            this.openviduService.setWebcamToken(tokens.webcam);
            const openviduEdition = new URL(tokens.webcam).searchParams.get('edition');
            if (!!openviduEdition) {
                this.openviduService.setOpenViduEdition(OpenViduEdition.PRO);
            }
            else {
                this.openviduService.setOpenViduEdition(OpenViduEdition.CE);
            }
            if (tokens.screen) {
                this.openviduService.setScreenToken(tokens.screen);
            }
            else {
                this.log.w('No screen token found. Screenshare feature will be disabled');
            }
            this.start();
        }
    }
    async ngOnInit() {
        this.subscribeToVideconferenceDirectives();
    }
    async ngOnDestroy() {
        if (this.prejoinSub)
            this.prejoinSub.unsubscribe();
        if (this.participantNameSub)
            this.participantNameSub.unsubscribe();
        this.deviceSrv.clear();
        await this.openviduService.clear();
    }
    /**
     * @internal
     */
    ngAfterViewInit() {
        if (this.externalToolbar) {
            this.log.d('Setting EXTERNAL TOOLBAR');
            this.openviduAngularToolbarTemplate = this.externalToolbar.template;
        }
        else {
            this.log.d('Setting  DEFAULT TOOLBAR');
            if (this.externalToolbarAdditionalButtons) {
                this.log.d('Setting EXTERNAL TOOLBAR ADDITIONAL BUTTONS');
                this.openviduAngularToolbarAdditionalButtonsTemplate = this.externalToolbarAdditionalButtons.template;
            }
            if (this.externalToolbarAdditionalPanelButtons) {
                this.log.d('Setting EXTERNAL TOOLBAR ADDITIONAL PANEL BUTTONS');
                this.openviduAngularToolbarAdditionalPanelButtonsTemplate = this.externalToolbarAdditionalPanelButtons.template;
            }
            this.openviduAngularToolbarTemplate = this.defaultToolbarTemplate;
        }
        if (this.externalPanel) {
            this.log.d('Setting EXTERNAL PANEL');
            this.openviduAngularPanelTemplate = this.externalPanel.template;
        }
        else {
            this.log.d('Setting DEFAULT PANEL');
            if (this.externalParticipantsPanel) {
                this.openviduAngularParticipantsPanelTemplate = this.externalParticipantsPanel.template;
                this.log.d('Setting EXTERNAL PARTICIPANTS PANEL');
            }
            else {
                this.log.d('Setting DEFAULT PARTICIPANTS PANEL');
                if (this.externalParticipantPanelItem) {
                    this.log.d('Setting EXTERNAL P ITEM');
                    this.openviduAngularParticipantPanelItemTemplate = this.externalParticipantPanelItem.template;
                }
                else {
                    if (this.externalParticipantPanelItemElements) {
                        this.log.d('Setting EXTERNAL PARTICIPANT PANEL ITEM ELEMENT');
                        this.openviduAngularParticipantPanelItemElementsTemplate = this.externalParticipantPanelItemElements.template;
                    }
                    this.openviduAngularParticipantPanelItemTemplate = this.defaultParticipantPanelItemTemplate;
                    this.log.d('Setting DEFAULT P ITEM');
                }
                this.openviduAngularParticipantsPanelTemplate = this.defaultParticipantsPanelTemplate;
            }
            if (this.externalChatPanel) {
                this.log.d('Setting EXTERNAL CHAT PANEL');
                this.openviduAngularChatPanelTemplate = this.externalChatPanel.template;
            }
            else {
                this.log.d('Setting DEFAULT CHAT PANEL');
                this.openviduAngularChatPanelTemplate = this.defaultChatPanelTemplate;
            }
            if (this.externalActivitiesPanel) {
                this.log.d('Setting EXTERNAL ACTIVITIES PANEL');
                this.openviduAngularActivitiesPanelTemplate = this.externalActivitiesPanel.template;
            }
            else {
                this.log.d('Setting DEFAULT ACTIVITIES PANEL');
                this.openviduAngularActivitiesPanelTemplate = this.defaultActivitiesPanelTemplate;
            }
            if (this.externalAdditionalPanels) {
                this.log.d('Setting EXTERNAL ADDITIONAL PANELS');
                this.openviduAngularAdditionalPanelsTemplate = this.externalAdditionalPanels.template;
            }
            this.openviduAngularPanelTemplate = this.defaultPanelTemplate;
        }
        if (this.externalLayout) {
            this.log.d('Setting EXTERNAL LAYOUT');
            this.openviduAngularLayoutTemplate = this.externalLayout.template;
        }
        else {
            this.log.d('Setting DEAFULT LAYOUT');
            if (this.externalStream) {
                this.log.d('Setting EXTERNAL STREAM');
                this.openviduAngularStreamTemplate = this.externalStream.template;
            }
            else {
                this.log.d('Setting DEFAULT STREAM');
                this.openviduAngularStreamTemplate = this.defaultStreamTemplate;
            }
            this.openviduAngularLayoutTemplate = this.defaultLayoutTemplate;
        }
    }
    async start() {
        await this.deviceSrv.forceInitDevices();
        const nickname = this.externalParticipantName || this.storageSrv.getNickname() || `OpenVidu_User${Math.floor(Math.random() * 100)}`;
        this.participantService.initLocalParticipant({ local: true, nickname });
        this.openviduService.initialize();
        if (this.deviceSrv.hasVideoDeviceAvailable() || this.deviceSrv.hasAudioDeviceAvailable()) {
            await this.initwebcamPublisher();
        }
        this.isSessionInitialized = true;
        this.onParticipantCreated.emit(this.participantService.getLocalParticipant());
        this.loading = false;
        this.participantReady = true;
        if (this.nodeCrashed) {
            this.nodeCrashed = false;
            this.actionService.closeDialog();
        }
    }
    async initwebcamPublisher() {
        return new Promise(async (resolve, reject) => {
            try {
                const publisher = await this.openviduService.initDefaultPublisher();
                if (publisher) {
                    publisher.once('accessDenied', async (e) => {
                        await this.handlePublisherError(e);
                        resolve();
                    });
                    publisher.once('accessAllowed', () => resolve());
                }
            }
            catch (error) {
                this.actionService.openDialog(error.name.replace(/_/g, ' '), error.message, true);
                this.log.e(error);
                reject();
            }
        });
    }
    /**
     * @internal
     */
    _onJoinButtonClicked() {
        this.showVideoconference = true;
        this.showPrejoin = false;
        this.onJoinButtonClicked.emit();
    }
    /**
     * @internal
     */
    onLeaveButtonClicked() {
        this.showVideoconference = false;
        this.participantReady = false;
        this.onToolbarLeaveButtonClicked.emit();
    }
    /**
     * @internal
     */
    onCameraButtonClicked() {
        this.onToolbarCameraButtonClicked.emit();
    }
    /**
     * @internal
     */
    onMicrophoneButtonClicked() {
        this.onToolbarMicrophoneButtonClicked.emit();
    }
    /**
     * @internal
     */
    onScreenshareButtonClicked() {
        this.onToolbarScreenshareButtonClicked.emit();
    }
    /**
     * @internal
     */
    onFullscreenButtonClicked() {
        this.onToolbarFullscreenButtonClicked.emit();
    }
    /**
     * @internal
     */
    onParticipantsPanelButtonClicked() {
        this.onToolbarParticipantsPanelButtonClicked.emit();
    }
    /**
     * @internal
     */
    onChatPanelButtonClicked() {
        this.onToolbarChatPanelButtonClicked.emit();
    }
    /**
     * @internal
     */
    onActivitiesPanelButtonClicked() {
        this.onToolbarActivitiesPanelButtonClicked.emit();
    }
    /**
     * @internal
     */
    onStartRecordingClicked(from) {
        if (from === 'toolbar') {
            this.onToolbarStartRecordingClicked.emit();
        }
        else if (from === 'panel') {
            this.onActivitiesPanelStartRecordingClicked.emit();
        }
    }
    /**
     * @internal
     */
    onStopRecordingClicked(from) {
        if (from === 'toolbar') {
            this.onToolbarStopRecordingClicked.emit();
        }
        else if (from === 'panel') {
            this.onActivitiesPanelStopRecordingClicked.emit();
        }
    }
    /**
     * @internal
     */
    onDeleteRecordingClicked(recordingId) {
        this.onActivitiesPanelDeleteRecordingClicked.emit(recordingId);
    }
    /**
     * @internal
     */
    _onSessionCreated(session) {
        this.onSessionCreated.emit(session);
    }
    /**
     * @internal
     */
    _onNodeCrashed() {
        this.nodeCrashed = true;
        this.onNodeCrashed.emit();
    }
    async handlePublisherError(e) {
        let message = '';
        if (e.name === OpenViduErrorName.DEVICE_ALREADY_IN_USE) {
            this.log.w('Video device already in use. Disabling video device...');
            // Disabling video device
            // Allow access to the room with only mic
            this.deviceSrv.disableVideoDevices();
            return await this.initwebcamPublisher();
        }
        if (e.name === OpenViduErrorName.NO_INPUT_SOURCE_SET) {
            message = this.translateService.translate('ERRORS.DEVICE_NOT_FOUND');
        }
        this.actionService.openDialog(e.name.replace(/_/g, ' '), message, true);
        this.log.e(e.message);
    }
    subscribeToVideconferenceDirectives() {
        this.prejoinSub = this.libService.prejoin.subscribe((value) => {
            this.showPrejoin = value;
            // this.cd.markForCheck();
        });
        this.participantNameSub = this.libService.participantName.subscribe((nickname) => {
            this.externalParticipantName = nickname;
        });
    }
}
VideoconferenceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: VideoconferenceComponent, deps: [{ token: i1.LoggerService }, { token: i2.StorageService }, { token: i3.ParticipantService }, { token: i4.DeviceService }, { token: i5.OpenViduService }, { token: i6.ActionService }, { token: i7.OpenViduAngularConfigService }, { token: i8.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
VideoconferenceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: VideoconferenceComponent, selector: "ov-videoconference", inputs: { tokens: "tokens" }, outputs: { onJoinButtonClicked: "onJoinButtonClicked", onToolbarLeaveButtonClicked: "onToolbarLeaveButtonClicked", onToolbarCameraButtonClicked: "onToolbarCameraButtonClicked", onToolbarMicrophoneButtonClicked: "onToolbarMicrophoneButtonClicked", onToolbarScreenshareButtonClicked: "onToolbarScreenshareButtonClicked", onToolbarFullscreenButtonClicked: "onToolbarFullscreenButtonClicked", onToolbarParticipantsPanelButtonClicked: "onToolbarParticipantsPanelButtonClicked", onToolbarChatPanelButtonClicked: "onToolbarChatPanelButtonClicked", onToolbarActivitiesPanelButtonClicked: "onToolbarActivitiesPanelButtonClicked", onToolbarStartRecordingClicked: "onToolbarStartRecordingClicked", onToolbarStopRecordingClicked: "onToolbarStopRecordingClicked", onActivitiesPanelStartRecordingClicked: "onActivitiesPanelStartRecordingClicked", onActivitiesPanelStopRecordingClicked: "onActivitiesPanelStopRecordingClicked", onActivitiesPanelDeleteRecordingClicked: "onActivitiesPanelDeleteRecordingClicked", onActivitiesPanelPlayRecordingClicked: "onActivitiesPanelPlayRecordingClicked", onSessionCreated: "onSessionCreated", onParticipantCreated: "onParticipantCreated", onNodeCrashed: "onNodeCrashed" }, queries: [{ propertyName: "externalToolbar", first: true, predicate: ToolbarDirective, descendants: true }, { propertyName: "externalToolbarAdditionalButtons", first: true, predicate: ToolbarAdditionalButtonsDirective, descendants: true }, { propertyName: "externalToolbarAdditionalPanelButtons", first: true, predicate: ToolbarAdditionalPanelButtonsDirective, descendants: true }, { propertyName: "externalAdditionalPanels", first: true, predicate: AdditionalPanelsDirective, descendants: true }, { propertyName: "externalPanel", first: true, predicate: PanelDirective, descendants: true }, { propertyName: "externalChatPanel", first: true, predicate: ChatPanelDirective, descendants: true }, { propertyName: "externalActivitiesPanel", first: true, predicate: ActivitiesPanelDirective, descendants: true }, { propertyName: "externalParticipantsPanel", first: true, predicate: ParticipantsPanelDirective, descendants: true }, { propertyName: "externalParticipantPanelItem", first: true, predicate: ParticipantPanelItemDirective, descendants: true }, { propertyName: "externalParticipantPanelItemElements", first: true, predicate: ParticipantPanelItemElementsDirective, descendants: true }, { propertyName: "externalLayout", first: true, predicate: LayoutDirective, descendants: true }, { propertyName: "externalStream", first: true, predicate: StreamDirective, descendants: true }], viewQueries: [{ propertyName: "defaultToolbarTemplate", first: true, predicate: ["defaultToolbar"], descendants: true, read: TemplateRef }, { propertyName: "defaultPanelTemplate", first: true, predicate: ["defaultPanel"], descendants: true, read: TemplateRef }, { propertyName: "defaultChatPanelTemplate", first: true, predicate: ["defaultChatPanel"], descendants: true, read: TemplateRef }, { propertyName: "defaultParticipantsPanelTemplate", first: true, predicate: ["defaultParticipantsPanel"], descendants: true, read: TemplateRef }, { propertyName: "defaultActivitiesPanelTemplate", first: true, predicate: ["defaultActivitiesPanel"], descendants: true, read: TemplateRef }, { propertyName: "defaultParticipantPanelItemTemplate", first: true, predicate: ["defaultParticipantPanelItem"], descendants: true, read: TemplateRef }, { propertyName: "defaultLayoutTemplate", first: true, predicate: ["defaultLayout"], descendants: true, read: TemplateRef }, { propertyName: "defaultStreamTemplate", first: true, predicate: ["defaultStream"], descendants: true, read: TemplateRef }], ngImport: i0, template: "<div id=\"call-container\">\n\n\t<div id=\"spinner\" *ngIf=\"loading\" >\n\t\t<mat-spinner [diameter]=\"50\"></mat-spinner>\n\t\t<span>{{ 'PREJOIN.PREPARING' | translate }}</span>\n\t</div>\n\n\t<div [@inOutAnimation] id=\"pre-join-container\" *ngIf=\"showPrejoin && participantReady && !loading\">\n\t\t<ov-pre-join (onJoinButtonClicked)=\"_onJoinButtonClicked()\"></ov-pre-join>\n\t</div>\n\n\t<div id=\"spinner\" *ngIf=\"!loading && error\">\n\t\t<mat-icon class=\"error-icon\">error</mat-icon>\n\t\t<span>{{ errorMessage }}</span>\n\t</div>\n\n\t<div [@inOutAnimation] id=\"vc-container\" *ngIf=\"showVideoconference || (!showPrejoin && !loading && !error)\">\n\t\t<ov-session  *ngIf=\"isSessionInitialized && !nodeCrashed\" (onSessionCreated)=\"_onSessionCreated($event)\" (onNodeCrashed)=\"_onNodeCrashed()\">\n\t\t\t<ng-template #toolbar>\n\t\t\t\t<ng-container *ngIf=\"openviduAngularToolbarTemplate\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularToolbarTemplate\"></ng-container>\n\t\t\t\t</ng-container>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #panel>\n\t\t\t\t<ng-container *ngIf=\"openviduAngularPanelTemplate\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularPanelTemplate\"></ng-container>\n\t\t\t\t</ng-container>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #layout>\n\t\t\t\t<ng-container *ngIf=\"openviduAngularLayoutTemplate\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularLayoutTemplate\"></ng-container>\n\t\t\t\t</ng-container>\n\t\t\t</ng-template>\n\t\t</ov-session>\n\t</div>\n</div>\n\n<ng-template #defaultToolbar>\n\t<ov-toolbar\n\t\tid=\"default-toolbar\"\n\t\t(onLeaveButtonClicked)=\"onLeaveButtonClicked()\"\n\t\t(onCameraButtonClicked)=\"onCameraButtonClicked()\"\n\t\t(onMicrophoneButtonClicked)=\"onMicrophoneButtonClicked()\"\n\t\t(onScreenshareButtonClicked)=\"onScreenshareButtonClicked()\"\n\t\t(onFullscreenButtonClicked)=\"onFullscreenButtonClicked()\"\n\t\t(onParticipantsPanelButtonClicked)=\"onParticipantsPanelButtonClicked()\"\n\t\t(onChatPanelButtonClicked)=\"onChatPanelButtonClicked()\"\n\t\t(onActivitiesPanelButtonClicked)=\"onActivitiesPanelButtonClicked()\"\n\t\t(onStartRecordingClicked)=\"onStartRecordingClicked('toolbar')\"\n\t\t(onStopRecordingClicked)=\"onStopRecordingClicked('toolbar')\"\n\t>\n\t\t<ng-template #toolbarAdditionalButtons>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularToolbarAdditionalButtonsTemplate\"></ng-container>\n\t\t</ng-template>\n\n\t\t<ng-template #toolbarAdditionalPanelButtons>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularToolbarAdditionalPanelButtonsTemplate\"></ng-container>\n\t\t</ng-template>\n\t</ov-toolbar>\n</ng-template>\n\n<ng-template #defaultPanel>\n\t<ov-panel id=\"default-panel\">\n\t\t<ng-template #chatPanel>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularChatPanelTemplate\"></ng-container>\n\t\t</ng-template>\n\n\t\t<ng-template #participantsPanel>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularParticipantsPanelTemplate\"></ng-container>\n\t\t</ng-template>\n\n\t\t<ng-template #backgroundEffectsPanel>\n\t\t\t<ov-background-effects-panel id=\"default-background-effects-panel\"></ov-background-effects-panel>\n\t\t</ng-template>\n\n\t\t<ng-template #settingsPanel>\n\t\t\t<ov-settings-panel id=\"default-settings-panel\"></ov-settings-panel>\n\t\t</ng-template>\n\n\t\t<ng-template #activitiesPanel>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularActivitiesPanelTemplate\"></ng-container>\n\t\t</ng-template>\n\n\t\t<ng-template #additionalPanels>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularAdditionalPanelsTemplate\"></ng-container>\n\t\t</ng-template>\n\t</ov-panel>\n</ng-template>\n\n<ng-template #defaultChatPanel>\n\t<ov-chat-panel id=\"default-chat-panel\"></ov-chat-panel>\n</ng-template>\n\n<ng-template #defaultActivitiesPanel>\n\t<ov-activities-panel\n\t\tid=\"default-activities-panel\"\n\t\t(onStartRecordingClicked)=\"onStartRecordingClicked('panel')\"\n\t\t(onStopRecordingClicked)=\"onStopRecordingClicked('panel')\"\n\t\t(onDeleteRecordingClicked)=\"onDeleteRecordingClicked($event)\"\n\t></ov-activities-panel>\n</ng-template>\n\n<ng-template #defaultParticipantsPanel>\n\t<ov-participants-panel id=\"default-participants-panel\">\n\t\t<ng-template #participantPanelItem let-participant>\n\t\t\t<ng-container\n\t\t\t\t*ngTemplateOutlet=\"openviduAngularParticipantPanelItemTemplate; context: { $implicit: participant }\"\n\t\t\t></ng-container>\n\t\t</ng-template>\n\t</ov-participants-panel>\n</ng-template>\n\n<ng-template #defaultParticipantPanelItem let-participant>\n\t<ov-participant-panel-item [participant]=\"participant\" id=\"default-participant-panel-item\">\n\t\t<ng-template #participantPanelItemElements>\n\t\t\t<ng-container\n\t\t\t\t*ngTemplateOutlet=\"openviduAngularParticipantPanelItemElementsTemplate; context: { $implicit: participant }\"\n\t\t\t></ng-container>\n\t\t</ng-template>\n\t</ov-participant-panel-item>\n</ng-template>\n\n<ng-template #defaultLayout>\n\t<ov-layout id=\"default-layout\">\n\t\t<ng-template #stream let-stream>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularStreamTemplate; context: { $implicit: stream }\"> </ng-container>\n\t\t</ng-template>\n\t</ov-layout>\n</ng-template>\n\n<ng-template #defaultStream let-stream>\n\t<ov-stream [stream]=\"stream\" id=\"default-stream\"></ov-stream>\n</ng-template>\n", styles: ["#call-container,#vc-container{height:100%}#vc-container{background-color:var(--ov-primary-color)}#pre-join-container{height:inherit}.error-icon{color:var(--ov-warn-color)}#spinner{position:absolute;inset:40% 0 0;margin:auto;text-align:-webkit-center;text-align:-moz-center;color:var(--ov-panel-text-color)}#call-container{--ov-captions-height: 230px}\n"], dependencies: [{ kind: "directive", type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i10.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i11.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "diameter", "strokeWidth", "mode", "value"], exportAs: ["matProgressSpinner"] }, { kind: "component", type: i12.ToolbarComponent, selector: "ov-toolbar", outputs: ["onLeaveButtonClicked", "onCameraButtonClicked", "onMicrophoneButtonClicked", "onFullscreenButtonClicked", "onScreenshareButtonClicked", "onParticipantsPanelButtonClicked", "onChatPanelButtonClicked", "onActivitiesPanelButtonClicked", "onStartRecordingClicked", "onStopRecordingClicked"] }, { kind: "component", type: i13.PanelComponent, selector: "ov-panel" }, { kind: "component", type: i14.ActivitiesPanelComponent, selector: "ov-activities-panel", outputs: ["onStartRecordingClicked", "onStopRecordingClicked", "onDeleteRecordingClicked"] }, { kind: "component", type: i15.ParticipantsPanelComponent, selector: "ov-participants-panel" }, { kind: "component", type: i16.ParticipantPanelItemComponent, selector: "ov-participant-panel-item", inputs: ["participant"] }, { kind: "component", type: i17.ChatPanelComponent, selector: "ov-chat-panel" }, { kind: "component", type: i18.StreamComponent, selector: "ov-stream", inputs: ["stream"] }, { kind: "component", type: i19.LayoutComponent, selector: "ov-layout" }, { kind: "component", type: i20.PreJoinComponent, selector: "ov-pre-join", outputs: ["onJoinButtonClicked"] }, { kind: "component", type: i21.SessionComponent, selector: "ov-session", inputs: ["usedInPrejoinPage"], outputs: ["onSessionCreated", "onNodeCrashed"] }, { kind: "component", type: i22.BackgroundEffectsPanelComponent, selector: "ov-background-effects-panel" }, { kind: "component", type: i23.SettingsPanelComponent, selector: "ov-settings-panel" }, { kind: "pipe", type: i24.TranslatePipe, name: "translate" }], animations: [
        trigger('inOutAnimation', [
            transition(':enter', [style({ opacity: 0 }), animate('300ms ease-out', style({ opacity: 1 }))])
            // transition(':leave', [style({ opacity: 1 }), animate('50ms ease-in', style({ opacity: 0.9 }))])
        ])
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: VideoconferenceComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-videoconference', animations: [
                        trigger('inOutAnimation', [
                            transition(':enter', [style({ opacity: 0 }), animate('300ms ease-out', style({ opacity: 1 }))])
                            // transition(':leave', [style({ opacity: 1 }), animate('50ms ease-in', style({ opacity: 0.9 }))])
                        ])
                    ], template: "<div id=\"call-container\">\n\n\t<div id=\"spinner\" *ngIf=\"loading\" >\n\t\t<mat-spinner [diameter]=\"50\"></mat-spinner>\n\t\t<span>{{ 'PREJOIN.PREPARING' | translate }}</span>\n\t</div>\n\n\t<div [@inOutAnimation] id=\"pre-join-container\" *ngIf=\"showPrejoin && participantReady && !loading\">\n\t\t<ov-pre-join (onJoinButtonClicked)=\"_onJoinButtonClicked()\"></ov-pre-join>\n\t</div>\n\n\t<div id=\"spinner\" *ngIf=\"!loading && error\">\n\t\t<mat-icon class=\"error-icon\">error</mat-icon>\n\t\t<span>{{ errorMessage }}</span>\n\t</div>\n\n\t<div [@inOutAnimation] id=\"vc-container\" *ngIf=\"showVideoconference || (!showPrejoin && !loading && !error)\">\n\t\t<ov-session  *ngIf=\"isSessionInitialized && !nodeCrashed\" (onSessionCreated)=\"_onSessionCreated($event)\" (onNodeCrashed)=\"_onNodeCrashed()\">\n\t\t\t<ng-template #toolbar>\n\t\t\t\t<ng-container *ngIf=\"openviduAngularToolbarTemplate\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularToolbarTemplate\"></ng-container>\n\t\t\t\t</ng-container>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #panel>\n\t\t\t\t<ng-container *ngIf=\"openviduAngularPanelTemplate\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularPanelTemplate\"></ng-container>\n\t\t\t\t</ng-container>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #layout>\n\t\t\t\t<ng-container *ngIf=\"openviduAngularLayoutTemplate\">\n\t\t\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularLayoutTemplate\"></ng-container>\n\t\t\t\t</ng-container>\n\t\t\t</ng-template>\n\t\t</ov-session>\n\t</div>\n</div>\n\n<ng-template #defaultToolbar>\n\t<ov-toolbar\n\t\tid=\"default-toolbar\"\n\t\t(onLeaveButtonClicked)=\"onLeaveButtonClicked()\"\n\t\t(onCameraButtonClicked)=\"onCameraButtonClicked()\"\n\t\t(onMicrophoneButtonClicked)=\"onMicrophoneButtonClicked()\"\n\t\t(onScreenshareButtonClicked)=\"onScreenshareButtonClicked()\"\n\t\t(onFullscreenButtonClicked)=\"onFullscreenButtonClicked()\"\n\t\t(onParticipantsPanelButtonClicked)=\"onParticipantsPanelButtonClicked()\"\n\t\t(onChatPanelButtonClicked)=\"onChatPanelButtonClicked()\"\n\t\t(onActivitiesPanelButtonClicked)=\"onActivitiesPanelButtonClicked()\"\n\t\t(onStartRecordingClicked)=\"onStartRecordingClicked('toolbar')\"\n\t\t(onStopRecordingClicked)=\"onStopRecordingClicked('toolbar')\"\n\t>\n\t\t<ng-template #toolbarAdditionalButtons>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularToolbarAdditionalButtonsTemplate\"></ng-container>\n\t\t</ng-template>\n\n\t\t<ng-template #toolbarAdditionalPanelButtons>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularToolbarAdditionalPanelButtonsTemplate\"></ng-container>\n\t\t</ng-template>\n\t</ov-toolbar>\n</ng-template>\n\n<ng-template #defaultPanel>\n\t<ov-panel id=\"default-panel\">\n\t\t<ng-template #chatPanel>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularChatPanelTemplate\"></ng-container>\n\t\t</ng-template>\n\n\t\t<ng-template #participantsPanel>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularParticipantsPanelTemplate\"></ng-container>\n\t\t</ng-template>\n\n\t\t<ng-template #backgroundEffectsPanel>\n\t\t\t<ov-background-effects-panel id=\"default-background-effects-panel\"></ov-background-effects-panel>\n\t\t</ng-template>\n\n\t\t<ng-template #settingsPanel>\n\t\t\t<ov-settings-panel id=\"default-settings-panel\"></ov-settings-panel>\n\t\t</ng-template>\n\n\t\t<ng-template #activitiesPanel>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularActivitiesPanelTemplate\"></ng-container>\n\t\t</ng-template>\n\n\t\t<ng-template #additionalPanels>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularAdditionalPanelsTemplate\"></ng-container>\n\t\t</ng-template>\n\t</ov-panel>\n</ng-template>\n\n<ng-template #defaultChatPanel>\n\t<ov-chat-panel id=\"default-chat-panel\"></ov-chat-panel>\n</ng-template>\n\n<ng-template #defaultActivitiesPanel>\n\t<ov-activities-panel\n\t\tid=\"default-activities-panel\"\n\t\t(onStartRecordingClicked)=\"onStartRecordingClicked('panel')\"\n\t\t(onStopRecordingClicked)=\"onStopRecordingClicked('panel')\"\n\t\t(onDeleteRecordingClicked)=\"onDeleteRecordingClicked($event)\"\n\t></ov-activities-panel>\n</ng-template>\n\n<ng-template #defaultParticipantsPanel>\n\t<ov-participants-panel id=\"default-participants-panel\">\n\t\t<ng-template #participantPanelItem let-participant>\n\t\t\t<ng-container\n\t\t\t\t*ngTemplateOutlet=\"openviduAngularParticipantPanelItemTemplate; context: { $implicit: participant }\"\n\t\t\t></ng-container>\n\t\t</ng-template>\n\t</ov-participants-panel>\n</ng-template>\n\n<ng-template #defaultParticipantPanelItem let-participant>\n\t<ov-participant-panel-item [participant]=\"participant\" id=\"default-participant-panel-item\">\n\t\t<ng-template #participantPanelItemElements>\n\t\t\t<ng-container\n\t\t\t\t*ngTemplateOutlet=\"openviduAngularParticipantPanelItemElementsTemplate; context: { $implicit: participant }\"\n\t\t\t></ng-container>\n\t\t</ng-template>\n\t</ov-participant-panel-item>\n</ng-template>\n\n<ng-template #defaultLayout>\n\t<ov-layout id=\"default-layout\">\n\t\t<ng-template #stream let-stream>\n\t\t\t<ng-container *ngTemplateOutlet=\"openviduAngularStreamTemplate; context: { $implicit: stream }\"> </ng-container>\n\t\t</ng-template>\n\t</ov-layout>\n</ng-template>\n\n<ng-template #defaultStream let-stream>\n\t<ov-stream [stream]=\"stream\" id=\"default-stream\"></ov-stream>\n</ng-template>\n", styles: ["#call-container,#vc-container{height:100%}#vc-container{background-color:var(--ov-primary-color)}#pre-join-container{height:inherit}.error-icon{color:var(--ov-warn-color)}#spinner{position:absolute;inset:40% 0 0;margin:auto;text-align:-webkit-center;text-align:-moz-center;color:var(--ov-panel-text-color)}#call-container{--ov-captions-height: 230px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.LoggerService }, { type: i2.StorageService }, { type: i3.ParticipantService }, { type: i4.DeviceService }, { type: i5.OpenViduService }, { type: i6.ActionService }, { type: i7.OpenViduAngularConfigService }, { type: i8.TranslateService }]; }, propDecorators: { externalToolbar: [{
                type: ContentChild,
                args: [ToolbarDirective]
            }], externalToolbarAdditionalButtons: [{
                type: ContentChild,
                args: [ToolbarAdditionalButtonsDirective]
            }], externalToolbarAdditionalPanelButtons: [{
                type: ContentChild,
                args: [ToolbarAdditionalPanelButtonsDirective]
            }], externalAdditionalPanels: [{
                type: ContentChild,
                args: [AdditionalPanelsDirective]
            }], externalPanel: [{
                type: ContentChild,
                args: [PanelDirective]
            }], externalChatPanel: [{
                type: ContentChild,
                args: [ChatPanelDirective]
            }], externalActivitiesPanel: [{
                type: ContentChild,
                args: [ActivitiesPanelDirective]
            }], externalParticipantsPanel: [{
                type: ContentChild,
                args: [ParticipantsPanelDirective]
            }], externalParticipantPanelItem: [{
                type: ContentChild,
                args: [ParticipantPanelItemDirective]
            }], externalParticipantPanelItemElements: [{
                type: ContentChild,
                args: [ParticipantPanelItemElementsDirective]
            }], externalLayout: [{
                type: ContentChild,
                args: [LayoutDirective]
            }], externalStream: [{
                type: ContentChild,
                args: [StreamDirective]
            }], defaultToolbarTemplate: [{
                type: ViewChild,
                args: ['defaultToolbar', { static: false, read: TemplateRef }]
            }], defaultPanelTemplate: [{
                type: ViewChild,
                args: ['defaultPanel', { static: false, read: TemplateRef }]
            }], defaultChatPanelTemplate: [{
                type: ViewChild,
                args: ['defaultChatPanel', { static: false, read: TemplateRef }]
            }], defaultParticipantsPanelTemplate: [{
                type: ViewChild,
                args: ['defaultParticipantsPanel', { static: false, read: TemplateRef }]
            }], defaultActivitiesPanelTemplate: [{
                type: ViewChild,
                args: ['defaultActivitiesPanel', { static: false, read: TemplateRef }]
            }], defaultParticipantPanelItemTemplate: [{
                type: ViewChild,
                args: ['defaultParticipantPanelItem', { static: false, read: TemplateRef }]
            }], defaultLayoutTemplate: [{
                type: ViewChild,
                args: ['defaultLayout', { static: false, read: TemplateRef }]
            }], defaultStreamTemplate: [{
                type: ViewChild,
                args: ['defaultStream', { static: false, read: TemplateRef }]
            }], tokens: [{
                type: Input
            }], onJoinButtonClicked: [{
                type: Output
            }], onToolbarLeaveButtonClicked: [{
                type: Output
            }], onToolbarCameraButtonClicked: [{
                type: Output
            }], onToolbarMicrophoneButtonClicked: [{
                type: Output
            }], onToolbarScreenshareButtonClicked: [{
                type: Output
            }], onToolbarFullscreenButtonClicked: [{
                type: Output
            }], onToolbarParticipantsPanelButtonClicked: [{
                type: Output
            }], onToolbarChatPanelButtonClicked: [{
                type: Output
            }], onToolbarActivitiesPanelButtonClicked: [{
                type: Output
            }], onToolbarStartRecordingClicked: [{
                type: Output
            }], onToolbarStopRecordingClicked: [{
                type: Output
            }], onActivitiesPanelStartRecordingClicked: [{
                type: Output
            }], onActivitiesPanelStopRecordingClicked: [{
                type: Output
            }], onActivitiesPanelDeleteRecordingClicked: [{
                type: Output
            }], onActivitiesPanelPlayRecordingClicked: [{
                type: Output
            }], onSessionCreated: [{
                type: Output
            }], onParticipantCreated: [{
                type: Output
            }], onNodeCrashed: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,