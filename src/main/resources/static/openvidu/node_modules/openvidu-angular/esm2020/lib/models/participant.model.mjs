import { VideoType } from './video-type.model';
/**
 * @internal
 */
export var OpenViduRole;
(function (OpenViduRole) {
    OpenViduRole["MODERATOR"] = "MODERATOR";
    OpenViduRole["PUBLISHER"] = "PUBLISHER";
})(OpenViduRole || (OpenViduRole = {}));
export class ParticipantAbstractModel {
    constructor(props, model) {
        this.streams = new Map();
        this.id = props.id ? props.id : new Date().getTime().toString();
        this.local = props.local;
        this.nickname = props.nickname;
        this.colorProfile = !!props.colorProfile ? props.colorProfile : `hsl(${Math.random() * 360}, 100%, 80%)`;
        this.isMutedForcibly = typeof props.isMutedForcibly === 'boolean' ? props.isMutedForcibly : false;
        let streamModel = {
            connected: model ? model.connected : true,
            type: model ? model.type : VideoType.CAMERA,
            streamManager: model ? model.streamManager : null,
            videoEnlarged: model ? model.videoEnlarged : false,
            connectionId: model ? model.connectionId : null,
            participant: this
        };
        this.streams.set(streamModel.type, streamModel);
    }
    /**
     * @internal
     */
    addConnection(streamModel) {
        streamModel.participant = this;
        this.streams.set(streamModel.type, streamModel);
    }
    /**
     * @internal
     */
    hasAudioActive() {
        const cameraConnection = this.getCameraConnection();
        const screenConnection = this.getScreenConnection();
        if (cameraConnection.connected) {
            return this.isCameraAudioActive();
        }
        else if (screenConnection.connected) {
            return this.isScreenAudioActive();
        }
        return false;
    }
    /**
     * @internal
     */
    isCameraAudioActive() {
        const cameraConnection = this.getCameraConnection();
        if (cameraConnection?.connected) {
            return cameraConnection.streamManager?.stream?.audioActive;
        }
        return false;
    }
    /**
     * @internal
     */
    isCameraVideoActive() {
        const cameraConnection = this.getCameraConnection();
        return cameraConnection?.connected && cameraConnection?.streamManager?.stream?.videoActive;
    }
    /**
     * @internal
     */
    isScreenAudioActive() {
        const screenConnection = this.getScreenConnection();
        if (screenConnection?.connected) {
            return screenConnection?.streamManager?.stream?.audioActive;
        }
        return false;
    }
    /**
     * @internal
     */
    hasConnectionType(type) {
        return this.streams.has(type);
    }
    /**
     * @internal
     */
    getCameraConnection() {
        return this.streams.get(VideoType.CAMERA);
    }
    /**
     * @internal
     */
    getScreenConnection() {
        return this.streams.get(VideoType.SCREEN);
    }
    /**
     * @internal
     */
    getConnectionTypesActive() {
        let connType = [];
        if (this.isCameraActive())
            connType.push(VideoType.CAMERA);
        if (this.isScreenActive())
            connType.push(VideoType.SCREEN);
        return connType;
    }
    /**
     * @internal
     */
    setCameraConnectionId(connectionId) {
        this.getCameraConnection().connectionId = connectionId;
    }
    /**
     * @internal
     */
    setScreenConnectionId(connectionId) {
        this.getScreenConnection().connectionId = connectionId;
    }
    /**
     * @internal
     */
    removeConnection(connectionId) {
        const removeStream = this.getConnectionById(connectionId);
        this.streams.delete(removeStream.type);
        return removeStream;
    }
    /**
     * @internal
     */
    hasConnectionId(connectionId) {
        return Array.from(this.streams.values()).some((conn) => conn.connectionId === connectionId);
    }
    /**
     * @internal
     */
    getConnectionById(connectionId) {
        return Array.from(this.streams.values()).find((conn) => conn.connectionId === connectionId);
    }
    /**
     * @internal
     */
    getAvailableConnections() {
        return Array.from(this.streams.values()).filter((conn) => conn.connected);
    }
    /**
     * @internal
     */
    isLocal() {
        return this.local;
        // return Array.from(this.streams.values()).every((conn) => conn.local);
    }
    /**
     * @internal
     */
    setNickname(nickname) {
        this.nickname = nickname;
    }
    /**
     * @internal
     */
    getNickname() {
        return this.nickname;
    }
    /**
     * @internal
     */
    setCameraPublisher(publisher) {
        const cameraConnection = this.getCameraConnection();
        if (cameraConnection)
            cameraConnection.streamManager = publisher;
    }
    /**
     * @internal
     */
    setScreenPublisher(publisher) {
        const screenConnection = this.getScreenConnection();
        if (screenConnection)
            screenConnection.streamManager = publisher;
    }
    /**
     * @internal
     */
    setPublisher(connType, publisher) {
        const connection = this.streams.get(connType);
        if (connection) {
            connection.streamManager = publisher;
        }
    }
    /**
     * @internal
     */
    isCameraActive() {
        return this.getCameraConnection()?.connected;
    }
    /**
     * @internal
     */
    enableCamera() {
        const cameraConnection = this.getCameraConnection();
        if (cameraConnection)
            cameraConnection.connected = true;
    }
    /**
     * @internal
     */
    disableCamera() {
        const cameraConnection = this.getCameraConnection();
        if (cameraConnection)
            cameraConnection.connected = false;
    }
    /**
     * @internal
     */
    isScreenActive() {
        return this.getScreenConnection()?.connected;
    }
    /**
     * @internal
     */
    enableScreen() {
        const screenConnection = this.getScreenConnection();
        if (screenConnection)
            screenConnection.connected = true;
    }
    /**
     * @internal
     */
    disableScreen() {
        const screenConnection = this.getScreenConnection();
        if (screenConnection)
            screenConnection.connected = false;
    }
    /**
     * @internal
     */
    setAllVideoEnlarged(enlarged) {
        this.streams.forEach((conn) => (conn.videoEnlarged = enlarged));
    }
    /**
     * @internal
     */
    setCameraEnlarged(enlarged) {
        this.streams.get(VideoType.CAMERA).videoEnlarged = enlarged;
    }
    /**
     * @internal
     */
    setScreenEnlarged(enlarged) {
        this.streams.get(VideoType.SCREEN).videoEnlarged = enlarged;
    }
    /**
     * @internal
     */
    toggleVideoEnlarged(connectionId) {
        this.streams.forEach((conn) => {
            if (conn.connectionId === connectionId) {
                conn.videoEnlarged = !conn.videoEnlarged;
            }
        });
    }
    /**
     * @internal
     */
    someHasVideoEnlarged() {
        return Array.from(this.streams.values()).some((conn) => conn.videoEnlarged);
    }
    /**
     * @internal
     */
    setMutedForcibly(muted) {
        this.isMutedForcibly = muted;
    }
    /**
     * @internal
     */
    getRole() {
        return this.streams.get(VideoType.CAMERA)?.streamManager?.stream?.connection?.role;
    }
}
/**
 * @internal
 */
export class ParticipantModel extends ParticipantAbstractModel {
}
//# sourceMappingURL=data:application/json;base64,