import { ChangeDetectionStrategy, Component, ContentChild, TemplateRef, ViewChild } from '@angular/core';
import { ParticipantPanelItemDirective } from '../../../../directives/template/openvidu-angular.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/participant/participant.service";
import * as i2 from "../../../..//services/panel/panel.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/icon";
import * as i6 from "@angular/material/tooltip";
import * as i7 from "@angular/material/divider";
import * as i8 from "../participant-panel-item/participant-panel-item.component";
import * as i9 from "../../../../pipes/translate.pipe";
/**
 *
 * The **ParticipantsPanelComponent** is hosted inside of the {@link PanelComponent}.
 * It is in charge of displaying the participants connected to the session.
 * This component is composed by the {@link ParticipantPanelItemComponent}.
 *
 * <div class="custom-table-container">
 * <div>
 *
 * <h3>OpenVidu Angular Directives</h3>
 *
 * The ParticipantsPanelComponent can be replaced with a custom component. It provides us the following {@link https://angular.io/guide/structural-directives Angular structural directives}
 * for doing this.
 *
 * |            **Directive**           |                 **Reference**                 |
 * |:----------------------------------:|:---------------------------------------------:|
 * |       ***ovParticipantsPanel**      |       {@link ParticipantsPanelDirective}      |
 *
 * </br>
 *
 * As the ParticipantsPanelComponent is composed by ParticipantPanelItemComponent, it is also providing us a way to **replace the participant item** with a custom one.
 * It will recognise the following directive in a child element.
 *
 * |            **Directive**           |                 **Reference**                 |
 * |:----------------------------------:|:---------------------------------------------:|
 * |     ***ovParticipantPanelItem**     |     {@link ParticipantPanelItemDirective}     |
 *
 * <p class="component-link-text">
 * 	<span class="italic">See all {@link OpenViduAngularDirectiveModule OpenVidu Angular Directives}</span>
 * </p>
 * </div>
 * </div>
 */
export class ParticipantsPanelComponent {
    /**
     * @ignore
     */
    constructor(participantService, panelService, cd) {
        this.participantService = participantService;
        this.panelService = panelService;
        this.cd = cd;
        this.remoteParticipants = [];
    }
    set externalParticipantPanelItem(externalParticipantPanelItem) {
        // This directive will has value only when PARTICIPANT PANEL ITEM component tagged with '*ovParticipantPanelItem'
        // is inside of the PARTICIPANTS PANEL component tagged with '*ovParticipantsPanel'
        if (externalParticipantPanelItem) {
            this.participantPanelItemTemplate = externalParticipantPanelItem.template;
        }
    }
    ngOnInit() {
        this.localParticipantSubs = this.participantService.localParticipantObs.subscribe((p) => {
            this.localParticipant = p;
            // Mark for re-rendering using an impure pipe 'streamsTypesEnabled'
            this.cd.markForCheck();
        });
        this.remoteParticipantsSubs = this.participantService.remoteParticipantsObs.subscribe((p) => {
            // Workaround which forc the objects references update
            // After one entirely day trying to make it works, this is the only way
            const remoteParticipantsAux = [];
            p.forEach((par) => {
                remoteParticipantsAux.push(Object.create(par));
            });
            this.remoteParticipants = remoteParticipantsAux;
            // Mark for re-rendering using an impure pipe 'streamsTypesEnabled'
            this.cd.markForCheck();
        });
    }
    ngOnDestroy() {
        if (this.localParticipantSubs)
            this.localParticipantSubs.unsubscribe();
        if (this.remoteParticipantsSubs)
            this.remoteParticipantsSubs.unsubscribe;
    }
    ngAfterViewInit() {
        if (!this.participantPanelItemTemplate) {
            // the user has override the default participants panel but not the 'participant-panel-item'
            // so the default component must be injected
            this.participantPanelItemTemplate = this.defaultParticipantPanelItemTemplate;
            this.cd.detectChanges();
        }
    }
    close() {
        this.panelService.closePanel();
    }
}
ParticipantsPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantsPanelComponent, deps: [{ token: i1.ParticipantService }, { token: i2.PanelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ParticipantsPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: ParticipantsPanelComponent, selector: "ov-participants-panel", queries: [{ propertyName: "participantPanelItemTemplate", first: true, predicate: ["participantPanelItem"], descendants: true, read: TemplateRef }, { propertyName: "externalParticipantPanelItem", first: true, predicate: ParticipantPanelItemDirective, descendants: true }], viewQueries: [{ propertyName: "defaultParticipantPanelItemTemplate", first: true, predicate: ["defaultParticipantPanelItem"], descendants: true, read: TemplateRef }], ngImport: i0, template: "<div class=\"panel-container\" id=\"participants-container\">\n\t<div class=\"panel-header-container\">\n\t\t<h3 class=\"panel-title\">{{ 'PANEL.PARTICIPANTS.TITLE' | translate }}</h3>\n\t\t<button class=\"panel-close-button\" mat-icon-button matTooltip=\"{{ 'PANEL.CLOSE' | translate }}\" (click)=\"close()\">\n\t\t\t<mat-icon>close</mat-icon>\n\t\t</button>\n\t</div>\n\n\t<div class=\"scrollable\">\n\n\t\t<div class=\"local-participant-container\" *ngIf=\"localParticipant\">\n\t\t\t<ng-container *ngTemplateOutlet=\"participantPanelItemTemplate; context: { $implicit: localParticipant }\"></ng-container>\n\t\t\t<mat-divider *ngIf=\"true\"></mat-divider>\n\t\t</div>\n\n\t\t<div class=\"remote-participants-container\" id=\"remote-participants-container\" *ngIf=\"remoteParticipants.length > 0\">\n\n\t\t\t<div *ngFor=\"let participant of this.remoteParticipants\" id=\"remote-participant-item\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"participantPanelItemTemplate; context: { $implicit: participant }\"></ng-container>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<ng-template #defaultParticipantPanelItem let-participant>\n\t<ov-participant-panel-item [participant]=\"participant\" id=\"default-participant-panel-item\"></ov-participant-panel-item>\n</ng-template>\n", styles: [".panel-container{margin:20px;background-color:var(--ov-panel-background);border-radius:var(--ov-panel-radius);max-height:calc(100% - 40px);min-height:calc(100% - 40px)}.panel-header-container{padding:10px;display:flex}.panel-title{margin-left:5px;margin-top:auto;margin-bottom:auto}.panel-close-button{margin-left:auto;border-radius:var(--ov-buttons-radius)}::-webkit-scrollbar{width:8px}::-webkit-scrollbar-thumb{background:#a7a7a7;border-radius:4px}::-webkit-scrollbar-thumb:hover{background:#7c7c7c}::-webkit-scrollbar-track{background:var(--ov-light-color);border-radius:4px}\n", ".local-participant-container,.remote-participants-container{margin:5px 10px}.scrollable{height:calc(100% - 60px);max-height:calc(100% - 60px);overflow:auto}.message-container{padding:5px;background-color:var(--ov-light-color);color:var(--ov-panel-text-color);text-align:center;margin:5px;font-size:12px}.message-container p{margin:0}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i6.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "component", type: i7.MatDivider, selector: "mat-divider", inputs: ["vertical", "inset"] }, { kind: "component", type: i8.ParticipantPanelItemComponent, selector: "ov-participant-panel-item", inputs: ["participant"] }, { kind: "pipe", type: i9.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantsPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-participants-panel', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"panel-container\" id=\"participants-container\">\n\t<div class=\"panel-header-container\">\n\t\t<h3 class=\"panel-title\">{{ 'PANEL.PARTICIPANTS.TITLE' | translate }}</h3>\n\t\t<button class=\"panel-close-button\" mat-icon-button matTooltip=\"{{ 'PANEL.CLOSE' | translate }}\" (click)=\"close()\">\n\t\t\t<mat-icon>close</mat-icon>\n\t\t</button>\n\t</div>\n\n\t<div class=\"scrollable\">\n\n\t\t<div class=\"local-participant-container\" *ngIf=\"localParticipant\">\n\t\t\t<ng-container *ngTemplateOutlet=\"participantPanelItemTemplate; context: { $implicit: localParticipant }\"></ng-container>\n\t\t\t<mat-divider *ngIf=\"true\"></mat-divider>\n\t\t</div>\n\n\t\t<div class=\"remote-participants-container\" id=\"remote-participants-container\" *ngIf=\"remoteParticipants.length > 0\">\n\n\t\t\t<div *ngFor=\"let participant of this.remoteParticipants\" id=\"remote-participant-item\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"participantPanelItemTemplate; context: { $implicit: participant }\"></ng-container>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<ng-template #defaultParticipantPanelItem let-participant>\n\t<ov-participant-panel-item [participant]=\"participant\" id=\"default-participant-panel-item\"></ov-participant-panel-item>\n</ng-template>\n", styles: [".panel-container{margin:20px;background-color:var(--ov-panel-background);border-radius:var(--ov-panel-radius);max-height:calc(100% - 40px);min-height:calc(100% - 40px)}.panel-header-container{padding:10px;display:flex}.panel-title{margin-left:5px;margin-top:auto;margin-bottom:auto}.panel-close-button{margin-left:auto;border-radius:var(--ov-buttons-radius)}::-webkit-scrollbar{width:8px}::-webkit-scrollbar-thumb{background:#a7a7a7;border-radius:4px}::-webkit-scrollbar-thumb:hover{background:#7c7c7c}::-webkit-scrollbar-track{background:var(--ov-light-color);border-radius:4px}\n", ".local-participant-container,.remote-participants-container{margin:5px 10px}.scrollable{height:calc(100% - 60px);max-height:calc(100% - 60px);overflow:auto}.message-container{padding:5px;background-color:var(--ov-light-color);color:var(--ov-panel-text-color);text-align:center;margin:5px;font-size:12px}.message-container p{margin:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ParticipantService }, { type: i2.PanelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { defaultParticipantPanelItemTemplate: [{
                type: ViewChild,
                args: ['defaultParticipantPanelItem', { static: false, read: TemplateRef }]
            }], participantPanelItemTemplate: [{
                type: ContentChild,
                args: ['participantPanelItem', { read: TemplateRef }]
            }], externalParticipantPanelItem: [{
                type: ContentChild,
                args: [ParticipantPanelItemDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,