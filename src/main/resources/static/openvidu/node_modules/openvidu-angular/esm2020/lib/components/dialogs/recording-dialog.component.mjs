import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/button";
import * as i4 from "../../pipes/translate.pipe";
/**
 * @internal
 */
export class RecordingDialogComponent {
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.src = data.src;
    }
    close() {
        this.dialogRef.close();
    }
}
RecordingDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: RecordingDialogComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
RecordingDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: RecordingDialogComponent, selector: "app-recording-dialog", ngImport: i0, template: `
		<div mat-dialog-content>
			<video controls autoplay [src]="src"></video>
		</div>
		<div mat-dialog-actions *ngIf="data.showActionButtons" align="end">
			<button mat-button (click)="close()">{{ 'PANEL.CLOSE' | translate }}</button>
		</div>
	`, isInline: true, styles: ["video{max-height:64vh;max-width:100%}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "directive", type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "directive", type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: RecordingDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-recording-dialog', template: `
		<div mat-dialog-content>
			<video controls autoplay [src]="src"></video>
		</div>
		<div mat-dialog-actions *ngIf="data.showActionButtons" align="end">
			<button mat-button (click)="close()">{{ 'PANEL.CLOSE' | translate }}</button>
		</div>
	`, styles: ["video{max-height:64vh;max-width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkaW5nLWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9vcGVudmlkdS1hbmd1bGFyL3NyYy9saWIvY29tcG9uZW50cy9kaWFsb2dzL3JlY29yZGluZy1kaWFsb2cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBZ0IsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7OztBQUd6RTs7R0FFRztBQW9CSCxNQUFNLE9BQU8sd0JBQXdCO0lBR3BDLFlBQW1CLFNBQWlELEVBQWtDLElBQXlCO1FBQTVHLGNBQVMsR0FBVCxTQUFTLENBQXdDO1FBQWtDLFNBQUksR0FBSixJQUFJLENBQXFCO1FBQzlILElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNyQixDQUFDO0lBQ0QsS0FBSztRQUNKLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7cUhBUlcsd0JBQXdCLDhDQUcwQyxlQUFlO3lHQUhqRix3QkFBd0IsNERBakIxQjs7Ozs7OztFQU9UOzJGQVVXLHdCQUF3QjtrQkFuQnBDLFNBQVM7K0JBQ0Msc0JBQXNCLFlBQ3RCOzs7Ozs7O0VBT1Q7OzBCQWFzRSxNQUFNOzJCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0RGlhbG9nUmVmLCBNQVRfRElBTE9HX0RBVEEgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgUmVjb3JkaW5nRGlhbG9nRGF0YSB9IGZyb20gJy4uLy4uL21vZGVscy9kaWFsb2cubW9kZWwnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdhcHAtcmVjb3JkaW5nLWRpYWxvZycsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGRpdiBtYXQtZGlhbG9nLWNvbnRlbnQ+XG5cdFx0XHQ8dmlkZW8gY29udHJvbHMgYXV0b3BsYXkgW3NyY109XCJzcmNcIj48L3ZpZGVvPlxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgbWF0LWRpYWxvZy1hY3Rpb25zICpuZ0lmPVwiZGF0YS5zaG93QWN0aW9uQnV0dG9uc1wiIGFsaWduPVwiZW5kXCI+XG5cdFx0XHQ8YnV0dG9uIG1hdC1idXR0b24gKGNsaWNrKT1cImNsb3NlKClcIj57eyAnUEFORUwuQ0xPU0UnIHwgdHJhbnNsYXRlIH19PC9idXR0b24+XG5cdFx0PC9kaXY+XG5cdGAsXG5cdHN0eWxlczogW1xuXHRcdGBcblx0XHRcdHZpZGVvIHtcblx0XHRcdFx0bWF4LWhlaWdodDogNjR2aDtcblx0XHRcdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdFx0fVxuXHRcdGBcblx0XVxufSlcbmV4cG9ydCBjbGFzcyBSZWNvcmRpbmdEaWFsb2dDb21wb25lbnQge1xuXHRzcmM6IHN0cmluZztcblxuXHRjb25zdHJ1Y3RvcihwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8UmVjb3JkaW5nRGlhbG9nQ29tcG9uZW50PiwgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyBkYXRhOiBSZWNvcmRpbmdEaWFsb2dEYXRhKSB7XG5cdFx0dGhpcy5zcmMgPSBkYXRhLnNyYztcblx0fVxuXHRjbG9zZSgpIHtcblx0XHR0aGlzLmRpYWxvZ1JlZi5jbG9zZSgpO1xuXHR9XG59XG4iXX0=