import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/config/openvidu-angular.config.service";
/**
 * The **recordingsList** directive allows show the recordings available for the session in {@link RecordingActivityComponent}.
 *
 * Default: `[]`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `recordingActivity` component:
 *
 * @example
 * <ov-videoconference [recordingActivityRecordingsList]="list"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link RecordingActivityComponent}.
 * @example
 * <ov-recording-activity [recordingsList]="list"></ov-recording-activity>
 */
export class RecordingActivityRecordingsListDirective {
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.recordingsValue = [];
    }
    set recordingActivityRecordingsList(value) {
        this.recordingsValue = value;
        this.update(this.recordingsValue);
    }
    set recordingsList(value) {
        this.recordingsValue = value;
        this.update(this.recordingsValue);
    }
    ngAfterViewInit() {
        this.update(this.recordingsValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.recordingsValue = [];
        this.update([]);
    }
    update(value) {
        if (this.libService.recordingsList.getValue() !== value) {
            this.libService.recordingsList.next(value);
        }
    }
}
RecordingActivityRecordingsListDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: RecordingActivityRecordingsListDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
RecordingActivityRecordingsListDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: RecordingActivityRecordingsListDirective, selector: "ov-videoconference[recordingActivityRecordingsList], ov-recording-activity[recordingsList]", inputs: { recordingActivityRecordingsList: "recordingActivityRecordingsList", recordingsList: "recordingsList" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: RecordingActivityRecordingsListDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[recordingActivityRecordingsList], ov-recording-activity[recordingsList]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { recordingActivityRecordingsList: [{
                type: Input
            }], recordingsList: [{
                type: Input
            }] } });
/**
 * The **recordingError** directive allows to show any possible error with the recording in the {@link RecordingActivityComponent}.
 *
 * Default: `[]`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `recordingActivity` component:
 *
 * @example
 * <ov-videoconference [recordingActivityRecordingError]="error"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link RecordingActivityComponent}.
 * @example
 * <ov-recording-activity [recordingError]="error"></ov-recording-activity>
 */
export class RecordingActivityRecordingErrorDirective {
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.recordingErrorValue = null;
    }
    set recordingActivityRecordingError(value) {
        this.recordingErrorValue = value;
        this.update(this.recordingErrorValue);
    }
    set recordingError(value) {
        this.recordingErrorValue = value;
        this.update(this.recordingErrorValue);
    }
    ngAfterViewInit() {
        this.update(this.recordingErrorValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.recordingErrorValue = null;
        this.update(null);
    }
    update(value) {
        if (this.libService.recordingError.getValue() !== value) {
            this.libService.recordingError.next(value);
        }
    }
}
RecordingActivityRecordingErrorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: RecordingActivityRecordingErrorDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
RecordingActivityRecordingErrorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: RecordingActivityRecordingErrorDirective, selector: "ov-videoconference[recordingActivityRecordingError], ov-recording-activity[recordingError]", inputs: { recordingActivityRecordingError: "recordingActivityRecordingError", recordingError: "recordingError" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: RecordingActivityRecordingErrorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[recordingActivityRecordingError], ov-recording-activity[recordingError]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { recordingActivityRecordingError: [{
                type: Input
            }], recordingError: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkaW5nLWFjdGl2aXR5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL29wZW52aWR1LWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL2FwaS9yZWNvcmRpbmctYWN0aXZpdHkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFjLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQzs7O0FBSXZGOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBSUgsTUFBTSxPQUFPLHdDQUF3QztJQVlwRCxZQUFtQixVQUFzQixFQUFVLFVBQXdDO1FBQXhFLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUE4QjtRQUYzRixvQkFBZSxHQUFvQixFQUFFLENBQUM7SUFFd0QsQ0FBQztJQVgvRixJQUFhLCtCQUErQixDQUFDLEtBQXNCO1FBQ2xFLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRCxJQUFhLGNBQWMsQ0FBQyxLQUFzQjtRQUNqRCxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBTUQsZUFBZTtRQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRCxXQUFXO1FBQ1YsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNELEtBQUs7UUFDSixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBc0I7UUFDNUIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLEVBQUU7WUFDeEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNDO0lBQ0YsQ0FBQzs7cUlBN0JXLHdDQUF3Qzt5SEFBeEMsd0NBQXdDOzJGQUF4Qyx3Q0FBd0M7a0JBSHBELFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLDRGQUE0RjtpQkFDdEc7NElBRWEsK0JBQStCO3NCQUEzQyxLQUFLO2dCQUlPLGNBQWM7c0JBQTFCLEtBQUs7O0FBMkJQOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBSUgsTUFBTSxPQUFPLHdDQUF3QztJQVlwRCxZQUFtQixVQUFzQixFQUFVLFVBQXdDO1FBQXhFLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUE4QjtRQUYzRix3QkFBbUIsR0FBUSxJQUFJLENBQUM7SUFFOEQsQ0FBQztJQVgvRixJQUFhLCtCQUErQixDQUFDLEtBQVU7UUFDdEQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxJQUFhLGNBQWMsQ0FBQyxLQUFVO1FBQ3JDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBTUQsZUFBZTtRQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNELFdBQVc7UUFDVixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBQ0QsS0FBSztRQUNKLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7UUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVU7UUFDaEIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLEVBQUU7WUFDeEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNDO0lBQ0YsQ0FBQzs7cUlBN0JXLHdDQUF3Qzt5SEFBeEMsd0NBQXdDOzJGQUF4Qyx3Q0FBd0M7a0JBSHBELFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLDRGQUE0RjtpQkFDdEc7NElBRWEsK0JBQStCO3NCQUEzQyxLQUFLO2dCQUlPLGNBQWM7c0JBQTFCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlY29yZGluZ0luZm8gfSBmcm9tICcuLi8uLi9tb2RlbHMvcmVjb3JkaW5nLm1vZGVsJztcbmltcG9ydCB7IE9wZW5WaWR1QW5ndWxhckNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jb25maWcvb3BlbnZpZHUtYW5ndWxhci5jb25maWcuc2VydmljZSc7XG5cbi8qKlxuICogVGhlICoqcmVjb3JkaW5nc0xpc3QqKiBkaXJlY3RpdmUgYWxsb3dzIHNob3cgdGhlIHJlY29yZGluZ3MgYXZhaWxhYmxlIGZvciB0aGUgc2Vzc2lvbiBpbiB7QGxpbmsgUmVjb3JkaW5nQWN0aXZpdHlDb21wb25lbnR9LlxuICpcbiAqIERlZmF1bHQ6IGBbXWBcbiAqXG4gKiBJdCBjYW4gYmUgdXNlZCBpbiB0aGUgcGFyZW50IGVsZW1lbnQge0BsaW5rIFZpZGVvY29uZmVyZW5jZUNvbXBvbmVudH0gc3BlY2lmeWluZyB0aGUgbmFtZSBvZiB0aGUgYHJlY29yZGluZ0FjdGl2aXR5YCBjb21wb25lbnQ6XG4gKlxuICogQGV4YW1wbGVcbiAqIDxvdi12aWRlb2NvbmZlcmVuY2UgW3JlY29yZGluZ0FjdGl2aXR5UmVjb3JkaW5nc0xpc3RdPVwibGlzdFwiPjwvb3YtdmlkZW9jb25mZXJlbmNlPlxuICpcbiAqIFxcXG4gKiBBbmQgaXQgYWxzbyBjYW4gYmUgdXNlZCBpbiB0aGUge0BsaW5rIFJlY29yZGluZ0FjdGl2aXR5Q29tcG9uZW50fS5cbiAqIEBleGFtcGxlXG4gKiA8b3YtcmVjb3JkaW5nLWFjdGl2aXR5IFtyZWNvcmRpbmdzTGlzdF09XCJsaXN0XCI+PC9vdi1yZWNvcmRpbmctYWN0aXZpdHk+XG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ292LXZpZGVvY29uZmVyZW5jZVtyZWNvcmRpbmdBY3Rpdml0eVJlY29yZGluZ3NMaXN0XSwgb3YtcmVjb3JkaW5nLWFjdGl2aXR5W3JlY29yZGluZ3NMaXN0XSdcbn0pXG5leHBvcnQgY2xhc3MgUmVjb3JkaW5nQWN0aXZpdHlSZWNvcmRpbmdzTGlzdERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cdEBJbnB1dCgpIHNldCByZWNvcmRpbmdBY3Rpdml0eVJlY29yZGluZ3NMaXN0KHZhbHVlOiBSZWNvcmRpbmdJbmZvW10pIHtcblx0XHR0aGlzLnJlY29yZGluZ3NWYWx1ZSA9IHZhbHVlO1xuXHRcdHRoaXMudXBkYXRlKHRoaXMucmVjb3JkaW5nc1ZhbHVlKTtcblx0fVxuXHRASW5wdXQoKSBzZXQgcmVjb3JkaW5nc0xpc3QodmFsdWU6IFJlY29yZGluZ0luZm9bXSkge1xuXHRcdHRoaXMucmVjb3JkaW5nc1ZhbHVlID0gdmFsdWU7XG5cdFx0dGhpcy51cGRhdGUodGhpcy5yZWNvcmRpbmdzVmFsdWUpO1xuXHR9XG5cblx0cmVjb3JkaW5nc1ZhbHVlOiBSZWNvcmRpbmdJbmZvW10gPSBbXTtcblxuXHRjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBsaWJTZXJ2aWNlOiBPcGVuVmlkdUFuZ3VsYXJDb25maWdTZXJ2aWNlKSB7fVxuXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblx0XHR0aGlzLnVwZGF0ZSh0aGlzLnJlY29yZGluZ3NWYWx1ZSk7XG5cdH1cblx0bmdPbkRlc3Ryb3koKTogdm9pZCB7XG5cdFx0dGhpcy5jbGVhcigpO1xuXHR9XG5cdGNsZWFyKCkge1xuXHRcdHRoaXMucmVjb3JkaW5nc1ZhbHVlID0gW107XG5cdFx0dGhpcy51cGRhdGUoW10pO1xuXHR9XG5cblx0dXBkYXRlKHZhbHVlOiBSZWNvcmRpbmdJbmZvW10pIHtcblx0XHRpZiAodGhpcy5saWJTZXJ2aWNlLnJlY29yZGluZ3NMaXN0LmdldFZhbHVlKCkgIT09IHZhbHVlKSB7XG5cdFx0XHR0aGlzLmxpYlNlcnZpY2UucmVjb3JkaW5nc0xpc3QubmV4dCh2YWx1ZSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogVGhlICoqcmVjb3JkaW5nRXJyb3IqKiBkaXJlY3RpdmUgYWxsb3dzIHRvIHNob3cgYW55IHBvc3NpYmxlIGVycm9yIHdpdGggdGhlIHJlY29yZGluZyBpbiB0aGUge0BsaW5rIFJlY29yZGluZ0FjdGl2aXR5Q29tcG9uZW50fS5cbiAqXG4gKiBEZWZhdWx0OiBgW11gXG4gKlxuICogSXQgY2FuIGJlIHVzZWQgaW4gdGhlIHBhcmVudCBlbGVtZW50IHtAbGluayBWaWRlb2NvbmZlcmVuY2VDb21wb25lbnR9IHNwZWNpZnlpbmcgdGhlIG5hbWUgb2YgdGhlIGByZWNvcmRpbmdBY3Rpdml0eWAgY29tcG9uZW50OlxuICpcbiAqIEBleGFtcGxlXG4gKiA8b3YtdmlkZW9jb25mZXJlbmNlIFtyZWNvcmRpbmdBY3Rpdml0eVJlY29yZGluZ0Vycm9yXT1cImVycm9yXCI+PC9vdi12aWRlb2NvbmZlcmVuY2U+XG4gKlxuICogXFxcbiAqIEFuZCBpdCBhbHNvIGNhbiBiZSB1c2VkIGluIHRoZSB7QGxpbmsgUmVjb3JkaW5nQWN0aXZpdHlDb21wb25lbnR9LlxuICogQGV4YW1wbGVcbiAqIDxvdi1yZWNvcmRpbmctYWN0aXZpdHkgW3JlY29yZGluZ0Vycm9yXT1cImVycm9yXCI+PC9vdi1yZWNvcmRpbmctYWN0aXZpdHk+XG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ292LXZpZGVvY29uZmVyZW5jZVtyZWNvcmRpbmdBY3Rpdml0eVJlY29yZGluZ0Vycm9yXSwgb3YtcmVjb3JkaW5nLWFjdGl2aXR5W3JlY29yZGluZ0Vycm9yXSdcbn0pXG5leHBvcnQgY2xhc3MgUmVjb3JkaW5nQWN0aXZpdHlSZWNvcmRpbmdFcnJvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cdEBJbnB1dCgpIHNldCByZWNvcmRpbmdBY3Rpdml0eVJlY29yZGluZ0Vycm9yKHZhbHVlOiBhbnkpIHtcblx0XHR0aGlzLnJlY29yZGluZ0Vycm9yVmFsdWUgPSB2YWx1ZTtcblx0XHR0aGlzLnVwZGF0ZSh0aGlzLnJlY29yZGluZ0Vycm9yVmFsdWUpO1xuXHR9XG5cdEBJbnB1dCgpIHNldCByZWNvcmRpbmdFcnJvcih2YWx1ZTogYW55KSB7XG5cdFx0dGhpcy5yZWNvcmRpbmdFcnJvclZhbHVlID0gdmFsdWU7XG5cdFx0dGhpcy51cGRhdGUodGhpcy5yZWNvcmRpbmdFcnJvclZhbHVlKTtcblx0fVxuXG5cdHJlY29yZGluZ0Vycm9yVmFsdWU6IGFueSA9IG51bGw7XG5cblx0Y29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgbGliU2VydmljZTogT3BlblZpZHVBbmd1bGFyQ29uZmlnU2VydmljZSkge31cblxuXHRuZ0FmdGVyVmlld0luaXQoKSB7XG5cdFx0dGhpcy51cGRhdGUodGhpcy5yZWNvcmRpbmdFcnJvclZhbHVlKTtcblx0fVxuXHRuZ09uRGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLmNsZWFyKCk7XG5cdH1cblx0Y2xlYXIoKSB7XG5cdFx0dGhpcy5yZWNvcmRpbmdFcnJvclZhbHVlID0gbnVsbDtcblx0XHR0aGlzLnVwZGF0ZShudWxsKTtcblx0fVxuXG5cdHVwZGF0ZSh2YWx1ZTogYW55KSB7XG5cdFx0aWYgKHRoaXMubGliU2VydmljZS5yZWNvcmRpbmdFcnJvci5nZXRWYWx1ZSgpICE9PSB2YWx1ZSkge1xuXHRcdFx0dGhpcy5saWJTZXJ2aWNlLnJlY29yZGluZ0Vycm9yLm5leHQodmFsdWUpO1xuXHRcdH1cblx0fVxufVxuIl19