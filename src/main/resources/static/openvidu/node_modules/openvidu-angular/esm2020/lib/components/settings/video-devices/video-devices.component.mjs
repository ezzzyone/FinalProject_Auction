import { Component, EventEmitter, Output } from '@angular/core';
import { PanelType } from '../../../models/panel.model';
import { VideoType } from '../../../models/video-type.model';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/openvidu/openvidu.service";
import * as i2 from "../../../services/panel/panel.service";
import * as i3 from "../../../services/storage/storage.service";
import * as i4 from "../../../services/device/device.service";
import * as i5 from "../../../services/participant/participant.service";
import * as i6 from "../../../services/virtual-background/virtual-background.service";
import * as i7 from "@angular/common";
import * as i8 from "@angular/material/button";
import * as i9 from "@angular/material/icon";
import * as i10 from "@angular/material/form-field";
import * as i11 from "@angular/material/tooltip";
import * as i12 from "@angular/material/select";
import * as i13 from "@angular/material/core";
import * as i14 from "../../../pipes/translate.pipe";
/**
 * @internal
 */
export class VideoDevicesComponent {
    constructor(openviduService, panelService, storageSrv, deviceSrv, participantService, backgroundService) {
        this.openviduService = openviduService;
        this.panelService = panelService;
        this.storageSrv = storageSrv;
        this.deviceSrv = deviceSrv;
        this.participantService = participantService;
        this.backgroundService = backgroundService;
        this.onDeviceSelectorClicked = new EventEmitter();
        this.onVideoMutedClicked = new EventEmitter();
        this.cameras = [];
    }
    async ngOnInit() {
        this.subscribeToParticipantMediaProperties();
        if (this.openviduService.isSessionConnected()) {
            // Updating devices only with session connected
            await this.deviceSrv.refreshDevices();
        }
        this.hasVideoDevices = this.deviceSrv.hasVideoDeviceAvailable();
        if (this.hasVideoDevices) {
            this.cameras = this.deviceSrv.getCameras();
            this.cameraSelected = this.deviceSrv.getCameraSelected();
        }
        if (this.openviduService.isSessionConnected()) {
            this.isVideoMuted = !this.participantService.getLocalParticipant().isCameraVideoActive();
        }
        else {
            this.isVideoMuted = this.deviceSrv.isVideoMuted();
        }
    }
    async ngOnDestroy() {
        this.cameras = [];
        if (this.localParticipantSubscription)
            this.localParticipantSubscription.unsubscribe();
    }
    async toggleCam() {
        this.videoMuteChanging = true;
        const publish = this.isVideoMuted;
        await this.openviduService.publishVideo(publish);
        if (this.isVideoMuted && this.panelService.isExternalPanelOpened()) {
            this.panelService.togglePanel(PanelType.BACKGROUND_EFFECTS);
        }
        this.videoMuteChanging = false;
        this.onVideoMutedClicked.emit(publish);
    }
    async onCameraSelected(event) {
        const videoSource = event?.value;
        // Is New deviceId different from the old one?
        if (this.deviceSrv.needUpdateVideoTrack(videoSource)) {
            const mirror = this.deviceSrv.cameraNeedsMirror(videoSource);
            // Reapply Virtual Background to new Publisher if necessary
            const backgroundSelected = this.backgroundService.backgroundSelected.getValue();
            const isBackgroundApplied = this.backgroundService.isBackgroundApplied();
            if (isBackgroundApplied) {
                await this.backgroundService.removeBackground();
            }
            const pp = { videoSource, audioSource: false, mirror };
            await this.openviduService.replaceTrack(VideoType.CAMERA, pp);
            if (isBackgroundApplied) {
                const bgSelected = this.backgroundService.backgrounds.find((b) => b.id === backgroundSelected);
                if (bgSelected) {
                    await this.backgroundService.applyBackground(bgSelected);
                }
            }
            this.deviceSrv.setCameraSelected(videoSource);
            this.cameraSelected = this.deviceSrv.getCameraSelected();
        }
    }
    subscribeToParticipantMediaProperties() {
        this.localParticipantSubscription = this.participantService.localParticipantObs.subscribe((p) => {
            if (p) {
                this.isVideoMuted = !p.isCameraVideoActive();
                this.storageSrv.setVideoMuted(this.isVideoMuted);
            }
        });
    }
}
VideoDevicesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: VideoDevicesComponent, deps: [{ token: i1.OpenViduService }, { token: i2.PanelService }, { token: i3.StorageService }, { token: i4.DeviceService }, { token: i5.ParticipantService }, { token: i6.VirtualBackgroundService }], target: i0.ɵɵFactoryTarget.Component });
VideoDevicesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: VideoDevicesComponent, selector: "ov-video-devices-select", outputs: { onDeviceSelectorClicked: "onDeviceSelectorClicked", onVideoMutedClicked: "onVideoMutedClicked" }, ngImport: i0, template: "<div class=\"device-container-element\">\n\t<button\n\t\tmat-icon-button\n\t\tid=\"camera-button\"\n\t\t[disabled]=\"!hasVideoDevices || videoMuteChanging\"\n\t\t[class.warn-btn]=\"isVideoMuted\"\n\t\t(click)=\"toggleCam()\"\n\t>\n\t\t<mat-icon\n\t\t\t*ngIf=\"!isVideoMuted\"\n\t\t\t[matTooltipDisabled]=\"!hasVideoDevices\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.MUTE_VIDEO' | translate }}\"\n\t\t\tid=\"videocam\"\n\t\t>\n\t\t\tvideocam\n\t\t</mat-icon>\n\t\t<mat-icon\n\t\t\t*ngIf=\"isVideoMuted\"\n\t\t\t[matTooltipDisabled]=\"!hasVideoDevices\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.UNMUTE_VIDEO' | translate }}\"\n\t\t\tid=\"videocam_off\"\n\t\t>\n\t\t\tvideocam_off\n\t\t</mat-icon>\n\t</button>\n\t<mat-form-field>\n\t\t<mat-label *ngIf=\"hasVideoDevices\">{{ 'PREJOIN.VIDEO_DEVICE' | translate }}</mat-label>\n\t\t<mat-label *ngIf=\"!hasVideoDevices\">{{ 'PREJOIN.NO_VIDEO_DEVICE' | translate }}</mat-label>\n\t\t<mat-select\n\t\t\t[disabled]=\"isVideoMuted || !hasVideoDevices\"\n\t\t\t[value]=\"cameraSelected?.device\"\n\t\t\t(click)=\"onDeviceSelectorClicked.emit()\"\n\t\t\t(selectionChange)=\"onCameraSelected($event)\"\n\t\t>\n\t\t\t<mat-option *ngFor=\"let camera of cameras\" [value]=\"camera.device\">\n\t\t\t\t{{ camera.label }}\n\t\t\t</mat-option>\n\t\t</mat-select>\n\t</mat-form-field>\n</div>\n", styles: ["#camera-button{border-radius:var(--ov-buttons-radius)}.device-container-element mat-form-field{width:100%;margin-top:10px;color:#000}.device-container-element button{margin:auto 10px auto auto}.device-container-element{display:flex}.warn-btn{color:var(--ov-text-color);background-color:var(--ov-warn-color)!important}\n"], dependencies: [{ kind: "directive", type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i8.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i9.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i10.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i10.MatLabel, selector: "mat-label" }, { kind: "directive", type: i11.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "component", type: i12.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { kind: "component", type: i13.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "pipe", type: i14.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: VideoDevicesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-video-devices-select', template: "<div class=\"device-container-element\">\n\t<button\n\t\tmat-icon-button\n\t\tid=\"camera-button\"\n\t\t[disabled]=\"!hasVideoDevices || videoMuteChanging\"\n\t\t[class.warn-btn]=\"isVideoMuted\"\n\t\t(click)=\"toggleCam()\"\n\t>\n\t\t<mat-icon\n\t\t\t*ngIf=\"!isVideoMuted\"\n\t\t\t[matTooltipDisabled]=\"!hasVideoDevices\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.MUTE_VIDEO' | translate }}\"\n\t\t\tid=\"videocam\"\n\t\t>\n\t\t\tvideocam\n\t\t</mat-icon>\n\t\t<mat-icon\n\t\t\t*ngIf=\"isVideoMuted\"\n\t\t\t[matTooltipDisabled]=\"!hasVideoDevices\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.UNMUTE_VIDEO' | translate }}\"\n\t\t\tid=\"videocam_off\"\n\t\t>\n\t\t\tvideocam_off\n\t\t</mat-icon>\n\t</button>\n\t<mat-form-field>\n\t\t<mat-label *ngIf=\"hasVideoDevices\">{{ 'PREJOIN.VIDEO_DEVICE' | translate }}</mat-label>\n\t\t<mat-label *ngIf=\"!hasVideoDevices\">{{ 'PREJOIN.NO_VIDEO_DEVICE' | translate }}</mat-label>\n\t\t<mat-select\n\t\t\t[disabled]=\"isVideoMuted || !hasVideoDevices\"\n\t\t\t[value]=\"cameraSelected?.device\"\n\t\t\t(click)=\"onDeviceSelectorClicked.emit()\"\n\t\t\t(selectionChange)=\"onCameraSelected($event)\"\n\t\t>\n\t\t\t<mat-option *ngFor=\"let camera of cameras\" [value]=\"camera.device\">\n\t\t\t\t{{ camera.label }}\n\t\t\t</mat-option>\n\t\t</mat-select>\n\t</mat-form-field>\n</div>\n", styles: ["#camera-button{border-radius:var(--ov-buttons-radius)}.device-container-element mat-form-field{width:100%;margin-top:10px;color:#000}.device-container-element button{margin:auto 10px auto auto}.device-container-element{display:flex}.warn-btn{color:var(--ov-text-color);background-color:var(--ov-warn-color)!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.OpenViduService }, { type: i2.PanelService }, { type: i3.StorageService }, { type: i4.DeviceService }, { type: i5.ParticipantService }, { type: i6.VirtualBackgroundService }]; }, propDecorators: { onDeviceSelectorClicked: [{
                type: Output
            }], onVideoMutedClicked: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,