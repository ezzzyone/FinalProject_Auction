import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, HostListener, Output, TemplateRef, ViewChild } from '@angular/core';
import { skip } from 'rxjs';
import { MatMenuTrigger } from '@angular/material/menu';
import { ToolbarAdditionalButtonsDirective, ToolbarAdditionalPanelButtonsDirective } from '../../directives/template/openvidu-angular.directive';
import { PanelType } from '../../models/panel.model';
import { OpenViduRole } from '../../models/participant.model';
import { RecordingStatus } from '../../models/recording.model';
import * as i0 from "@angular/core";
import * as i1 from "../../services/document/document.service";
import * as i2 from "../../services/chat/chat.service";
import * as i3 from "../../services/panel/panel.service";
import * as i4 from "../../services/participant/participant.service";
import * as i5 from "../../services/openvidu/openvidu.service";
import * as i6 from "../../services/device/device.service";
import * as i7 from "../../services/action/action.service";
import * as i8 from "../../services/logger/logger.service";
import * as i9 from "../../services/layout/layout.service";
import * as i10 from "../../services/config/openvidu-angular.config.service";
import * as i11 from "../../services/platform/platform.service";
import * as i12 from "../../services/recording/recording.service";
import * as i13 from "../../services/translate/translate.service";
import * as i14 from "../../services/storage/storage.service";
import * as i15 from "@angular/common";
import * as i16 from "@angular/material/button";
import * as i17 from "@angular/material/toolbar";
import * as i18 from "@angular/material/icon";
import * as i19 from "@angular/material/tooltip";
import * as i20 from "@angular/material/badge";
import * as i21 from "@angular/flex-layout/flex";
import * as i22 from "@angular/material/menu";
import * as i23 from "@angular/material/divider";
import * as i24 from "../../directives/api/internals.directive";
import * as i25 from "../../pipes/translate.pipe";
/**
 *
 * The **ToolbarComponent** is hosted inside of the {@link VideoconferenceComponent}.
 * It is in charge of displaying the participants controlls for handling the media, panels and more videoconference features.
 *
 * <div class="custom-table-container">
 * <div>
 *  <h3>API Directives</h3>
 *
 * This component allows us to show or hide certain HTML elements with the following {@link https://angular.io/guide/attribute-directives Angular attribute directives}
 * with the aim of fully customizing the ToolbarComponent.
 *
 * | **Name**                  | **Type**  | **Reference**                                   |
 * | :----------------------------: | :-------: | :---------------------------------------------: |
 * | **screenshareButton**       | `boolean` | {@link ToolbarScreenshareButtonDirective}       |
 * | **fullscreenButton**        | `boolean` | {@link ToolbarFullscreenButtonDirective}        |
 * | **backgroundEffectsButton** | `boolean` | {@link ToolbarBackgroundEffectsButtonDirective} |
 * | **leaveButton**             | `boolean` | {@link ToolbarLeaveButtonDirective}             |
 * | **chatPanelButton**         | `boolean` | {@link ToolbarChatPanelButtonDirective}         |
 * | **participantsPanelButton** | `boolean` | {@link ToolbarParticipantsPanelButtonDirective} |
 * | **displayLogo**             | `boolean` | {@link ToolbarDisplayLogoDirective}             |
 * | **displaySessionName**      | `boolean` | {@link ToolbarDisplaySessionNameDirective}      |
 *
 * <p class="component-link-text">
 * <span class="italic">See all {@link ApiDirectiveModule API Directives}</span>
 * </p>
 *
 * </div>
 * <div>
 *
 * <h3>OpenVidu Angular Directives</h3>
 *
 * The ToolbarComponent can be replaced with a custom component. It provides us the following {@link https://angular.io/guide/structural-directives Angular structural directives}
 * for doing this.
 *
 * |            **Directive**           |                 **Reference**                 |
 * |:----------------------------------:|:---------------------------------------------:|
 * |           ***ovToolbar**           |            {@link ToolbarDirective}           |
 *
 * </br>
 *
 * It is also providing us a way to **add additional buttons** to the default toolbar.
 * It will recognise the following directive in a child element.
 *
 * |            **Directive**           |                 **Reference**                 |
 * |:----------------------------------:|:---------------------------------------------:|
 * |   ***ovToolbarAdditionalButtons**   |   {@link ToolbarAdditionalButtonsDirective}   |
 * |***ovToolbarAdditionalPanelButtons**   |   {@link ToolbarAdditionalPanelButtonsDirective}   |
 *
 * <p class="component-link-text">
 * 	<span class="italic">See all {@link OpenViduAngularDirectiveModule OpenVidu Angular Directives}</span>
 * </p>
 * </div>
 * </div>
 */
export class ToolbarComponent {
    /**
     * @ignore
     */
    constructor(documentService, chatService, panelService, participantService, openviduService, oVDevicesService, actionService, loggerSrv, layoutService, cd, libService, platformService, recordingService, translateService, storageSrv) {
        this.documentService = documentService;
        this.chatService = chatService;
        this.panelService = panelService;
        this.participantService = participantService;
        this.openviduService = openviduService;
        this.oVDevicesService = oVDevicesService;
        this.actionService = actionService;
        this.loggerSrv = loggerSrv;
        this.layoutService = layoutService;
        this.cd = cd;
        this.libService = libService;
        this.platformService = platformService;
        this.recordingService = recordingService;
        this.translateService = translateService;
        this.storageSrv = storageSrv;
        /**
         * Provides event notifications that fire when leave button has been clicked.
         */
        this.onLeaveButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when camera toolbar button has been clicked.
         */
        this.onCameraButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when microphone toolbar button has been clicked.
         */
        this.onMicrophoneButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when fullscreen toolbar button has been clicked.
         */
        this.onFullscreenButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when screenshare toolbar button has been clicked.
         */
        this.onScreenshareButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when participants panel button has been clicked.
         */
        this.onParticipantsPanelButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when chat panel button has been clicked.
         */
        this.onChatPanelButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when activities panel button has been clicked.
         */
        this.onActivitiesPanelButtonClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when start recording button has been clicked.
         */
        this.onStartRecordingClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when stop recording button has been clicked.
         */
        this.onStopRecordingClicked = new EventEmitter();
        /**
         * @ignore
         */
        this.unreadMessages = 0;
        /**
         * @ignore
         */
        this.messageList = [];
        /**
         * @ignore
         */
        this.isFullscreenActive = false;
        /**
         * @ignore
         */
        this.isChatOpened = false;
        /**
         * @ignore
         */
        this.isParticipantsOpened = false;
        /**
         * @ignore
         */
        this.isActivitiesOpened = false;
        /**
         * @ignore
         */
        this.isMinimal = false;
        /**
         * @ignore
         */
        this.showScreenshareButton = true;
        /**
         * @ignore
         */
        this.showFullscreenButton = true;
        /**
         * @ignore
         */
        this.showBackgroundEffectsButton = true;
        /**
         * @ignore
         */
        this.showLeaveButton = true;
        /**
         * @ignore
         */
        this.showRecordingButton = true;
        /**
         * @ignore
         */
        this.showSettingsButton = true;
        /**
         * @ignore
         */
        this.showMoreOptionsButton = true;
        /**
         * @ignore
         */
        this.showParticipantsPanelButton = true;
        /**
         * @ignore
         */
        this.showActivitiesPanelButton = true;
        /**
         * @ignore
         */
        this.showChatPanelButton = true;
        /**
         * @ignore
         */
        this.showLogo = true;
        /**
         * @ignore
         */
        this.showSessionName = true;
        /**
         * @ignore
         */
        this.showCaptionsButton = true;
        /**
         * @ignore
         */
        this.videoMuteChanging = false;
        /**
         * @ignore
         */
        this.recordingStatus = RecordingStatus.STOPPED;
        /**
         * @ignore
         */
        this._recordingStatus = RecordingStatus;
        /**
         * @ignore
         */
        this.isSessionCreator = false;
        this.currentWindowHeight = window.innerHeight;
        this.log = this.loggerSrv.get('ToolbarComponent');
    }
    /**
     * @ignore
     */
    set externalAdditionalButtons(externalAdditionalButtons) {
        // This directive will has value only when ADDITIONAL BUTTONS component tagget with '*ovToolbarAdditionalButtons' directive
        // is inside of the TOOLBAR component tagged with '*ovToolbar' directive
        if (externalAdditionalButtons) {
            this.toolbarAdditionalButtonsTemplate = externalAdditionalButtons.template;
        }
    }
    /**
     * @ignore
     */
    set externalAdditionalPanelButtons(externalAdditionalPanelButtons) {
        // This directive will has value only when ADDITIONAL PANEL BUTTONS component tagget with '*ovToolbarAdditionalPanelButtons' directive
        // is inside of the TOOLBAR component tagged with '*ovToolbar' directive
        if (externalAdditionalPanelButtons) {
            this.toolbarAdditionalPanelButtonsTemplate = externalAdditionalPanelButtons.template;
        }
    }
    /**
     * @ignore
     */
    sizeChange(event) {
        if (this.currentWindowHeight >= window.innerHeight) {
            // The user has exit the fullscreen mode
            this.isFullscreenActive = false;
            this.currentWindowHeight = window.innerHeight;
        }
    }
    /**
     * @ignore
     */
    keyDown(event) {
        if (event.key === 'F11') {
            event.preventDefault();
            this.toggleFullscreen();
            this.currentWindowHeight = window.innerHeight;
            return false;
        }
    }
    async ngOnInit() {
        this.subscribeToToolbarDirectives();
        this.hasVideoDevices = this.oVDevicesService.hasVideoDeviceAvailable();
        this.hasAudioDevices = this.oVDevicesService.hasAudioDeviceAvailable();
        this.session = this.openviduService.getWebcamSession();
        this.subscribeToUserMediaProperties();
        this.subscribeToReconnection();
        this.subscribeToMenuToggling();
        this.subscribeToChatMessages();
        this.subscribeToRecordingStatus();
        this.subscribeToScreenSize();
        this.subscribeToCaptionsToggling();
    }
    ngAfterViewInit() {
        // Sometimes the connection is undefined so we have to check the role when the mat menu is opened
        this.menuTrigger?.menuOpened.subscribe(() => {
            this.isSessionCreator = this.participantService.getMyRole() === OpenViduRole.MODERATOR;
        });
    }
    ngOnDestroy() {
        if (this.panelTogglingSubscription)
            this.panelTogglingSubscription.unsubscribe();
        if (this.chatMessagesSubscription)
            this.chatMessagesSubscription.unsubscribe();
        if (this.localParticipantSubscription)
            this.localParticipantSubscription.unsubscribe();
        if (this.screenshareButtonSub)
            this.screenshareButtonSub.unsubscribe();
        if (this.fullscreenButtonSub)
            this.fullscreenButtonSub.unsubscribe();
        if (this.backgroundEffectsButtonSub)
            this.backgroundEffectsButtonSub.unsubscribe();
        if (this.leaveButtonSub)
            this.leaveButtonSub.unsubscribe();
        if (this.recordingButtonSub)
            this.recordingButtonSub.unsubscribe();
        if (this.participantsPanelButtonSub)
            this.participantsPanelButtonSub.unsubscribe();
        if (this.chatPanelButtonSub)
            this.chatPanelButtonSub.unsubscribe();
        if (this.displayLogoSub)
            this.displayLogoSub.unsubscribe();
        if (this.displaySessionNameSub)
            this.displaySessionNameSub.unsubscribe();
        if (this.minimalSub)
            this.minimalSub.unsubscribe();
        if (this.activitiesPanelButtonSub)
            this.activitiesPanelButtonSub.unsubscribe();
        if (this.recordingSubscription)
            this.recordingSubscription.unsubscribe();
        if (this.screenSizeSub)
            this.screenSizeSub.unsubscribe();
        if (this.settingsButtonSub)
            this.settingsButtonSub.unsubscribe();
        if (this.captionsSubs)
            this.captionsSubs.unsubscribe();
    }
    /**
     * @ignore
     */
    async toggleMicrophone() {
        this.onMicrophoneButtonClicked.emit();
        try {
            await this.openviduService.publishAudio(!this.isAudioActive);
        }
        catch (error) {
            this.log.e('There was an error toggling microphone:', error.code, error.message);
            this.actionService.openDialog(this.translateService.translate('ERRORS.TOGGLE_MICROPHONE'), error?.error || error?.message || error);
        }
    }
    /**
     * @ignore
     */
    async toggleCamera() {
        this.videoMuteChanging = true;
        this.onCameraButtonClicked.emit();
        try {
            const publishVideo = !this.participantService.isMyVideoActive();
            if (this.panelService.isExternalPanelOpened() && !publishVideo) {
                this.panelService.togglePanel(PanelType.BACKGROUND_EFFECTS);
            }
            await this.openviduService.publishVideo(publishVideo);
        }
        catch (error) {
            this.log.e('There was an error toggling camera:', error.code, error.message);
            this.actionService.openDialog(this.translateService.translate('ERRORS.TOGGLE_CAMERA'), error?.error || error?.message || error);
        }
        this.videoMuteChanging = false;
    }
    /**
     * @ignore
     */
    async toggleScreenShare() {
        this.onScreenshareButtonClicked.emit();
        try {
            await this.openviduService.toggleScreenshare();
        }
        catch (error) {
            this.log.e('There was an error toggling screen share', error.code, error.message);
            if (error && error.name === 'SCREEN_SHARING_NOT_SUPPORTED') {
                this.actionService.openDialog(this.translateService.translate('ERRORS.SCREEN_SHARING'), this.translateService.translate('ERRORS.SCREEN_SUPPORT'));
            }
        }
    }
    /**
     * @ignore
     */
    leaveSession() {
        this.log.d('Leaving session...');
        this.openviduService.disconnect();
        this.onLeaveButtonClicked.emit();
    }
    /**
     * @ignore
     */
    toggleRecording() {
        if (this.recordingStatus === RecordingStatus.STARTED) {
            this.log.d('Stopping recording');
            this.onStopRecordingClicked.emit();
            this.recordingService.updateStatus(RecordingStatus.STOPPING);
        }
        else if (this.recordingStatus === RecordingStatus.STOPPED) {
            this.onStartRecordingClicked.emit();
            this.recordingService.updateStatus(RecordingStatus.STARTING);
            if (this.showActivitiesPanelButton && !this.isActivitiesOpened) {
                this.toggleActivitiesPanel('recording');
            }
        }
    }
    /**
     * @ignore
     */
    toggleBackgroundEffects() {
        if (this.openviduService.isOpenViduPro()) {
            this.panelService.togglePanel(PanelType.BACKGROUND_EFFECTS);
        }
        else {
            this.actionService.openProFeatureDialog(this.translateService.translate('PANEL.BACKGROUND.TITLE'), this.translateService.translate('PANEL.PRO_FEATURE'));
        }
    }
    /**
     * @ignore
     */
    toggleCaptions() {
        if (this.openviduService.isOpenViduPro()) {
            this.layoutService.toggleCaptions();
        }
        else {
            this.actionService.openProFeatureDialog(this.translateService.translate('PANEL.SETTINGS.CAPTIONS'), this.translateService.translate('PANEL.PRO_FEATURE'));
        }
    }
    /**
     * @ignore
     */
    toggleSettings() {
        this.panelService.togglePanel(PanelType.SETTINGS);
    }
    /**
     * @ignore
     */
    toggleParticipantsPanel() {
        this.onParticipantsPanelButtonClicked.emit();
        this.panelService.togglePanel(PanelType.PARTICIPANTS);
    }
    /**
     * @ignore
     */
    toggleChatPanel() {
        this.onChatPanelButtonClicked.emit();
        this.panelService.togglePanel(PanelType.CHAT);
    }
    /**
     * @ignore
     */
    toggleFullscreen() {
        this.isFullscreenActive = !this.isFullscreenActive;
        this.documentService.toggleFullscreen('session-container');
        this.onFullscreenButtonClicked.emit();
    }
    toggleActivitiesPanel(expandPanel) {
        this.onActivitiesPanelButtonClicked.emit();
        this.panelService.togglePanel(PanelType.ACTIVITIES, expandPanel);
    }
    subscribeToReconnection() {
        this.session.on('reconnecting', () => {
            if (this.panelService.isPanelOpened()) {
                this.panelService.closePanel();
            }
            this.isConnectionLost = true;
        });
        this.session.on('reconnected', () => {
            this.isConnectionLost = false;
        });
    }
    subscribeToMenuToggling() {
        this.panelTogglingSubscription = this.panelService.panelOpenedObs.subscribe((ev) => {
            this.isChatOpened = ev.opened && ev.type === PanelType.CHAT;
            this.isParticipantsOpened = ev.opened && ev.type === PanelType.PARTICIPANTS;
            this.isActivitiesOpened = ev.opened && ev.type === PanelType.ACTIVITIES;
            if (this.isChatOpened) {
                this.unreadMessages = 0;
            }
            this.cd.markForCheck();
        });
    }
    subscribeToChatMessages() {
        this.chatMessagesSubscription = this.chatService.messagesObs.pipe(skip(1)).subscribe((messages) => {
            if (!this.panelService.isChatPanelOpened()) {
                this.unreadMessages++;
            }
            this.messageList = messages;
            this.cd.markForCheck();
        });
    }
    subscribeToUserMediaProperties() {
        this.localParticipantSubscription = this.participantService.localParticipantObs.subscribe((p) => {
            if (p) {
                this.isWebcamVideoActive = p.isCameraVideoActive();
                this.isAudioActive = p.hasAudioActive();
                this.isScreenShareActive = p.isScreenActive();
                this.isSessionCreator = p.getRole() === OpenViduRole.MODERATOR;
                this.storageSrv.setAudioMuted(!this.isAudioActive);
                this.storageSrv.setVideoMuted(!this.isWebcamVideoActive);
                this.cd.markForCheck();
            }
        });
    }
    subscribeToRecordingStatus() {
        this.recordingSubscription = this.recordingService.recordingStatusObs
            .pipe(skip(1))
            .subscribe((ev) => {
            this.recordingStatus = ev.info.status;
            if (ev.time) {
                this.recordingTime = ev.time;
            }
            this.cd.markForCheck();
        });
    }
    subscribeToToolbarDirectives() {
        this.minimalSub = this.libService.minimalObs.subscribe((value) => {
            this.isMinimal = value;
            this.cd.markForCheck();
        });
        this.screenshareButtonSub = this.libService.screenshareButtonObs.subscribe((value) => {
            this.showScreenshareButton = value && !this.platformService.isMobile();
            this.cd.markForCheck();
        });
        this.fullscreenButtonSub = this.libService.fullscreenButtonObs.subscribe((value) => {
            this.showFullscreenButton = value;
            this.checkDisplayMoreOptions();
            this.cd.markForCheck();
        });
        this.leaveButtonSub = this.libService.leaveButtonObs.subscribe((value) => {
            this.showLeaveButton = value;
            this.cd.markForCheck();
        });
        this.recordingButtonSub = this.libService.recordingButtonObs.subscribe((value) => {
            this.showRecordingButton = value;
            this.checkDisplayMoreOptions();
            this.cd.markForCheck();
        });
        this.settingsButtonSub = this.libService.toolbarSettingsButtonObs.subscribe((value) => {
            this.showSettingsButton = value;
            this.checkDisplayMoreOptions();
            this.cd.markForCheck();
        });
        this.chatPanelButtonSub = this.libService.chatPanelButtonObs.subscribe((value) => {
            this.showChatPanelButton = value;
            this.cd.markForCheck();
        });
        this.participantsPanelButtonSub = this.libService.participantsPanelButtonObs.subscribe((value) => {
            this.showParticipantsPanelButton = value;
            this.cd.markForCheck();
        });
        this.activitiesPanelButtonSub = this.libService.activitiesPanelButtonObs.subscribe((value) => {
            this.showActivitiesPanelButton = value;
            this.cd.markForCheck();
        });
        this.backgroundEffectsButtonSub = this.libService.backgroundEffectsButton.subscribe((value) => {
            this.showBackgroundEffectsButton = value;
            this.checkDisplayMoreOptions();
            this.cd.markForCheck();
        });
        this.displayLogoSub = this.libService.displayLogoObs.subscribe((value) => {
            this.showLogo = value;
            this.cd.markForCheck();
        });
        this.displaySessionNameSub = this.libService.displaySessionNameObs.subscribe((value) => {
            this.showSessionName = value;
            this.cd.markForCheck();
        });
        this.captionsSubs = this.libService.captionsButtonObs.subscribe((value) => {
            this.showCaptionsButton = value;
            this.cd.markForCheck();
        });
    }
    subscribeToScreenSize() {
        this.screenSizeSub = this.documentService.screenSizeObs.subscribe((change) => {
            this.screenSize = change[0].mqAlias;
            this.cd.markForCheck();
        });
    }
    subscribeToCaptionsToggling() {
        this.captionsSubs = this.layoutService.captionsTogglingObs.subscribe((value) => {
            this.captionsEnabled = value;
            this.cd.markForCheck();
        });
    }
    checkDisplayMoreOptions() {
        this.showMoreOptionsButton =
            this.showFullscreenButton || this.showBackgroundEffectsButton || this.showRecordingButton || this.showSettingsButton;
    }
}
ToolbarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarComponent, deps: [{ token: i1.DocumentService }, { token: i2.ChatService }, { token: i3.PanelService }, { token: i4.ParticipantService }, { token: i5.OpenViduService }, { token: i6.DeviceService }, { token: i7.ActionService }, { token: i8.LoggerService }, { token: i9.LayoutService }, { token: i0.ChangeDetectorRef }, { token: i10.OpenViduAngularConfigService }, { token: i11.PlatformService }, { token: i12.RecordingService }, { token: i13.TranslateService }, { token: i14.StorageService }], target: i0.ɵɵFactoryTarget.Component });
ToolbarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarComponent, selector: "ov-toolbar", outputs: { onLeaveButtonClicked: "onLeaveButtonClicked", onCameraButtonClicked: "onCameraButtonClicked", onMicrophoneButtonClicked: "onMicrophoneButtonClicked", onFullscreenButtonClicked: "onFullscreenButtonClicked", onScreenshareButtonClicked: "onScreenshareButtonClicked", onParticipantsPanelButtonClicked: "onParticipantsPanelButtonClicked", onChatPanelButtonClicked: "onChatPanelButtonClicked", onActivitiesPanelButtonClicked: "onActivitiesPanelButtonClicked", onStartRecordingClicked: "onStartRecordingClicked", onStopRecordingClicked: "onStopRecordingClicked" }, host: { listeners: { "window:resize": "sizeChange($event)", "document:keydown": "keyDown($event)" } }, queries: [{ propertyName: "toolbarAdditionalButtonsTemplate", first: true, predicate: ["toolbarAdditionalButtons"], descendants: true, read: TemplateRef }, { propertyName: "toolbarAdditionalPanelButtonsTemplate", first: true, predicate: ["toolbarAdditionalPanelButtons"], descendants: true, read: TemplateRef }, { propertyName: "externalAdditionalButtons", first: true, predicate: ToolbarAdditionalButtonsDirective, descendants: true }, { propertyName: "externalAdditionalPanelButtons", first: true, predicate: ToolbarAdditionalPanelButtonsDirective, descendants: true }], viewQueries: [{ propertyName: "menuTrigger", first: true, predicate: MatMenuTrigger, descendants: true }], ngImport: i0, template: "<mat-toolbar id=\"toolbar\" role=\"heading\" fxLayout fxLayoutAlign=\"center\" fxLayoutGap=\"40px\">\n\t<div fxFlex=\"20%\" fxLayoutAlign=\"start center\" id=\"info-container\" *ngIf=\"screenSize !== 'xs'\">\n\t\t<div>\n\t\t\t<img *ngIf=\"!isMinimal && showLogo\" id=\"branding-logo\" src=\"assets/images/logo.png\" ovLogo />\n\t\t\t<div id=\"session-info-container\" [class.colapsed]=\"recordingStatus === _recordingStatus.STARTED\">\n\t\t\t\t<span id=\"session-name\" *ngIf=\"!isMinimal && session && session.sessionId && showSessionName\">{{ session.sessionId }}</span>\n\t\t\t\t<div *ngIf=\"recordingStatus === _recordingStatus.STARTED\" id=\"recording-tag\" class=\"recording-tag\">\n\t\t\t\t\t<mat-icon class=\"blink\">radio_button_checked</mat-icon>\n\t\t\t\t\t<span class=\"blink\">REC</span>\n\t\t\t\t\t<span> | {{ recordingTime | date: 'H:mm:ss' }}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div fxFlex=\"60%\" fxFlexOrder=\"2\" fxLayoutAlign=\"center center\" id=\"media-buttons-container\">\n\t\t<!-- Microphone button -->\n\t\t<button\n\t\t\tid=\"mic-btn\"\n\t\t\tmat-icon-button\n\t\t\t(click)=\"toggleMicrophone()\"\n\t\t\t[disabled]=\"isConnectionLost || !hasAudioDevices\"\n\t\t\t[class.warn-btn]=\"!isAudioActive\"\n\t\t>\n\t\t\t<mat-icon\n\t\t\t\t*ngIf=\"isAudioActive\"\n\t\t\t\t[matTooltipDisabled]=\"!hasAudioDevices\"\n\t\t\t\tmatTooltip=\"{{ 'TOOLBAR.MUTE_AUDIO' | translate }}\"\n\t\t\t\tid=\"mic\"\n\t\t\t>\n\t\t\t\tmic\n\t\t\t</mat-icon>\n\t\t\t<mat-icon\n\t\t\t\t*ngIf=\"!isAudioActive\"\n\t\t\t\t[matTooltipDisabled]=\"!hasAudioDevices\"\n\t\t\t\tmatTooltip=\"{{ 'TOOLBAR.UNMUTE_AUDIO' | translate }}\"\n\t\t\t\tid=\"mic_off\"\n\t\t\t>\n\t\t\t\tmic_off\n\t\t\t</mat-icon>\n\t\t</button>\n\n\t\t<!-- Camera button -->\n\t\t<button\n\t\t\tid=\"camera-btn\"\n\t\t\tmat-icon-button\n\t\t\t(click)=\"toggleCamera()\"\n\t\t\t[disabled]=\"isConnectionLost || !hasVideoDevices || videoMuteChanging\"\n\t\t\t[class.warn-btn]=\"!isWebcamVideoActive\"\n\t\t>\n\t\t\t<mat-icon\n\t\t\t\t*ngIf=\"isWebcamVideoActive\"\n\t\t\t\t[matTooltipDisabled]=\"!hasVideoDevices\"\n\t\t\t\tmatTooltip=\"{{ 'TOOLBAR.MUTE_VIDEO' | translate }}\"\n\t\t\t\tid=\"videocam\"\n\t\t\t>\n\t\t\t\tvideocam\n\t\t\t</mat-icon>\n\t\t\t<mat-icon\n\t\t\t\t*ngIf=\"!isWebcamVideoActive\"\n\t\t\t\t[matTooltipDisabled]=\"!hasVideoDevices\"\n\t\t\t\tmatTooltip=\"{{ 'TOOLBAR.UNMUTE_VIDEO' | translate }}\"\n\t\t\t\tid=\"videocam_off\"\n\t\t\t>\n\t\t\t\tvideocam_off\n\t\t\t</mat-icon>\n\t\t</button>\n\n\t\t<!-- Screenshare button -->\n\t\t<button\n\t\t\tmat-icon-button\n\t\t\t*ngIf=\"!isMinimal && showScreenshareButton\"\n\t\t\tid=\"screenshare-btn\"\n\t\t\t(click)=\"toggleScreenShare()\"\n\t\t\t[disabled]=\"isConnectionLost\"\n\t\t\t[class.active-btn]=\"isScreenShareActive\"\n\t\t>\n\t\t\t<mat-icon *ngIf=\"!isScreenShareActive\" matTooltip=\"{{ 'TOOLBAR.ENABLE_SCREEN' | translate }}\">screen_share</mat-icon>\n\t\t\t<mat-icon *ngIf=\"isScreenShareActive\" matTooltip=\"{{ 'TOOLBAR.DISABLE_SCREEN' | translate }}\">screen_share</mat-icon>\n\t\t</button>\n\n\t\t<!-- More options button -->\n\t\t<button\n\t\t\tmat-icon-button\n\t\t\tid=\"more-options-btn\"\n\t\t\t*ngIf=\"!isMinimal && showMoreOptionsButton\"\n\t\t\t[matMenuTriggerFor]=\"menu\"\n\t\t\t[disabled]=\"isConnectionLost\"\n\t\t>\n\t\t\t<mat-icon matTooltip=\"{{ 'TOOLBAR.MORE_OPTIONS' | translate }}\">more_vert</mat-icon>\n\t\t</button>\n\t\t<mat-menu #menu=\"matMenu\" id=\"more-options-menu\">\n\t\t\t<!-- Fullscreen button -->\n\t\t\t<button *ngIf=\"showFullscreenButton\" mat-menu-item id=\"fullscreen-btn\" (click)=\"toggleFullscreen()\">\n\t\t\t\t<mat-icon *ngIf=\"!isFullscreenActive\">fullscreen</mat-icon>\n\t\t\t\t<span *ngIf=\"!isFullscreenActive\">{{ 'TOOLBAR.FULLSCREEN' | translate }}</span>\n\n\t\t\t\t<mat-icon *ngIf=\"isFullscreenActive\">fullscreen_exit</mat-icon>\n\t\t\t\t<span *ngIf=\"isFullscreenActive\">{{ 'TOOLBAR.EXIT_FULLSCREEN' | translate }}</span>\n\t\t\t</button>\n\n\t\t\t<!-- Recording button -->\n\t\t\t<button\n\t\t\t\t*ngIf=\"!isMinimal && showRecordingButton\"\n\t\t\t\tmat-menu-item\n\t\t\t\tid=\"recording-btn\"\n\t\t\t\t[disabled]=\"\n\t\t\t\t\trecordingStatus === _recordingStatus.STARTING || recordingStatus === _recordingStatus.STOPPING || !isSessionCreator\n\t\t\t\t\"\n\t\t\t\t(click)=\"toggleRecording()\"\n\t\t\t>\n\t\t\t\t<mat-icon color=\"warn\">radio_button_checked</mat-icon>\n\t\t\t\t<span *ngIf=\"recordingStatus === _recordingStatus.STOPPED || recordingStatus === _recordingStatus.STOPPING\">\n\t\t\t\t\t{{ 'TOOLBAR.START_RECORDING' | translate }}\n\t\t\t\t</span>\n\t\t\t\t<span *ngIf=\"recordingStatus === _recordingStatus.STARTED || recordingStatus === _recordingStatus.STARTING\">\n\t\t\t\t\t{{ 'TOOLBAR.STOP_RECORDING' | translate }}\n\t\t\t\t</span>\n\t\t\t</button>\n\n\t\t\t<!-- Virtual background button -->\n\t\t\t<button\n\t\t\t\t*ngIf=\"!isMinimal && showBackgroundEffectsButton\"\n\t\t\t\t[disabled]=\"!isWebcamVideoActive\"\n\t\t\t\tmat-menu-item\n\t\t\t\tid=\"virtual-bg-btn\"\n\t\t\t\t(click)=\"toggleBackgroundEffects()\"\n\t\t\t>\n\t\t\t\t<mat-icon>auto_awesome</mat-icon>\n\t\t\t\t<span>{{ 'TOOLBAR.BACKGROUND' | translate }}</span>\n\t\t\t</button>\n\n\t\t\t<!-- Captions button -->\n\t\t\t<button\n\t\t\t\t*ngIf=\"!isMinimal && showCaptionsButton\"\n\t\t\t\t[disabled]=\"isConnectionLost\"\n\t\t\t\tmat-menu-item\n\t\t\t\tid=\"captions-btn\"\n\t\t\t\t(click)=\"toggleCaptions()\"\n\t\t\t>\n\t\t\t\t<mat-icon>closed_caption</mat-icon>\n\t\t\t\t<span *ngIf=\"captionsEnabled\">{{ 'TOOLBAR.DISABLE_CAPTIONS' | translate }}</span>\n\t\t\t\t<span *ngIf=\"!captionsEnabled\">{{ 'TOOLBAR.ENABLE_CAPTIONS' | translate }}</span>\n\t\t\t</button>\n\n\t\t\t<mat-divider class=\"divider\" *ngIf=\"!isMinimal && showSettingsButton\"></mat-divider>\n\n\t\t\t<!-- Settings button -->\n\t\t\t<button *ngIf=\"!isMinimal && showSettingsButton\" mat-menu-item id=\"toolbar-settings-btn\" (click)=\"toggleSettings()\">\n\t\t\t\t<mat-icon>settings</mat-icon>\n\t\t\t\t<span>{{ 'TOOLBAR.SETTINGS' | translate }}</span>\n\t\t\t</button>\n\t\t</mat-menu>\n\n\t\t<!-- External additional buttons  -->\n\t\t<ng-container *ngIf=\"toolbarAdditionalButtonsTemplate\">\n\t\t\t<ng-container *ngTemplateOutlet=\"toolbarAdditionalButtonsTemplate\"></ng-container>\n\t\t</ng-container>\n\n\t\t<!-- Leave session button -->\n\t\t<button mat-icon-button *ngIf=\"showLeaveButton\" (click)=\"leaveSession()\" id=\"leave-btn\">\n\t\t\t<mat-icon matTooltip=\"{{ 'TOOLBAR.LEAVE' | translate }}\">call_end</mat-icon>\n\t\t</button>\n\t</div>\n\t<div fxFlex=\"20%\" fxFlexOrder=\"3\" fxLayoutAlign=\"end center\" id=\"menu-buttons-container\">\n\t\t<!-- Default activities button -->\n\t\t<button\n\t\t\tmat-icon-button\n\t\t\tid=\"activities-panel-btn\"\n\t\t\t*ngIf=\"!isMinimal && showActivitiesPanelButton\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.ACTIVITIES' | translate }}\"\n\t\t\t(click)=\"toggleActivitiesPanel()\"\n\t\t\t[disabled]=\"isConnectionLost\"\n\t\t\t[class.active-btn]=\"isActivitiesOpened\"\n\t\t>\n\t\t\t<mat-icon>category</mat-icon>\n\t\t</button>\n\n\t\t<!-- Default participants button -->\n\t\t<button\n\t\t\tmat-icon-button\n\t\t\tid=\"participants-panel-btn\"\n\t\t\t*ngIf=\"!isMinimal && showParticipantsPanelButton\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.PARTICIPANTS' | translate }}\"\n\t\t\t(click)=\"toggleParticipantsPanel()\"\n\t\t\t[disabled]=\"isConnectionLost\"\n\t\t\t[class.active-btn]=\"isParticipantsOpened\"\n\t\t>\n\t\t\t<mat-icon>people</mat-icon>\n\t\t</button>\n\n\t\t<!-- Default chat button -->\n\t\t<button\n\t\t\tmat-icon-button\n\t\t\tid=\"chat-panel-btn\"\n\t\t\t*ngIf=\"!isMinimal && showChatPanelButton\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.CHAT' | translate }}\"\n\t\t\t(click)=\"toggleChatPanel()\"\n\t\t\t[disabled]=\"isConnectionLost\"\n\t\t\t[class.active-btn]=\"isChatOpened\"\n\t\t>\n\t\t\t<mat-icon\n\t\t\t\tmatBadge=\"{{ unreadMessages }}\"\n\t\t\t\t[matBadgeHidden]=\"unreadMessages === 0\"\n\t\t\t\tmatBadgePosition=\"above before\"\n\t\t\t\tmatBadgeSize=\"small\"\n\t\t\t\tmatBadgeColor=\"accent\"\n\t\t\t>\n\t\t\t\tchat\n\t\t\t</mat-icon>\n\t\t</button>\n\n\t\t<!-- External additional panel buttons  -->\n\t\t<ng-container *ngIf=\"toolbarAdditionalPanelButtonsTemplate\">\n\t\t\t<ng-container *ngTemplateOutlet=\"toolbarAdditionalPanelButtonsTemplate\"></ng-container>\n\t\t</ng-container>\n\t</div>\n</mat-toolbar>\n", styles: ["#toolbar{height:100%;background-color:transparent;color:var(--ov-text-color)}.buttonsContainer{position:absolute;left:0;right:0}#info-container>div{display:flex;align-items:center}#media-buttons-container{max-height:100%!important}#media-buttons-container>button,::ng-deep #media-buttons-container>button,#media-buttons-container:not(#media-buttons-container > button) button,::ng-deep #media-buttons-container:not(#media-buttons-container > button) button{width:40px;height:40px;background-color:var(--ov-secondary-color);margin:6px}.warn-btn{background-color:var(--ov-warn-color)!important}.active-btn,::ng-deep .active-btn{background-color:var(--ov-tertiary-color)!important}#media-buttons-container mat-icon{font-size:24px}#media-buttons-container button,#menu-buttons-container button{border-radius:var(--ov-buttons-radius)}#branding-logo{background-color:var(--ov-logo-background-color);border-radius:var(--ov-panel-radius);max-width:35px;max-height:35px;padding:10px}#session-name{font-family:Ubuntu,sans-serif;font-weight:700;font-size:15px;height:fit-content;padding:0 15px}#session-info-container{display:flex}.colapsed{flex-direction:column}.recording-tag{padding:0 10px;background-color:var(--ov-warn-color);border-radius:var(--ov-panel-radius);width:fit-content;font-size:12px;text-align:center;line-height:20px;margin:auto}.recording-tag mat-icon{font-size:16px;display:inline;vertical-align:sub;margin-right:5px}.blink{animation:blinker 1.5s linear infinite}#point{width:10px;height:10px;position:absolute;top:12px;right:33px;border-radius:var(--ov-buttons-radius);background-color:#ffa600;border:1px solid #000;z-index:99999}#leave-btn{background-color:var(--ov-warn-color)!important;border-radius:var(--ov-leave-button-radius)!important;width:60px!important}.tooltipList{white-space:pre}#navChatButton .mat-badge-medium.mat-badge-overlap.mat-badge-before .mat-badge-content{left:-17px}#navChatButton .mat-badge-medium.mat-badge-above .mat-badge-content{top:-6px}.mat-icon-button[disabled]{color:#fff}.divider{margin:8px 0}::ng-deep .mat-menu-item{height:40px;line-height:40px}@media (max-width: 750px){#session-name{display:none}}@media (max-width: 850px){#branding-logo{display:none}}@media (max-width: 550px){#toolbar{padding:0;place-content:space-evenly}}@keyframes blinker{50%{opacity:.3}}\n"], dependencies: [{ kind: "directive", type: i15.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i15.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i16.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i17.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "component", type: i18.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i19.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: i20.MatBadge, selector: "[matBadge]", inputs: ["matBadgeDisabled", "matBadgeColor", "matBadgeOverlap", "matBadgePosition", "matBadge", "matBadgeDescription", "matBadgeSize", "matBadgeHidden"] }, { kind: "directive", type: i21.DefaultLayoutDirective, selector: "  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]", inputs: ["fxLayout", "fxLayout.xs", "fxLayout.sm", "fxLayout.md", "fxLayout.lg", "fxLayout.xl", "fxLayout.lt-sm", "fxLayout.lt-md", "fxLayout.lt-lg", "fxLayout.lt-xl", "fxLayout.gt-xs", "fxLayout.gt-sm", "fxLayout.gt-md", "fxLayout.gt-lg"] }, { kind: "directive", type: i21.DefaultLayoutGapDirective, selector: "  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]", inputs: ["fxLayoutGap", "fxLayoutGap.xs", "fxLayoutGap.sm", "fxLayoutGap.md", "fxLayoutGap.lg", "fxLayoutGap.xl", "fxLayoutGap.lt-sm", "fxLayoutGap.lt-md", "fxLayoutGap.lt-lg", "fxLayoutGap.lt-xl", "fxLayoutGap.gt-xs", "fxLayoutGap.gt-sm", "fxLayoutGap.gt-md", "fxLayoutGap.gt-lg"] }, { kind: "directive", type: i21.DefaultLayoutAlignDirective, selector: "  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]", inputs: ["fxLayoutAlign", "fxLayoutAlign.xs", "fxLayoutAlign.sm", "fxLayoutAlign.md", "fxLayoutAlign.lg", "fxLayoutAlign.xl", "fxLayoutAlign.lt-sm", "fxLayoutAlign.lt-md", "fxLayoutAlign.lt-lg", "fxLayoutAlign.lt-xl", "fxLayoutAlign.gt-xs", "fxLayoutAlign.gt-sm", "fxLayoutAlign.gt-md", "fxLayoutAlign.gt-lg"] }, { kind: "directive", type: i21.DefaultFlexOrderDirective, selector: "  [fxFlexOrder], [fxFlexOrder.xs], [fxFlexOrder.sm], [fxFlexOrder.md],  [fxFlexOrder.lg], [fxFlexOrder.xl], [fxFlexOrder.lt-sm], [fxFlexOrder.lt-md],  [fxFlexOrder.lt-lg], [fxFlexOrder.lt-xl], [fxFlexOrder.gt-xs], [fxFlexOrder.gt-sm],  [fxFlexOrder.gt-md], [fxFlexOrder.gt-lg]", inputs: ["fxFlexOrder", "fxFlexOrder.xs", "fxFlexOrder.sm", "fxFlexOrder.md", "fxFlexOrder.lg", "fxFlexOrder.xl", "fxFlexOrder.lt-sm", "fxFlexOrder.lt-md", "fxFlexOrder.lt-lg", "fxFlexOrder.lt-xl", "fxFlexOrder.gt-xs", "fxFlexOrder.gt-sm", "fxFlexOrder.gt-md", "fxFlexOrder.gt-lg"] }, { kind: "directive", type: i21.DefaultFlexDirective, selector: "  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]", inputs: ["fxFlex", "fxFlex.xs", "fxFlex.sm", "fxFlex.md", "fxFlex.lg", "fxFlex.xl", "fxFlex.lt-sm", "fxFlex.lt-md", "fxFlex.lt-lg", "fxFlex.lt-xl", "fxFlex.gt-xs", "fxFlex.gt-sm", "fxFlex.gt-md", "fxFlex.gt-lg"] }, { kind: "component", type: i22.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "component", type: i22.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { kind: "directive", type: i22.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { kind: "component", type: i23.MatDivider, selector: "mat-divider", inputs: ["vertical", "inset"] }, { kind: "directive", type: i24.LogoDirective, selector: "img[ovLogo]", inputs: ["ovLogo"] }, { kind: "pipe", type: i15.DatePipe, name: "date" }, { kind: "pipe", type: i25.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-toolbar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<mat-toolbar id=\"toolbar\" role=\"heading\" fxLayout fxLayoutAlign=\"center\" fxLayoutGap=\"40px\">\n\t<div fxFlex=\"20%\" fxLayoutAlign=\"start center\" id=\"info-container\" *ngIf=\"screenSize !== 'xs'\">\n\t\t<div>\n\t\t\t<img *ngIf=\"!isMinimal && showLogo\" id=\"branding-logo\" src=\"assets/images/logo.png\" ovLogo />\n\t\t\t<div id=\"session-info-container\" [class.colapsed]=\"recordingStatus === _recordingStatus.STARTED\">\n\t\t\t\t<span id=\"session-name\" *ngIf=\"!isMinimal && session && session.sessionId && showSessionName\">{{ session.sessionId }}</span>\n\t\t\t\t<div *ngIf=\"recordingStatus === _recordingStatus.STARTED\" id=\"recording-tag\" class=\"recording-tag\">\n\t\t\t\t\t<mat-icon class=\"blink\">radio_button_checked</mat-icon>\n\t\t\t\t\t<span class=\"blink\">REC</span>\n\t\t\t\t\t<span> | {{ recordingTime | date: 'H:mm:ss' }}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div fxFlex=\"60%\" fxFlexOrder=\"2\" fxLayoutAlign=\"center center\" id=\"media-buttons-container\">\n\t\t<!-- Microphone button -->\n\t\t<button\n\t\t\tid=\"mic-btn\"\n\t\t\tmat-icon-button\n\t\t\t(click)=\"toggleMicrophone()\"\n\t\t\t[disabled]=\"isConnectionLost || !hasAudioDevices\"\n\t\t\t[class.warn-btn]=\"!isAudioActive\"\n\t\t>\n\t\t\t<mat-icon\n\t\t\t\t*ngIf=\"isAudioActive\"\n\t\t\t\t[matTooltipDisabled]=\"!hasAudioDevices\"\n\t\t\t\tmatTooltip=\"{{ 'TOOLBAR.MUTE_AUDIO' | translate }}\"\n\t\t\t\tid=\"mic\"\n\t\t\t>\n\t\t\t\tmic\n\t\t\t</mat-icon>\n\t\t\t<mat-icon\n\t\t\t\t*ngIf=\"!isAudioActive\"\n\t\t\t\t[matTooltipDisabled]=\"!hasAudioDevices\"\n\t\t\t\tmatTooltip=\"{{ 'TOOLBAR.UNMUTE_AUDIO' | translate }}\"\n\t\t\t\tid=\"mic_off\"\n\t\t\t>\n\t\t\t\tmic_off\n\t\t\t</mat-icon>\n\t\t</button>\n\n\t\t<!-- Camera button -->\n\t\t<button\n\t\t\tid=\"camera-btn\"\n\t\t\tmat-icon-button\n\t\t\t(click)=\"toggleCamera()\"\n\t\t\t[disabled]=\"isConnectionLost || !hasVideoDevices || videoMuteChanging\"\n\t\t\t[class.warn-btn]=\"!isWebcamVideoActive\"\n\t\t>\n\t\t\t<mat-icon\n\t\t\t\t*ngIf=\"isWebcamVideoActive\"\n\t\t\t\t[matTooltipDisabled]=\"!hasVideoDevices\"\n\t\t\t\tmatTooltip=\"{{ 'TOOLBAR.MUTE_VIDEO' | translate }}\"\n\t\t\t\tid=\"videocam\"\n\t\t\t>\n\t\t\t\tvideocam\n\t\t\t</mat-icon>\n\t\t\t<mat-icon\n\t\t\t\t*ngIf=\"!isWebcamVideoActive\"\n\t\t\t\t[matTooltipDisabled]=\"!hasVideoDevices\"\n\t\t\t\tmatTooltip=\"{{ 'TOOLBAR.UNMUTE_VIDEO' | translate }}\"\n\t\t\t\tid=\"videocam_off\"\n\t\t\t>\n\t\t\t\tvideocam_off\n\t\t\t</mat-icon>\n\t\t</button>\n\n\t\t<!-- Screenshare button -->\n\t\t<button\n\t\t\tmat-icon-button\n\t\t\t*ngIf=\"!isMinimal && showScreenshareButton\"\n\t\t\tid=\"screenshare-btn\"\n\t\t\t(click)=\"toggleScreenShare()\"\n\t\t\t[disabled]=\"isConnectionLost\"\n\t\t\t[class.active-btn]=\"isScreenShareActive\"\n\t\t>\n\t\t\t<mat-icon *ngIf=\"!isScreenShareActive\" matTooltip=\"{{ 'TOOLBAR.ENABLE_SCREEN' | translate }}\">screen_share</mat-icon>\n\t\t\t<mat-icon *ngIf=\"isScreenShareActive\" matTooltip=\"{{ 'TOOLBAR.DISABLE_SCREEN' | translate }}\">screen_share</mat-icon>\n\t\t</button>\n\n\t\t<!-- More options button -->\n\t\t<button\n\t\t\tmat-icon-button\n\t\t\tid=\"more-options-btn\"\n\t\t\t*ngIf=\"!isMinimal && showMoreOptionsButton\"\n\t\t\t[matMenuTriggerFor]=\"menu\"\n\t\t\t[disabled]=\"isConnectionLost\"\n\t\t>\n\t\t\t<mat-icon matTooltip=\"{{ 'TOOLBAR.MORE_OPTIONS' | translate }}\">more_vert</mat-icon>\n\t\t</button>\n\t\t<mat-menu #menu=\"matMenu\" id=\"more-options-menu\">\n\t\t\t<!-- Fullscreen button -->\n\t\t\t<button *ngIf=\"showFullscreenButton\" mat-menu-item id=\"fullscreen-btn\" (click)=\"toggleFullscreen()\">\n\t\t\t\t<mat-icon *ngIf=\"!isFullscreenActive\">fullscreen</mat-icon>\n\t\t\t\t<span *ngIf=\"!isFullscreenActive\">{{ 'TOOLBAR.FULLSCREEN' | translate }}</span>\n\n\t\t\t\t<mat-icon *ngIf=\"isFullscreenActive\">fullscreen_exit</mat-icon>\n\t\t\t\t<span *ngIf=\"isFullscreenActive\">{{ 'TOOLBAR.EXIT_FULLSCREEN' | translate }}</span>\n\t\t\t</button>\n\n\t\t\t<!-- Recording button -->\n\t\t\t<button\n\t\t\t\t*ngIf=\"!isMinimal && showRecordingButton\"\n\t\t\t\tmat-menu-item\n\t\t\t\tid=\"recording-btn\"\n\t\t\t\t[disabled]=\"\n\t\t\t\t\trecordingStatus === _recordingStatus.STARTING || recordingStatus === _recordingStatus.STOPPING || !isSessionCreator\n\t\t\t\t\"\n\t\t\t\t(click)=\"toggleRecording()\"\n\t\t\t>\n\t\t\t\t<mat-icon color=\"warn\">radio_button_checked</mat-icon>\n\t\t\t\t<span *ngIf=\"recordingStatus === _recordingStatus.STOPPED || recordingStatus === _recordingStatus.STOPPING\">\n\t\t\t\t\t{{ 'TOOLBAR.START_RECORDING' | translate }}\n\t\t\t\t</span>\n\t\t\t\t<span *ngIf=\"recordingStatus === _recordingStatus.STARTED || recordingStatus === _recordingStatus.STARTING\">\n\t\t\t\t\t{{ 'TOOLBAR.STOP_RECORDING' | translate }}\n\t\t\t\t</span>\n\t\t\t</button>\n\n\t\t\t<!-- Virtual background button -->\n\t\t\t<button\n\t\t\t\t*ngIf=\"!isMinimal && showBackgroundEffectsButton\"\n\t\t\t\t[disabled]=\"!isWebcamVideoActive\"\n\t\t\t\tmat-menu-item\n\t\t\t\tid=\"virtual-bg-btn\"\n\t\t\t\t(click)=\"toggleBackgroundEffects()\"\n\t\t\t>\n\t\t\t\t<mat-icon>auto_awesome</mat-icon>\n\t\t\t\t<span>{{ 'TOOLBAR.BACKGROUND' | translate }}</span>\n\t\t\t</button>\n\n\t\t\t<!-- Captions button -->\n\t\t\t<button\n\t\t\t\t*ngIf=\"!isMinimal && showCaptionsButton\"\n\t\t\t\t[disabled]=\"isConnectionLost\"\n\t\t\t\tmat-menu-item\n\t\t\t\tid=\"captions-btn\"\n\t\t\t\t(click)=\"toggleCaptions()\"\n\t\t\t>\n\t\t\t\t<mat-icon>closed_caption</mat-icon>\n\t\t\t\t<span *ngIf=\"captionsEnabled\">{{ 'TOOLBAR.DISABLE_CAPTIONS' | translate }}</span>\n\t\t\t\t<span *ngIf=\"!captionsEnabled\">{{ 'TOOLBAR.ENABLE_CAPTIONS' | translate }}</span>\n\t\t\t</button>\n\n\t\t\t<mat-divider class=\"divider\" *ngIf=\"!isMinimal && showSettingsButton\"></mat-divider>\n\n\t\t\t<!-- Settings button -->\n\t\t\t<button *ngIf=\"!isMinimal && showSettingsButton\" mat-menu-item id=\"toolbar-settings-btn\" (click)=\"toggleSettings()\">\n\t\t\t\t<mat-icon>settings</mat-icon>\n\t\t\t\t<span>{{ 'TOOLBAR.SETTINGS' | translate }}</span>\n\t\t\t</button>\n\t\t</mat-menu>\n\n\t\t<!-- External additional buttons  -->\n\t\t<ng-container *ngIf=\"toolbarAdditionalButtonsTemplate\">\n\t\t\t<ng-container *ngTemplateOutlet=\"toolbarAdditionalButtonsTemplate\"></ng-container>\n\t\t</ng-container>\n\n\t\t<!-- Leave session button -->\n\t\t<button mat-icon-button *ngIf=\"showLeaveButton\" (click)=\"leaveSession()\" id=\"leave-btn\">\n\t\t\t<mat-icon matTooltip=\"{{ 'TOOLBAR.LEAVE' | translate }}\">call_end</mat-icon>\n\t\t</button>\n\t</div>\n\t<div fxFlex=\"20%\" fxFlexOrder=\"3\" fxLayoutAlign=\"end center\" id=\"menu-buttons-container\">\n\t\t<!-- Default activities button -->\n\t\t<button\n\t\t\tmat-icon-button\n\t\t\tid=\"activities-panel-btn\"\n\t\t\t*ngIf=\"!isMinimal && showActivitiesPanelButton\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.ACTIVITIES' | translate }}\"\n\t\t\t(click)=\"toggleActivitiesPanel()\"\n\t\t\t[disabled]=\"isConnectionLost\"\n\t\t\t[class.active-btn]=\"isActivitiesOpened\"\n\t\t>\n\t\t\t<mat-icon>category</mat-icon>\n\t\t</button>\n\n\t\t<!-- Default participants button -->\n\t\t<button\n\t\t\tmat-icon-button\n\t\t\tid=\"participants-panel-btn\"\n\t\t\t*ngIf=\"!isMinimal && showParticipantsPanelButton\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.PARTICIPANTS' | translate }}\"\n\t\t\t(click)=\"toggleParticipantsPanel()\"\n\t\t\t[disabled]=\"isConnectionLost\"\n\t\t\t[class.active-btn]=\"isParticipantsOpened\"\n\t\t>\n\t\t\t<mat-icon>people</mat-icon>\n\t\t</button>\n\n\t\t<!-- Default chat button -->\n\t\t<button\n\t\t\tmat-icon-button\n\t\t\tid=\"chat-panel-btn\"\n\t\t\t*ngIf=\"!isMinimal && showChatPanelButton\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.CHAT' | translate }}\"\n\t\t\t(click)=\"toggleChatPanel()\"\n\t\t\t[disabled]=\"isConnectionLost\"\n\t\t\t[class.active-btn]=\"isChatOpened\"\n\t\t>\n\t\t\t<mat-icon\n\t\t\t\tmatBadge=\"{{ unreadMessages }}\"\n\t\t\t\t[matBadgeHidden]=\"unreadMessages === 0\"\n\t\t\t\tmatBadgePosition=\"above before\"\n\t\t\t\tmatBadgeSize=\"small\"\n\t\t\t\tmatBadgeColor=\"accent\"\n\t\t\t>\n\t\t\t\tchat\n\t\t\t</mat-icon>\n\t\t</button>\n\n\t\t<!-- External additional panel buttons  -->\n\t\t<ng-container *ngIf=\"toolbarAdditionalPanelButtonsTemplate\">\n\t\t\t<ng-container *ngTemplateOutlet=\"toolbarAdditionalPanelButtonsTemplate\"></ng-container>\n\t\t</ng-container>\n\t</div>\n</mat-toolbar>\n", styles: ["#toolbar{height:100%;background-color:transparent;color:var(--ov-text-color)}.buttonsContainer{position:absolute;left:0;right:0}#info-container>div{display:flex;align-items:center}#media-buttons-container{max-height:100%!important}#media-buttons-container>button,::ng-deep #media-buttons-container>button,#media-buttons-container:not(#media-buttons-container > button) button,::ng-deep #media-buttons-container:not(#media-buttons-container > button) button{width:40px;height:40px;background-color:var(--ov-secondary-color);margin:6px}.warn-btn{background-color:var(--ov-warn-color)!important}.active-btn,::ng-deep .active-btn{background-color:var(--ov-tertiary-color)!important}#media-buttons-container mat-icon{font-size:24px}#media-buttons-container button,#menu-buttons-container button{border-radius:var(--ov-buttons-radius)}#branding-logo{background-color:var(--ov-logo-background-color);border-radius:var(--ov-panel-radius);max-width:35px;max-height:35px;padding:10px}#session-name{font-family:Ubuntu,sans-serif;font-weight:700;font-size:15px;height:fit-content;padding:0 15px}#session-info-container{display:flex}.colapsed{flex-direction:column}.recording-tag{padding:0 10px;background-color:var(--ov-warn-color);border-radius:var(--ov-panel-radius);width:fit-content;font-size:12px;text-align:center;line-height:20px;margin:auto}.recording-tag mat-icon{font-size:16px;display:inline;vertical-align:sub;margin-right:5px}.blink{animation:blinker 1.5s linear infinite}#point{width:10px;height:10px;position:absolute;top:12px;right:33px;border-radius:var(--ov-buttons-radius);background-color:#ffa600;border:1px solid #000;z-index:99999}#leave-btn{background-color:var(--ov-warn-color)!important;border-radius:var(--ov-leave-button-radius)!important;width:60px!important}.tooltipList{white-space:pre}#navChatButton .mat-badge-medium.mat-badge-overlap.mat-badge-before .mat-badge-content{left:-17px}#navChatButton .mat-badge-medium.mat-badge-above .mat-badge-content{top:-6px}.mat-icon-button[disabled]{color:#fff}.divider{margin:8px 0}::ng-deep .mat-menu-item{height:40px;line-height:40px}@media (max-width: 750px){#session-name{display:none}}@media (max-width: 850px){#branding-logo{display:none}}@media (max-width: 550px){#toolbar{padding:0;place-content:space-evenly}}@keyframes blinker{50%{opacity:.3}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DocumentService }, { type: i2.ChatService }, { type: i3.PanelService }, { type: i4.ParticipantService }, { type: i5.OpenViduService }, { type: i6.DeviceService }, { type: i7.ActionService }, { type: i8.LoggerService }, { type: i9.LayoutService }, { type: i0.ChangeDetectorRef }, { type: i10.OpenViduAngularConfigService }, { type: i11.PlatformService }, { type: i12.RecordingService }, { type: i13.TranslateService }, { type: i14.StorageService }]; }, propDecorators: { toolbarAdditionalButtonsTemplate: [{
                type: ContentChild,
                args: ['toolbarAdditionalButtons', { read: TemplateRef }]
            }], toolbarAdditionalPanelButtonsTemplate: [{
                type: ContentChild,
                args: ['toolbarAdditionalPanelButtons', { read: TemplateRef }]
            }], externalAdditionalButtons: [{
                type: ContentChild,
                args: [ToolbarAdditionalButtonsDirective]
            }], externalAdditionalPanelButtons: [{
                type: ContentChild,
                args: [ToolbarAdditionalPanelButtonsDirective]
            }], onLeaveButtonClicked: [{
                type: Output
            }], onCameraButtonClicked: [{
                type: Output
            }], onMicrophoneButtonClicked: [{
                type: Output
            }], onFullscreenButtonClicked: [{
                type: Output
            }], onScreenshareButtonClicked: [{
                type: Output
            }], onParticipantsPanelButtonClicked: [{
                type: Output
            }], onChatPanelButtonClicked: [{
                type: Output
            }], onActivitiesPanelButtonClicked: [{
                type: Output
            }], onStartRecordingClicked: [{
                type: Output
            }], onStopRecordingClicked: [{
                type: Output
            }], menuTrigger: [{
                type: ViewChild,
                args: [MatMenuTrigger]
            }], sizeChange: [{
                type: HostListener,
                args: ['window:resize', ['$event']]
            }], keyDown: [{
                type: HostListener,
                args: ['document:keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,