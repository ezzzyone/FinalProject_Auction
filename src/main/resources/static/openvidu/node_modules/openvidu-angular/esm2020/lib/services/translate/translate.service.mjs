import { Injectable } from '@angular/core';
import * as cn from '../../lang/cn.json';
import * as de from '../../lang/de.json';
import * as en from '../../lang/en.json';
import * as es from '../../lang/es.json';
import * as fr from '../../lang/fr.json';
import * as hi from '../../lang/hi.json';
import * as it from '../../lang/it.json';
import * as ja from '../../lang/ja.json';
import * as nl from '../../lang/nl.json';
import * as pt from '../../lang/pt.json';
import * as i0 from "@angular/core";
import * as i1 from "../storage/storage.service";
/**
 * @internal
 */
export class TranslateService {
    constructor(storageService) {
        this.storageService = storageService;
        this.availableLanguages = { en, es, de, fr, cn, hi, it, ja, nl, pt };
        this.langTitles = [
            { name: 'English', ISO: 'en' },
            { name: 'Español', ISO: 'es' },
            { name: 'Deutsch', ISO: 'de' },
            { name: 'Français', ISO: 'fr' },
            { name: '中国', ISO: 'cn' },
            { name: 'हिन्दी', ISO: 'hi' },
            { name: 'Italiano', ISO: 'it' },
            { name: 'やまと', ISO: 'ja' },
            { name: 'Dutch', ISO: 'nl' },
            { name: 'Português', ISO: 'pt' }
        ];
        const iso = this.storageService.getLang() || 'en';
        this.langSelected = this.langTitles.find((lang) => lang.ISO === iso) || this.langTitles[0];
        this.currentLang = this.availableLanguages[this.langSelected.ISO];
    }
    setLanguage(lang) {
        if (this.langTitles.some(l => l.ISO === lang)) {
            this.currentLang = this.availableLanguages[lang];
            this.langSelected = this.langTitles.find((l) => l.ISO === lang);
        }
    }
    getLangSelected() {
        return this.langSelected;
    }
    getLanguagesInfo() {
        return this.langTitles;
    }
    translate(key) {
        let result = this.currentLang;
        key.split('.').forEach((prop) => {
            try {
                result = result[prop];
            }
            catch (error) {
                return '';
            }
        });
        return result;
    }
}
TranslateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: TranslateService, deps: [{ token: i1.StorageService }], target: i0.ɵɵFactoryTarget.Injectable });
TranslateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: TranslateService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: TranslateService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9vcGVudmlkdS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvdHJhbnNsYXRlL3RyYW5zbGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxLQUFLLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6QyxPQUFPLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pDLE9BQU8sS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekMsT0FBTyxLQUFLLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6QyxPQUFPLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pDLE9BQU8sS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekMsT0FBTyxLQUFLLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6QyxPQUFPLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pDLE9BQU8sS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekMsT0FBTyxLQUFLLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7O0FBR3pDOztHQUVHO0FBSUgsTUFBTSxPQUFPLGdCQUFnQjtJQWlCNUIsWUFBb0IsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBaEIxQyx1QkFBa0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2hFLGVBQVUsR0FBRztZQUNwQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtZQUM5QixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtZQUM5QixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtZQUM5QixFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtZQUMvQixFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtZQUN6QixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtZQUM3QixFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtZQUMvQixFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtZQUMxQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtZQUM1QixFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtTQUNoQyxDQUFDO1FBS0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUM7UUFDbEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFZO1FBQ3ZCLElBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxFQUFDO1lBQzVDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7U0FDaEU7SUFDRixDQUFDO0lBRUQsZUFBZTtRQUNkLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMxQixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBVztRQUNwQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBRTlCLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDL0IsSUFBSTtnQkFDSCxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3RCO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2YsT0FBTyxFQUFFLENBQUM7YUFDVjtRQUNGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDOzs2R0FqRFcsZ0JBQWdCO2lIQUFoQixnQkFBZ0IsY0FGaEIsTUFBTTsyRkFFTixnQkFBZ0I7a0JBSDVCLFVBQVU7bUJBQUM7b0JBQ1gsVUFBVSxFQUFFLE1BQU07aUJBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgY24gZnJvbSAnLi4vLi4vbGFuZy9jbi5qc29uJztcbmltcG9ydCAqIGFzIGRlIGZyb20gJy4uLy4uL2xhbmcvZGUuanNvbic7XG5pbXBvcnQgKiBhcyBlbiBmcm9tICcuLi8uLi9sYW5nL2VuLmpzb24nO1xuaW1wb3J0ICogYXMgZXMgZnJvbSAnLi4vLi4vbGFuZy9lcy5qc29uJztcbmltcG9ydCAqIGFzIGZyIGZyb20gJy4uLy4uL2xhbmcvZnIuanNvbic7XG5pbXBvcnQgKiBhcyBoaSBmcm9tICcuLi8uLi9sYW5nL2hpLmpzb24nO1xuaW1wb3J0ICogYXMgaXQgZnJvbSAnLi4vLi4vbGFuZy9pdC5qc29uJztcbmltcG9ydCAqIGFzIGphIGZyb20gJy4uLy4uL2xhbmcvamEuanNvbic7XG5pbXBvcnQgKiBhcyBubCBmcm9tICcuLi8uLi9sYW5nL25sLmpzb24nO1xuaW1wb3J0ICogYXMgcHQgZnJvbSAnLi4vLi4vbGFuZy9wdC5qc29uJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vc3RvcmFnZS9zdG9yYWdlLnNlcnZpY2UnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5ASW5qZWN0YWJsZSh7XG5cdHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGVTZXJ2aWNlIHtcblx0cHJpdmF0ZSBhdmFpbGFibGVMYW5ndWFnZXMgPSB7IGVuLCBlcywgZGUsIGZyLCBjbiwgaGksIGl0LCBqYSwgbmwsIHB0IH07XG5cdHByaXZhdGUgbGFuZ1RpdGxlcyA9IFtcblx0XHR7IG5hbWU6ICdFbmdsaXNoJywgSVNPOiAnZW4nIH0sXG5cdFx0eyBuYW1lOiAnRXNwYcOxb2wnLCBJU086ICdlcycgfSxcblx0XHR7IG5hbWU6ICdEZXV0c2NoJywgSVNPOiAnZGUnIH0sXG5cdFx0eyBuYW1lOiAnRnJhbsOnYWlzJywgSVNPOiAnZnInIH0sXG5cdFx0eyBuYW1lOiAn5Lit5Zu9JywgSVNPOiAnY24nIH0sXG5cdFx0eyBuYW1lOiAn4KS54KS/4KSo4KWN4KSm4KWAJywgSVNPOiAnaGknIH0sXG5cdFx0eyBuYW1lOiAnSXRhbGlhbm8nLCBJU086ICdpdCcgfSxcblx0XHR7IG5hbWU6ICfjgoTjgb7jgagnLCBJU086ICdqYScgfSxcblx0XHR7IG5hbWU6ICdEdXRjaCcsIElTTzogJ25sJyB9LFxuXHRcdHsgbmFtZTogJ1BvcnR1Z3XDqnMnLCBJU086ICdwdCcgfVxuXHRdO1xuXHRwcml2YXRlIGN1cnJlbnRMYW5nOiBhbnk7XG5cdGxhbmdTZWxlY3RlZDogeyBuYW1lOiBzdHJpbmc7IElTTzogc3RyaW5nIH07XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UpIHtcblx0XHRjb25zdCBpc28gPSB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldExhbmcoKSB8fCAnZW4nO1xuXHRcdHRoaXMubGFuZ1NlbGVjdGVkID0gdGhpcy5sYW5nVGl0bGVzLmZpbmQoKGxhbmcpID0+IGxhbmcuSVNPID09PSBpc28pIHx8IHRoaXMubGFuZ1RpdGxlc1swXTtcblx0XHR0aGlzLmN1cnJlbnRMYW5nID0gdGhpcy5hdmFpbGFibGVMYW5ndWFnZXNbdGhpcy5sYW5nU2VsZWN0ZWQuSVNPXTtcblx0fVxuXG5cdHNldExhbmd1YWdlKGxhbmc6IHN0cmluZykge1xuXHRcdGlmKHRoaXMubGFuZ1RpdGxlcy5zb21lKGwgPT4gbC5JU08gPT09IGxhbmcpKXtcblx0XHRcdHRoaXMuY3VycmVudExhbmcgPSB0aGlzLmF2YWlsYWJsZUxhbmd1YWdlc1tsYW5nXTtcblx0XHRcdHRoaXMubGFuZ1NlbGVjdGVkID0gdGhpcy5sYW5nVGl0bGVzLmZpbmQoKGwpID0+IGwuSVNPID09PSBsYW5nKTtcblx0XHR9XG5cdH1cblxuXHRnZXRMYW5nU2VsZWN0ZWQoKTogeyBuYW1lOiBzdHJpbmc7IElTTzogc3RyaW5nIH0ge1xuXHRcdHJldHVybiB0aGlzLmxhbmdTZWxlY3RlZDtcblx0fVxuXG5cdGdldExhbmd1YWdlc0luZm8oKSB7XG5cdFx0cmV0dXJuIHRoaXMubGFuZ1RpdGxlcztcblx0fVxuXG5cdHRyYW5zbGF0ZShrZXk6IHN0cmluZykge1xuXHRcdGxldCByZXN1bHQgPSB0aGlzLmN1cnJlbnRMYW5nO1xuXG5cdFx0a2V5LnNwbGl0KCcuJykuZm9yRWFjaCgocHJvcCkgPT4ge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0W3Byb3BdO1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cbn1cbiJdfQ==