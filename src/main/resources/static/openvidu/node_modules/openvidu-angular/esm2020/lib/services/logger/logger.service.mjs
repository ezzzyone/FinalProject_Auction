import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../config/openvidu-angular.config.service";
/**
 * @internal
 */
export class LoggerService {
    constructor(openviduAngularConfigSrv) {
        this.openviduAngularConfigSrv = openviduAngularConfigSrv;
        this.LOG_FNS = [];
        this.MSG_PREFIXES = [
            ['[', ']'],
            ['[', '] WARN: '],
            ['[', '] ERROR: ']
        ];
    }
    getLoggerFns(prefix) {
        this.log = window.console;
        this.LOG_FNS = [this.log.log, this.log.warn, this.log.error];
        const loggerFns = this.LOG_FNS.map((logTemplFn, i) => {
            return logTemplFn.bind(this.log, this.MSG_PREFIXES[i][0] + prefix + this.MSG_PREFIXES[i][1]);
        });
        return loggerFns;
    }
    get(prefix) {
        const prodMode = this.openviduAngularConfigSrv.isProduction();
        const loggerService = this;
        return {
            d: function (...args) {
                if (!prodMode) {
                    loggerService.getLoggerFns(prefix)[0].apply(this.log, arguments);
                }
            },
            w: function (...args) {
                loggerService.getLoggerFns(prefix)[1].apply(this.log, arguments);
            },
            e: function (...args) {
                loggerService.getLoggerFns(prefix)[2].apply(this.log, arguments);
            }
        };
    }
}
LoggerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: LoggerService, deps: [{ token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Injectable });
LoggerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: LoggerService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: LoggerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.OpenViduAngularConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9vcGVudmlkdS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvbG9nZ2VyL2xvZ2dlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQUszQzs7R0FFRztBQUlILE1BQU0sT0FBTyxhQUFhO0lBU3pCLFlBQW9CLHdCQUFzRDtRQUF0RCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQThCO1FBUG5FLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixpQkFBWSxHQUFHO1lBQ3JCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztZQUNWLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQztZQUNqQixDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUM7U0FDbEIsQ0FBQztJQUdGLENBQUM7SUFFTyxZQUFZLENBQUMsTUFBYztRQUNsQyxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEQsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxTQUFTLENBQUM7SUFDbEIsQ0FBQztJQUVNLEdBQUcsQ0FBQyxNQUFjO1FBQ3hCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM5RCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDM0IsT0FBTztZQUNOLENBQUMsRUFBRSxVQUFTLEdBQUcsSUFBVztnQkFDekIsSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDZCxhQUFhLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2lCQUNqRTtZQUNGLENBQUM7WUFDRCxDQUFDLEVBQUUsVUFBUyxHQUFHLElBQVc7Z0JBQ3pCLGFBQWEsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFbEUsQ0FBQztZQUNELENBQUMsRUFBRSxVQUFTLEdBQUcsSUFBVztnQkFDekIsYUFBYSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUNsRSxDQUFDO1NBQ0QsQ0FBQztJQUNILENBQUM7OzBHQXRDVyxhQUFhOzhHQUFiLGFBQWEsY0FGYixNQUFNOzJGQUVOLGFBQWE7a0JBSHpCLFVBQVU7bUJBQUM7b0JBQ1gsVUFBVSxFQUFFLE1BQU07aUJBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUxvZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9tb2RlbHMvbG9nZ2VyLm1vZGVsJztcblxuaW1wb3J0IHsgT3BlblZpZHVBbmd1bGFyQ29uZmlnU2VydmljZSB9IGZyb20gJy4uL2NvbmZpZy9vcGVudmlkdS1hbmd1bGFyLmNvbmZpZy5zZXJ2aWNlJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTG9nZ2VyU2VydmljZSBpbXBsZW1lbnRzIElMb2dTZXJ2aWNlIHtcblx0cHVibGljIGxvZztcblx0cHVibGljIExPR19GTlMgPSBbXTtcblx0cHVibGljIE1TR19QUkVGSVhFUyA9IFtcblx0XHRbJ1snLCAnXSddLFxuXHRcdFsnWycsICddIFdBUk46ICddLFxuXHRcdFsnWycsICddIEVSUk9SOiAnXVxuXHRdO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgb3BlbnZpZHVBbmd1bGFyQ29uZmlnU3J2OiBPcGVuVmlkdUFuZ3VsYXJDb25maWdTZXJ2aWNlKSB7XG5cdH1cblxuXHRwcml2YXRlIGdldExvZ2dlckZucyhwcmVmaXg6IHN0cmluZykge1xuXHRcdHRoaXMubG9nID0gd2luZG93LmNvbnNvbGU7XG5cdFx0dGhpcy5MT0dfRk5TID0gW3RoaXMubG9nLmxvZywgdGhpcy5sb2cud2FybiwgdGhpcy5sb2cuZXJyb3JdO1xuXHRcdGNvbnN0IGxvZ2dlckZucyA9IHRoaXMuTE9HX0ZOUy5tYXAoKGxvZ1RlbXBsRm4sIGkpID0+IHtcblx0XHRcdHJldHVybiBsb2dUZW1wbEZuLmJpbmQodGhpcy5sb2csIHRoaXMuTVNHX1BSRUZJWEVTW2ldWzBdICsgcHJlZml4ICsgdGhpcy5NU0dfUFJFRklYRVNbaV1bMV0pO1xuXHRcdH0pO1xuXHRcdHJldHVybiBsb2dnZXJGbnM7XG5cdH1cblxuXHRwdWJsaWMgZ2V0KHByZWZpeDogc3RyaW5nKSB7XG5cdFx0Y29uc3QgcHJvZE1vZGUgPSB0aGlzLm9wZW52aWR1QW5ndWxhckNvbmZpZ1Nydi5pc1Byb2R1Y3Rpb24oKTtcblx0XHRjb25zdCBsb2dnZXJTZXJ2aWNlID0gdGhpcztcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZDogZnVuY3Rpb24oLi4uYXJnczogYW55W10pIHtcblx0XHRcdFx0aWYgKCFwcm9kTW9kZSkge1xuXHRcdFx0XHRcdGxvZ2dlclNlcnZpY2UuZ2V0TG9nZ2VyRm5zKHByZWZpeClbMF0uYXBwbHkodGhpcy5sb2csIGFyZ3VtZW50cyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHR3OiBmdW5jdGlvbiguLi5hcmdzOiBhbnlbXSkge1xuXHRcdFx0XHRsb2dnZXJTZXJ2aWNlLmdldExvZ2dlckZucyhwcmVmaXgpWzFdLmFwcGx5KHRoaXMubG9nLCBhcmd1bWVudHMpO1xuXG5cdFx0XHR9LFxuXHRcdFx0ZTogZnVuY3Rpb24oLi4uYXJnczogYW55W10pIHtcblx0XHRcdFx0bG9nZ2VyU2VydmljZS5nZXRMb2dnZXJGbnMocHJlZml4KVsyXS5hcHBseSh0aGlzLmxvZywgYXJndW1lbnRzKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59XG4iXX0=