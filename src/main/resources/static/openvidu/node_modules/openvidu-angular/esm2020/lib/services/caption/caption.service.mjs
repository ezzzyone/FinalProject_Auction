import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../storage/storage.service";
/**
 * @internal
 */
export class CaptionService {
    constructor(storageService) {
        this.storageService = storageService;
        this.langs = [
            { name: 'English', ISO: 'en-US' },
            { name: 'Español', ISO: 'es-ES' },
            { name: 'Deutsch', ISO: 'de-DE' },
            { name: 'Français', ISO: 'fr-FR' },
            { name: '中国', ISO: 'zh-CN' },
            { name: 'हिन्दी', ISO: 'hi-IN' },
            { name: 'Italiano', ISO: 'it-IT' },
            { name: 'やまと', ISO: 'jp-JP' },
            { name: 'Português', ISO: 'pt-PT' }
        ];
        this.captionLangSelected = { name: 'English', ISO: 'en-US' };
        this._captionLangObs = new Subject();
        this.captionsEnabled = false;
        const iso = this.storageService.getCaptionsLang();
        const lang = this.langs.find((lang) => lang.ISO === iso);
        if (iso && lang) {
            this.captionLangSelected = lang;
        }
        else {
            this.captionLangSelected = this.langs[0];
        }
        this.captionLangObs = this._captionLangObs.asObservable();
    }
    setCaptionsEnabled(value) {
        this.captionsEnabled = value;
    }
    areCaptionsEnabled() {
        return this.captionsEnabled;
    }
    setLanguage(lang) {
        const newLang = this.langs.find((l) => l.ISO === lang);
        if (!!newLang && newLang.ISO !== this.captionLangSelected.ISO) {
            this.captionLangSelected = newLang;
            this.storageService.setCaptionLang(lang);
            this._captionLangObs.next(this.captionLangSelected);
        }
    }
    getLangSelected() {
        return this.captionLangSelected;
    }
    getCaptionLanguages() {
        return this.langs;
    }
}
CaptionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: CaptionService, deps: [{ token: i1.StorageService }], target: i0.ɵɵFactoryTarget.Injectable });
CaptionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: CaptionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: CaptionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.StorageService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvb3BlbnZpZHUtYW5ndWxhci9zcmMvbGliL3NlcnZpY2VzL2NhcHRpb24vY2FwdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0FBRzNDOztHQUVHO0FBSUgsTUFBTSxPQUFPLGNBQWM7SUFpQjFCLFlBQW9CLGNBQThCO1FBQTlCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQWhCMUMsVUFBSyxHQUFHO1lBQ2YsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7WUFDakMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7WUFDakMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7WUFDakMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7WUFDbEMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7WUFDNUIsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7WUFDaEMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7WUFDbEMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7WUFDN0IsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7U0FDbkMsQ0FBQztRQUNGLHdCQUFtQixHQUFrQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBRS9FLG9CQUFlLEdBQTJDLElBQUksT0FBTyxFQUFFLENBQUM7UUFDeEUsb0JBQWUsR0FBWSxLQUFLLENBQUM7UUFHeEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNsRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUN6RCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDaEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztTQUNoQzthQUFNO1lBQ04sSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekM7UUFDRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0QsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQWM7UUFDaEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELGtCQUFrQjtRQUNqQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDN0IsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFZO1FBQ3ZCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUU7WUFDOUQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLE9BQU8sQ0FBQztZQUNuQyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUNwRDtJQUNGLENBQUM7SUFFRCxlQUFlO1FBQ2QsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDakMsQ0FBQztJQUVELG1CQUFtQjtRQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDbkIsQ0FBQzs7MkdBbkRXLGNBQWM7K0dBQWQsY0FBYyxjQUZkLE1BQU07MkZBRU4sY0FBYztrQkFIMUIsVUFBVTttQkFBQztvQkFDWCxVQUFVLEVBQUUsTUFBTTtpQkFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL3N0b3JhZ2Uvc3RvcmFnZS5zZXJ2aWNlJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ2FwdGlvblNlcnZpY2Uge1xuXHRwcml2YXRlIGxhbmdzID0gW1xuXHRcdHsgbmFtZTogJ0VuZ2xpc2gnLCBJU086ICdlbi1VUycgfSxcblx0XHR7IG5hbWU6ICdFc3Bhw7FvbCcsIElTTzogJ2VzLUVTJyB9LFxuXHRcdHsgbmFtZTogJ0RldXRzY2gnLCBJU086ICdkZS1ERScgfSxcblx0XHR7IG5hbWU6ICdGcmFuw6dhaXMnLCBJU086ICdmci1GUicgfSxcblx0XHR7IG5hbWU6ICfkuK3lm70nLCBJU086ICd6aC1DTicgfSxcblx0XHR7IG5hbWU6ICfgpLngpL/gpKjgpY3gpKbgpYAnLCBJU086ICdoaS1JTicgfSxcblx0XHR7IG5hbWU6ICdJdGFsaWFubycsIElTTzogJ2l0LUlUJyB9LFxuXHRcdHsgbmFtZTogJ+OChOOBvuOBqCcsIElTTzogJ2pwLUpQJyB9LFxuXHRcdHsgbmFtZTogJ1BvcnR1Z3XDqnMnLCBJU086ICdwdC1QVCcgfVxuXHRdO1xuXHRjYXB0aW9uTGFuZ1NlbGVjdGVkOiB7IG5hbWU6IHN0cmluZzsgSVNPOiBzdHJpbmcgfSA9IHsgbmFtZTogJ0VuZ2xpc2gnLCBJU086ICdlbi1VUycgfTtcblx0Y2FwdGlvbkxhbmdPYnM6IE9ic2VydmFibGU8eyBuYW1lOiBzdHJpbmc7IElTTzogc3RyaW5nIH0+O1xuXHRwcml2YXRlIF9jYXB0aW9uTGFuZ09iczogU3ViamVjdDx7IG5hbWU6IHN0cmluZzsgSVNPOiBzdHJpbmcgfT4gPSBuZXcgU3ViamVjdCgpO1xuXHRwcml2YXRlIGNhcHRpb25zRW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlKSB7XG5cdFx0Y29uc3QgaXNvID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXRDYXB0aW9uc0xhbmcoKTtcblx0XHRjb25zdCBsYW5nID0gdGhpcy5sYW5ncy5maW5kKChsYW5nKSA9PiBsYW5nLklTTyA9PT0gaXNvKTtcblx0XHRpZiAoaXNvICYmIGxhbmcpIHtcblx0XHRcdHRoaXMuY2FwdGlvbkxhbmdTZWxlY3RlZCA9IGxhbmc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY2FwdGlvbkxhbmdTZWxlY3RlZCA9IHRoaXMubGFuZ3NbMF07XG5cdFx0fVxuXHRcdHRoaXMuY2FwdGlvbkxhbmdPYnMgPSB0aGlzLl9jYXB0aW9uTGFuZ09icy5hc09ic2VydmFibGUoKTtcblx0fVxuXG5cdHNldENhcHRpb25zRW5hYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuXHRcdHRoaXMuY2FwdGlvbnNFbmFibGVkID0gdmFsdWU7XG5cdH1cblxuXHRhcmVDYXB0aW9uc0VuYWJsZWQoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuY2FwdGlvbnNFbmFibGVkO1xuXHR9XG5cblx0c2V0TGFuZ3VhZ2UobGFuZzogc3RyaW5nKSB7XG5cdFx0Y29uc3QgbmV3TGFuZyA9IHRoaXMubGFuZ3MuZmluZCgobCkgPT4gbC5JU08gPT09IGxhbmcpO1xuXHRcdGlmICghIW5ld0xhbmcgJiYgbmV3TGFuZy5JU08gIT09IHRoaXMuY2FwdGlvbkxhbmdTZWxlY3RlZC5JU08pIHtcblx0XHRcdHRoaXMuY2FwdGlvbkxhbmdTZWxlY3RlZCA9IG5ld0xhbmc7XG5cdFx0XHR0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNldENhcHRpb25MYW5nKGxhbmcpO1xuXHRcdFx0dGhpcy5fY2FwdGlvbkxhbmdPYnMubmV4dCh0aGlzLmNhcHRpb25MYW5nU2VsZWN0ZWQpO1xuXHRcdH1cblx0fVxuXG5cdGdldExhbmdTZWxlY3RlZCgpOiB7IG5hbWU6IHN0cmluZzsgSVNPOiBzdHJpbmcgfSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FwdGlvbkxhbmdTZWxlY3RlZDtcblx0fVxuXG5cdGdldENhcHRpb25MYW5ndWFnZXMoKTogeyBuYW1lOiBzdHJpbmc7IElTTzogc3RyaW5nIH1bXSB7XG5cdFx0cmV0dXJuIHRoaXMubGFuZ3M7XG5cdH1cbn1cbiJdfQ==