import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @internal
 */
export class PlatformService {
    constructor() { }
    isMobile() {
        return this.isAndroid() || this.isIos();
    }
    isFirefox() {
        return /Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent);
    }
    isAndroid() {
        return /\b(\w*Android\w*)\b/.test(navigator.userAgent) && /\b(\w*Mobile\w*)\b/.test(navigator.userAgent);
    }
    isIos() {
        return this.isIPhoneOrIPad(navigator?.userAgent);
    }
    isIPhoneOrIPad(userAgent) {
        const isIPad = /\b(\w*Macintosh\w*)\b/.test(userAgent);
        const isIPhone = /\b(\w*iPhone\w*)\b/.test(userAgent) && /\b(\w*Mobile\w*)\b/.test(userAgent);
        // && /\b(\w*iPhone\w*)\b/.test(navigator.platform);
        const isTouchable = 'ontouchend' in document;
        return (isIPad || isIPhone) && isTouchable;
    }
    isSafariIos() {
        return this.isIos() && this.isIOSWithSafari(navigator?.userAgent);
    }
    isIOSWithSafari(userAgent) {
        return (/\b(\w*Apple\w*)\b/.test(navigator.vendor) &&
            /\b(\w*Safari\w*)\b/.test(userAgent) &&
            !/\b(\w*CriOS\w*)\b/.test(userAgent) &&
            !/\b(\w*FxiOS\w*)\b/.test(userAgent));
    }
}
PlatformService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: PlatformService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
PlatformService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: PlatformService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: PlatformService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL29wZW52aWR1LWFuZ3VsYXIvc3JjL2xpYi9zZXJ2aWNlcy9wbGF0Zm9ybS9wbGF0Zm9ybS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTNDOztHQUVHO0FBSUgsTUFBTSxPQUFPLGVBQWU7SUFDM0IsZ0JBQWUsQ0FBQztJQUVoQixRQUFRO1FBQ1AsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxTQUFTO1FBQ1IsT0FBTyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxTQUFTO1FBQ1IsT0FBTyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVELEtBQUs7UUFDSixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFDTyxjQUFjLENBQUMsU0FBUztRQUMvQixNQUFNLE1BQU0sR0FBRyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkQsTUFBTSxRQUFRLEdBQUcsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5RixvREFBb0Q7UUFDcEQsTUFBTSxXQUFXLEdBQUcsWUFBWSxJQUFJLFFBQVEsQ0FBQztRQUU3QyxPQUFPLENBQUMsTUFBTSxJQUFJLFFBQVEsQ0FBQyxJQUFJLFdBQVcsQ0FBQztJQUM1QyxDQUFDO0lBRU8sV0FBVztRQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU8sZUFBZSxDQUFDLFNBQVM7UUFDaEMsT0FBTyxDQUNOLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1lBQzFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDcEMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3BDLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUNwQyxDQUFDO0lBQ0gsQ0FBQzs7NEdBdENXLGVBQWU7Z0hBQWYsZUFBZSxjQUZmLE1BQU07MkZBRU4sZUFBZTtrQkFIM0IsVUFBVTttQkFBQztvQkFDWCxVQUFVLEVBQUUsTUFBTTtpQkFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbkBJbmplY3RhYmxlKHtcblx0cHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBsYXRmb3JtU2VydmljZSB7XG5cdGNvbnN0cnVjdG9yKCkge31cblxuXHRpc01vYmlsZSgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5pc0FuZHJvaWQoKSB8fCB0aGlzLmlzSW9zKCk7XG5cdH1cblxuXHRpc0ZpcmVmb3goKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIC9GaXJlZm94W1xcL1xcc10oXFxkK1xcLlxcZCspLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXHR9XG5cblx0aXNBbmRyb2lkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAvXFxiKFxcdypBbmRyb2lkXFx3KilcXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgL1xcYihcXHcqTW9iaWxlXFx3KilcXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cdH1cblxuXHRpc0lvcygpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5pc0lQaG9uZU9ySVBhZChuYXZpZ2F0b3I/LnVzZXJBZ2VudCk7XG5cdH1cblx0cHJpdmF0ZSBpc0lQaG9uZU9ySVBhZCh1c2VyQWdlbnQpOiBib29sZWFuIHtcblx0XHRjb25zdCBpc0lQYWQgPSAvXFxiKFxcdypNYWNpbnRvc2hcXHcqKVxcYi8udGVzdCh1c2VyQWdlbnQpO1xuXHRcdGNvbnN0IGlzSVBob25lID0gL1xcYihcXHcqaVBob25lXFx3KilcXGIvLnRlc3QodXNlckFnZW50KSAmJiAvXFxiKFxcdypNb2JpbGVcXHcqKVxcYi8udGVzdCh1c2VyQWdlbnQpO1xuXHRcdC8vICYmIC9cXGIoXFx3KmlQaG9uZVxcdyopXFxiLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk7XG5cdFx0Y29uc3QgaXNUb3VjaGFibGUgPSAnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQ7XG5cblx0XHRyZXR1cm4gKGlzSVBhZCB8fCBpc0lQaG9uZSkgJiYgaXNUb3VjaGFibGU7XG5cdH1cblxuXHRwcml2YXRlIGlzU2FmYXJpSW9zKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmlzSW9zKCkgJiYgdGhpcy5pc0lPU1dpdGhTYWZhcmkobmF2aWdhdG9yPy51c2VyQWdlbnQpO1xuXHR9XG5cblx0cHJpdmF0ZSBpc0lPU1dpdGhTYWZhcmkodXNlckFnZW50KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdC9cXGIoXFx3KkFwcGxlXFx3KilcXGIvLnRlc3QobmF2aWdhdG9yLnZlbmRvcikgJiZcblx0XHRcdC9cXGIoXFx3KlNhZmFyaVxcdyopXFxiLy50ZXN0KHVzZXJBZ2VudCkgJiZcblx0XHRcdCEvXFxiKFxcdypDcmlPU1xcdyopXFxiLy50ZXN0KHVzZXJBZ2VudCkgJiZcblx0XHRcdCEvXFxiKFxcdypGeGlPU1xcdyopXFxiLy50ZXN0KHVzZXJBZ2VudClcblx0XHQpO1xuXHR9XG59XG4iXX0=