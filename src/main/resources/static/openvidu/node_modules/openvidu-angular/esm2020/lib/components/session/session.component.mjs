import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { VideoType } from '../../models/video-type.model';
import { animate, style, transition, trigger } from '@angular/animations';
import { skip } from 'rxjs';
import { SidenavMode } from '../../models/layout.model';
import { PanelType } from '../../models/panel.model';
import { Signal } from '../../models/signal.model';
import * as i0 from "@angular/core";
import * as i1 from "../../services/action/action.service";
import * as i2 from "../../services/openvidu/openvidu.service";
import * as i3 from "../../services/participant/participant.service";
import * as i4 from "../../services/logger/logger.service";
import * as i5 from "../../services/chat/chat.service";
import * as i6 from "../../services/config/openvidu-angular.config.service";
import * as i7 from "../../services/layout/layout.service";
import * as i8 from "../../services/panel/panel.service";
import * as i9 from "../../services/recording/recording.service";
import * as i10 from "../../services/translate/translate.service";
import * as i11 from "../../services/caption/caption.service";
import * as i12 from "../../services/platform/platform.service";
import * as i13 from "../../services/virtual-background/virtual-background.service";
import * as i14 from "@angular/common";
import * as i15 from "@angular/material/sidenav";
import * as i16 from "@angular/flex-layout/extended";
/**
 * @internal
 */
export class SessionComponent {
    constructor(actionService, openviduService, participantService, loggerSrv, chatService, libService, layoutService, panelService, recordingService, translateService, captionService, platformService, backgroundService, cd) {
        this.actionService = actionService;
        this.openviduService = openviduService;
        this.participantService = participantService;
        this.loggerSrv = loggerSrv;
        this.chatService = chatService;
        this.libService = libService;
        this.layoutService = layoutService;
        this.panelService = panelService;
        this.recordingService = recordingService;
        this.translateService = translateService;
        this.captionService = captionService;
        this.platformService = platformService;
        this.backgroundService = backgroundService;
        this.cd = cd;
        this.usedInPrejoinPage = false;
        this.onSessionCreated = new EventEmitter();
        this.onNodeCrashed = new EventEmitter();
        this.sidenavMode = SidenavMode.SIDE;
        this.preparing = true;
        this.SIDENAV_WIDTH_LIMIT_MODE = 790;
        this.log = this.loggerSrv.get('SessionComponent');
    }
    beforeunloadHandler() {
        this.leaveSession();
    }
    sizeChange() {
        this.layoutService.update();
    }
    set sidenavMenu(menu) {
        setTimeout(() => {
            if (menu) {
                this.sideMenu = menu;
                this.subscribeToTogglingMenu();
            }
        }, 0);
    }
    set videoContainer(container) {
        setTimeout(() => {
            if (container && !this.toolbarTemplate) {
                container.nativeElement.style.height = '100%';
                container.nativeElement.style.minHeight = '100%';
                this.layoutService.update();
            }
        }, 0);
    }
    set container(container) {
        setTimeout(() => {
            if (container) {
                this.drawer = container;
                this.drawer._contentMarginChanges.subscribe(() => {
                    setTimeout(() => {
                        this.stopUpdateLayoutInterval();
                        this.layoutService.update();
                        this.drawer.autosize = false;
                    }, 250);
                });
            }
        }, 0);
    }
    set layoutContainer(container) {
        setTimeout(async () => {
            if (container) {
                // Apply background from storage when layout container is in DOM
                await this.backgroundService.applyBackgroundFromStorage();
            }
        }, 0);
    }
    async ngOnInit() {
        if (!this.usedInPrejoinPage) {
            if (!this.openviduService.getScreenToken()) {
                // Hide screenshare button if screen token does not exist
                this.libService.screenshareButton.next(false);
            }
            this.session = this.openviduService.getWebcamSession();
            this.sessionScreen = this.openviduService.getScreenSession();
            this.subscribeToOpenViduException();
            this.subscribeToCaptionLanguage();
            this.subscribeToConnectionCreatedAndDestroyed();
            this.subscribeToStreamCreated();
            this.subscribeToStreamDestroyed();
            this.subscribeToStreamPropertyChange();
            this.subscribeToNicknameChanged();
            this.chatService.subscribeToChat();
            this.subscribeToReconnection();
            const recordingEnabled = this.libService.recordingButton.getValue() && this.libService.recordingActivity.getValue();
            if (recordingEnabled) {
                this.subscribeToRecordingEvents();
            }
            this.onSessionCreated.emit(this.session);
            await this.connectToSession();
            // ios devices appear with blank video. Muting and unmuting it fix this problem
            if (this.platformService.isIos() && this.participantService.isMyCameraActive()) {
                await this.openviduService.publishVideo(false);
                await this.openviduService.publishVideo(true);
            }
        }
        this.preparing = false;
        this.cd.markForCheck();
    }
    ngOnDestroy() {
        // Reconnecting session is received in Firefox
        // To avoid 'Connection lost' message uses session.off()
        this.session?.off('reconnecting');
        this.participantService.clear();
        this.session = null;
        this.sessionScreen = null;
        if (this.menuSubscription)
            this.menuSubscription.unsubscribe();
        if (this.layoutWidthSubscription)
            this.layoutWidthSubscription.unsubscribe();
    }
    leaveSession() {
        this.log.d('Leaving session...');
        this.openviduService.disconnect();
    }
    subscribeToTogglingMenu() {
        this.sideMenu.openedChange.subscribe(() => {
            this.stopUpdateLayoutInterval();
            this.layoutService.update();
        });
        this.sideMenu.openedStart.subscribe(() => {
            this.startUpdateLayoutInterval();
        });
        this.sideMenu.closedStart.subscribe(() => {
            this.startUpdateLayoutInterval();
        });
        this.menuSubscription = this.panelService.panelOpenedObs.pipe(skip(1)).subscribe((ev) => {
            if (this.sideMenu) {
                this.settingsPanelOpened = ev.opened && ev.type === PanelType.SETTINGS;
                if (this.sideMenu.opened && ev.opened) {
                    if (ev.type === PanelType.SETTINGS || ev.oldType === PanelType.SETTINGS) {
                        // Switch from SETTINGS to another panel and vice versa.
                        // As the SETTINGS panel will be bigger than others, the sidenav container must be updated.
                        // Setting autosize to 'true' allows update it.
                        this.drawer.autosize = true;
                        this.startUpdateLayoutInterval();
                    }
                }
                ev.opened ? this.sideMenu.open() : this.sideMenu.close();
            }
        });
    }
    subscribeToLayoutWidth() {
        this.layoutWidthSubscription = this.layoutService.layoutWidthObs.subscribe((width) => {
            this.sidenavMode = width <= this.SIDENAV_WIDTH_LIMIT_MODE ? SidenavMode.OVER : SidenavMode.SIDE;
        });
    }
    async connectToSession() {
        try {
            const webcamToken = this.openviduService.getWebcamToken();
            const screenToken = this.openviduService.getScreenToken();
            if (this.participantService.haveICameraAndScreenActive()) {
                await this.openviduService.connectSession(this.openviduService.getWebcamSession(), webcamToken);
                await this.openviduService.connectSession(this.openviduService.getScreenSession(), screenToken);
                await this.openviduService.publish(this.participantService.getMyCameraPublisher());
                await this.openviduService.publish(this.participantService.getMyScreenPublisher());
            }
            else if (this.participantService.isOnlyMyScreenActive()) {
                await this.openviduService.connectSession(this.openviduService.getScreenSession(), screenToken);
                await this.openviduService.publish(this.participantService.getMyScreenPublisher());
            }
            else {
                await this.openviduService.connectSession(this.openviduService.getWebcamSession(), webcamToken);
                await this.openviduService.publish(this.participantService.getMyCameraPublisher());
            }
        }
        catch (error) {
            // this._error.emit({ error: error.error, messgae: error.message, code: error.code, status: error.status });
            this.log.e('There was an error connecting to the session:', error.code, error.message);
            this.actionService.openDialog(this.translateService.translate('ERRORS.SESSION'), error?.error || error?.message || error);
        }
    }
    subscribeToOpenViduException() {
        this.session.on('exception', (event) => {
            this.log.e(event.name, event.message);
        });
    }
    subscribeToConnectionCreatedAndDestroyed() {
        this.session.on('connectionCreated', (event) => {
            const connectionId = event.connection?.connectionId;
            const nickname = this.participantService.getNicknameFromConnectionData(event.connection.data);
            const isRemoteConnection = !this.openviduService.isMyOwnConnection(connectionId);
            const isCameraConnection = !nickname?.includes(`_${VideoType.SCREEN}`);
            const data = event.connection?.data;
            if (isRemoteConnection && isCameraConnection) {
                // Adding participant when connection is created and it's not screen
                this.participantService.addRemoteConnection(connectionId, data, null);
                //Sending nicnkanme signal to new participants
                if (this.openviduService.needSendNicknameSignal()) {
                    const data = { clientData: this.participantService.getMyNickname() };
                    this.openviduService.sendSignal(Signal.NICKNAME_CHANGED, [event.connection], data);
                }
            }
        });
        this.session.on('connectionDestroyed', (event) => {
            const nickname = this.participantService.getNicknameFromConnectionData(event.connection.data);
            const isRemoteConnection = !this.openviduService.isMyOwnConnection(event.connection.connectionId);
            const isCameraConnection = !nickname?.includes(`_${VideoType.SCREEN}`);
            // Deleting participant when connection is destroyed
            if (isRemoteConnection && isCameraConnection) {
                this.participantService.removeConnectionByConnectionId(event.connection.connectionId);
            }
        });
    }
    subscribeToStreamCreated() {
        this.session.on('streamCreated', async (event) => {
            const connectionId = event.stream?.connection?.connectionId;
            const data = event.stream?.connection?.data;
            const isCameraType = this.participantService.getTypeConnectionData(data) === VideoType.CAMERA;
            const isRemoteConnection = !this.openviduService.isMyOwnConnection(connectionId);
            if (isRemoteConnection) {
                const subscriber = this.session.subscribe(event.stream, undefined);
                this.participantService.addRemoteConnection(connectionId, data, subscriber);
                // this.oVSessionService.sendNicknameSignal(event.stream.connection);
                if (this.captionService.areCaptionsEnabled() && isCameraType) {
                    // Only subscribe to STT when stream is CAMERA type and it is a remote stream
                    try {
                        await this.session.subscribeToSpeechToText(event.stream, this.captionService.getLangSelected().ISO);
                    }
                    catch (error) {
                        this.log.e('Error subscribing from STT: ', error);
                    }
                }
            }
        });
    }
    subscribeToStreamDestroyed() {
        this.session.on('streamDestroyed', async (event) => {
            const connectionId = event.stream.connection.connectionId;
            const data = event.stream?.connection?.data;
            const isRemoteConnection = !this.openviduService.isMyOwnConnection(connectionId);
            const isCameraType = this.participantService.getTypeConnectionData(data) === VideoType.CAMERA;
            this.participantService.removeConnectionByConnectionId(connectionId);
            if (isRemoteConnection) {
                if (this.captionService.areCaptionsEnabled() && isCameraType) {
                    try {
                        await this.session.unsubscribeFromSpeechToText(event.stream);
                    }
                    catch (error) {
                        this.log.e('Error unsubscribing from STT: ', error);
                    }
                }
            }
        });
    }
    subscribeToCaptionLanguage() {
        this.captionLanguageSubscription = this.captionService.captionLangObs.subscribe(async (lang) => {
            if (this.captionService.areCaptionsEnabled()) {
                // Unsubscribe all streams from speech to text and re-subscribe with new language
                this.log.d('Re-subscribe from STT because of language changed to ', lang.ISO);
                for (const participant of this.participantService.getRemoteParticipants()) {
                    const streamManager = participant.getCameraConnection()?.streamManager;
                    if (!!streamManager?.stream) {
                        try {
                            await this.session.unsubscribeFromSpeechToText(streamManager.stream);
                            await this.session.subscribeToSpeechToText(streamManager.stream, lang.ISO);
                        }
                        catch (error) {
                            this.log.e('Error re-subscribing to STT: ', error);
                        }
                    }
                }
            }
        });
    }
    subscribeToStreamPropertyChange() {
        this.session.on('streamPropertyChanged', (event) => {
            const connectionId = event.stream.connection.connectionId;
            const isRemoteConnection = !this.openviduService.isMyOwnConnection(connectionId);
            if (isRemoteConnection) {
                this.participantService.updateRemoteParticipants();
            }
        });
    }
    subscribeToNicknameChanged() {
        this.session.on(`signal:${Signal.NICKNAME_CHANGED}`, (event) => {
            const connectionId = event.from.connectionId;
            const isRemoteConnection = !this.openviduService.isMyOwnConnection(connectionId);
            if (isRemoteConnection) {
                const nickname = this.participantService.getNicknameFromConnectionData(event.data);
                this.participantService.setRemoteNickname(connectionId, nickname);
            }
        });
    }
    subscribeToReconnection() {
        this.session.on('reconnecting', () => {
            this.log.w('Connection lost: Reconnecting');
            this.actionService.openDialog(this.translateService.translate('ERRORS.CONNECTION'), this.translateService.translate('ERRORS.RECONNECT'), false);
        });
        this.session.on('reconnected', () => {
            this.log.w('Connection lost: Reconnected');
            this.actionService.closeDialog();
        });
        this.session.on('sessionDisconnected', (event) => {
            if (event.reason === 'nodeCrashed') {
                this.actionService.openDialog(this.translateService.translate('ERRORS.CONNECTION'), this.translateService.translate('ERRORS.RECONNECT'), false);
                this.onNodeCrashed.emit();
            }
            else if (event.reason === 'networkDisconnect') {
                this.actionService.closeDialog();
                this.leaveSession();
            }
        });
    }
    subscribeToRecordingEvents() {
        this.session.on('recordingStarted', (event) => {
            this.recordingService.startRecording(event);
        });
        this.session.on('recordingStopped', (event) => {
            this.recordingService.stopRecording(event);
        });
    }
    startUpdateLayoutInterval() {
        this.updateLayoutInterval = setInterval(() => {
            this.layoutService.update();
        }, 50);
    }
    stopUpdateLayoutInterval() {
        if (this.updateLayoutInterval) {
            clearInterval(this.updateLayoutInterval);
        }
    }
}
SessionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: SessionComponent, deps: [{ token: i1.ActionService }, { token: i2.OpenViduService }, { token: i3.ParticipantService }, { token: i4.LoggerService }, { token: i5.ChatService }, { token: i6.OpenViduAngularConfigService }, { token: i7.LayoutService }, { token: i8.PanelService }, { token: i9.RecordingService }, { token: i10.TranslateService }, { token: i11.CaptionService }, { token: i12.PlatformService }, { token: i13.VirtualBackgroundService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
SessionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: SessionComponent, selector: "ov-session", inputs: { usedInPrejoinPage: "usedInPrejoinPage" }, outputs: { onSessionCreated: "onSessionCreated", onNodeCrashed: "onNodeCrashed" }, host: { listeners: { "window:beforeunload": "beforeunloadHandler()", "window:resize": "sizeChange()" } }, queries: [{ propertyName: "toolbarTemplate", first: true, predicate: ["toolbar"], descendants: true, read: TemplateRef }, { propertyName: "panelTemplate", first: true, predicate: ["panel"], descendants: true, read: TemplateRef }, { propertyName: "layoutTemplate", first: true, predicate: ["layout"], descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "sidenavMenu", first: true, predicate: ["sidenav"], descendants: true }, { propertyName: "videoContainer", first: true, predicate: ["videoContainer"], descendants: true, read: ElementRef }, { propertyName: "container", first: true, predicate: ["container"], descendants: true }, { propertyName: "layoutContainer", first: true, predicate: ["layoutContainer"], descendants: true }], ngImport: i0, template: "<div id=\"session-container\" *ngIf=\"!preparing\" @sessionAnimation>\n\t<mat-sidenav-container #container #videoContainer class=\"sidenav-container\">\n\t\t<mat-sidenav\n\t\t\t#sidenav\n\t\t\tmode=\"{{ sidenavMode }}\"\n\t\t\tposition=\"end\"\n\t\t\tclass=\"sidenav-menu\"\n\t\t\t[ngClass]=\"{big: settingsPanelOpened}\"\n\t\t\tfixedInViewport=\"true\"\n\t\t\tfixedTopGap=\"0\"\n\t\t\tfixedBottomGap=\"0\"\n\t\t>\n\t\t\t<ng-container *ngTemplateOutlet=\"panelTemplate\"></ng-container>\n\t\t</mat-sidenav>\n\n\t\t<mat-sidenav-content class=\"sidenav-main\">\n\t\t\t<div id=\"layout-container\"  #layoutContainer>\n\t\t\t\t<ng-container *ngTemplateOutlet=\"layoutTemplate\"></ng-container>\n\t\t\t</div>\n\t\t</mat-sidenav-content>\n\t</mat-sidenav-container>\n\n\t<div id=\"footer-container\" *ngIf=\"toolbarTemplate\">\n\t\t<ng-container *ngTemplateOutlet=\"toolbarTemplate\"></ng-container>\n\t</div>\n</div>\n", styles: ["#session-container{background-color:var(--ov-primary-color);height:100%}.sidenav-container{position:relative;height:calc(100% - 70px);min-height:calc(100% - 70px);padding-top:0;width:100%;overflow:hidden}.sidenav-menu{display:flex;align-items:center;justify-content:center;width:380px;background-color:var(--ov-primary-color);border-left:none;position:absolute;z-index:1}.big{width:650px;max-width:100%}.mat-drawer.mat-drawer-side{z-index:0!important}.sidenav-main{height:100%;overflow:hidden;min-height:-webkit-fill-available;min-height:-moz-available}#layout-container{height:inherit;width:inherit}.mat-drawer-container{background-color:var(--ov-primary-color)}#toolbar-container,#footer-container{background-color:var(--ov-primary-color);width:100%;height:70px}#footer{color:#fff;height:25px;background-color:#333;padding:0 14px 0 0;position:absolute;bottom:0;left:0;z-index:999999}.reconnecting-container{width:100%;height:100%;z-index:1000;background-color:#000;opacity:80%;position:absolute}@media only screen and (max-width: 600px){#session-container{width:100%}}::ng-deep .mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:1px!important}::ng-deep .mat-input-element{caret-color:#000}::ng-deep .mat-primary .mat-option.mat-selected:not(.mat-option-disabled){color:#000}::ng-deep .mat-form-field-label{color:var(--ov-panel-text-color)!important}::ng-deep .mat-form-field.mat-focused .mat-form-field-ripple{background-color:var(--ov-panel-text-color)!important}::ng-deep .mat-drawer{background-color:transparent!important}\n"], dependencies: [{ kind: "directive", type: i14.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i14.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i15.MatSidenav, selector: "mat-sidenav", inputs: ["fixedInViewport", "fixedTopGap", "fixedBottomGap"], exportAs: ["matSidenav"] }, { kind: "component", type: i15.MatSidenavContainer, selector: "mat-sidenav-container", exportAs: ["matSidenavContainer"] }, { kind: "component", type: i15.MatSidenavContent, selector: "mat-sidenav-content" }, { kind: "directive", type: i16.DefaultClassDirective, selector: "  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]", inputs: ["ngClass", "ngClass.xs", "ngClass.sm", "ngClass.md", "ngClass.lg", "ngClass.xl", "ngClass.lt-sm", "ngClass.lt-md", "ngClass.lt-lg", "ngClass.lt-xl", "ngClass.gt-xs", "ngClass.gt-sm", "ngClass.gt-md", "ngClass.gt-lg"] }], animations: [trigger('sessionAnimation', [transition(':enter', [style({ opacity: 0 }), animate('50ms', style({ opacity: 1 }))])])], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: SessionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-session', animations: [trigger('sessionAnimation', [transition(':enter', [style({ opacity: 0 }), animate('50ms', style({ opacity: 1 }))])])], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div id=\"session-container\" *ngIf=\"!preparing\" @sessionAnimation>\n\t<mat-sidenav-container #container #videoContainer class=\"sidenav-container\">\n\t\t<mat-sidenav\n\t\t\t#sidenav\n\t\t\tmode=\"{{ sidenavMode }}\"\n\t\t\tposition=\"end\"\n\t\t\tclass=\"sidenav-menu\"\n\t\t\t[ngClass]=\"{big: settingsPanelOpened}\"\n\t\t\tfixedInViewport=\"true\"\n\t\t\tfixedTopGap=\"0\"\n\t\t\tfixedBottomGap=\"0\"\n\t\t>\n\t\t\t<ng-container *ngTemplateOutlet=\"panelTemplate\"></ng-container>\n\t\t</mat-sidenav>\n\n\t\t<mat-sidenav-content class=\"sidenav-main\">\n\t\t\t<div id=\"layout-container\"  #layoutContainer>\n\t\t\t\t<ng-container *ngTemplateOutlet=\"layoutTemplate\"></ng-container>\n\t\t\t</div>\n\t\t</mat-sidenav-content>\n\t</mat-sidenav-container>\n\n\t<div id=\"footer-container\" *ngIf=\"toolbarTemplate\">\n\t\t<ng-container *ngTemplateOutlet=\"toolbarTemplate\"></ng-container>\n\t</div>\n</div>\n", styles: ["#session-container{background-color:var(--ov-primary-color);height:100%}.sidenav-container{position:relative;height:calc(100% - 70px);min-height:calc(100% - 70px);padding-top:0;width:100%;overflow:hidden}.sidenav-menu{display:flex;align-items:center;justify-content:center;width:380px;background-color:var(--ov-primary-color);border-left:none;position:absolute;z-index:1}.big{width:650px;max-width:100%}.mat-drawer.mat-drawer-side{z-index:0!important}.sidenav-main{height:100%;overflow:hidden;min-height:-webkit-fill-available;min-height:-moz-available}#layout-container{height:inherit;width:inherit}.mat-drawer-container{background-color:var(--ov-primary-color)}#toolbar-container,#footer-container{background-color:var(--ov-primary-color);width:100%;height:70px}#footer{color:#fff;height:25px;background-color:#333;padding:0 14px 0 0;position:absolute;bottom:0;left:0;z-index:999999}.reconnecting-container{width:100%;height:100%;z-index:1000;background-color:#000;opacity:80%;position:absolute}@media only screen and (max-width: 600px){#session-container{width:100%}}::ng-deep .mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:1px!important}::ng-deep .mat-input-element{caret-color:#000}::ng-deep .mat-primary .mat-option.mat-selected:not(.mat-option-disabled){color:#000}::ng-deep .mat-form-field-label{color:var(--ov-panel-text-color)!important}::ng-deep .mat-form-field.mat-focused .mat-form-field-ripple{background-color:var(--ov-panel-text-color)!important}::ng-deep .mat-drawer{background-color:transparent!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ActionService }, { type: i2.OpenViduService }, { type: i3.ParticipantService }, { type: i4.LoggerService }, { type: i5.ChatService }, { type: i6.OpenViduAngularConfigService }, { type: i7.LayoutService }, { type: i8.PanelService }, { type: i9.RecordingService }, { type: i10.TranslateService }, { type: i11.CaptionService }, { type: i12.PlatformService }, { type: i13.VirtualBackgroundService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { toolbarTemplate: [{
                type: ContentChild,
                args: ['toolbar', { read: TemplateRef }]
            }], panelTemplate: [{
                type: ContentChild,
                args: ['panel', { read: TemplateRef }]
            }], layoutTemplate: [{
                type: ContentChild,
                args: ['layout', { read: TemplateRef }]
            }], usedInPrejoinPage: [{
                type: Input
            }], onSessionCreated: [{
                type: Output
            }], onNodeCrashed: [{
                type: Output
            }], beforeunloadHandler: [{
                type: HostListener,
                args: ['window:beforeunload']
            }], sizeChange: [{
                type: HostListener,
                args: ['window:resize']
            }], sidenavMenu: [{
                type: ViewChild,
                args: ['sidenav']
            }], videoContainer: [{
                type: ViewChild,
                args: ['videoContainer', { static: false, read: ElementRef }]
            }], container: [{
                type: ViewChild,
                args: ['container']
            }], layoutContainer: [{
                type: ViewChild,
                args: ['layoutContainer']
            }] } });
//# sourceMappingURL=data:application/json;base64,