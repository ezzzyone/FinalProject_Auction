import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { ParticipantModel } from '../../models/participant.model';
import { VideoType } from '../../models/video-type.model';
import * as i0 from "@angular/core";
import * as i1 from "../config/openvidu-angular.config.service";
import * as i2 from "../logger/logger.service";
export class ParticipantService {
    /**
     * @internal
     */
    constructor(openviduAngularConfigSrv, loggerSrv) {
        this.openviduAngularConfigSrv = openviduAngularConfigSrv;
        this.loggerSrv = loggerSrv;
        this._localParticipant = new BehaviorSubject(null);
        this._remoteParticipants = new BehaviorSubject([]);
        this.remoteParticipants = [];
        this.log = this.loggerSrv.get('ParticipantService');
        this.localParticipantObs = this._localParticipant.asObservable();
        this.remoteParticipantsObs = this._remoteParticipants.asObservable();
    }
    /**
     * @internal
     */
    initLocalParticipant(props) {
        this.localParticipant = this.newParticipant(props);
        this.updateLocalParticipant();
    }
    getLocalParticipant() {
        return this.localParticipant;
    }
    /**
     * @internal
     */
    getMyCameraPublisher() {
        return this.localParticipant.getCameraConnection().streamManager;
    }
    /**
     * @internal
     */
    setMyCameraPublisher(publisher) {
        this.localParticipant.setCameraPublisher(publisher);
    }
    /**
     * @internal
     */
    setMyCameraConnectionId(connectionId) {
        this.localParticipant.setCameraConnectionId(connectionId);
    }
    /**
     * @internal
     */
    getMyScreenPublisher() {
        return this.localParticipant.getScreenConnection()?.streamManager;
    }
    /**
     * @internal
     */
    setMyScreenPublisher(publisher) {
        this.localParticipant.setScreenPublisher(publisher);
    }
    /**
     * @internal
     */
    setMyScreenConnectionId(connectionId) {
        this.localParticipant.setScreenConnectionId(connectionId);
    }
    /**
     * @internal
     */
    enableWebcamStream() {
        this.localParticipant.enableCamera();
        this.updateLocalParticipant();
    }
    /**
     * @internal
     */
    disableWebcamStream() {
        this.localParticipant.disableCamera();
        this.updateLocalParticipant();
    }
    /**
     * @internal
     */
    activeMyScreenShare(screenPublisher) {
        this.log.d('Enabling screen publisher');
        const steramModel = {
            type: VideoType.SCREEN,
            videoEnlarged: true,
            streamManager: screenPublisher,
            connected: true,
            connectionId: ''
        };
        this.resetRemoteStreamsToNormalSize();
        this.resetMyStreamsToNormalSize();
        this.localParticipant.addConnection(steramModel);
        this.updateLocalParticipant();
    }
    /**
     * @internal
     */
    disableScreenStream() {
        this.localParticipant.disableScreen();
        this.updateLocalParticipant();
    }
    /**
     * @internal
     */
    setMyNickname(nickname) {
        this.localParticipant.setNickname(nickname);
        this.updateLocalParticipant();
    }
    /**
     * @internal
     */
    getMyNickname() {
        return this.localParticipant.nickname;
    }
    getMyRole() {
        return this.localParticipant.getRole();
    }
    /**
     * @internal
     */
    toggleMyVideoEnlarged(connectionId) {
        this.localParticipant.toggleVideoEnlarged(connectionId);
    }
    /**
     * @internal
     */
    resetMyStreamsToNormalSize() {
        if (this.localParticipant.someHasVideoEnlarged()) {
            this.localParticipant.setAllVideoEnlarged(false);
            this.updateLocalParticipant();
        }
    }
    /**
     * @internal
     */
    clear() {
        this.disableScreenStream();
        this.remoteParticipants = [];
        this.updateRemoteParticipants();
        this.updateLocalParticipant();
    }
    /**
     * @internal
     */
    isMyCameraActive() {
        return this.localParticipant.isCameraActive();
    }
    isMyVideoActive() {
        return this.localParticipant.isCameraVideoActive();
    }
    isMyAudioActive() {
        return this.localParticipant?.hasAudioActive();
    }
    /**
     * @internal
     */
    isMyScreenActive() {
        return this.localParticipant.isScreenActive();
    }
    /**
     * @internal
     */
    isOnlyMyCameraActive() {
        return this.isMyCameraActive() && !this.isMyScreenActive();
    }
    /**
     * @internal
     */
    isOnlyMyScreenActive() {
        return this.isMyScreenActive() && !this.isMyCameraActive();
    }
    /**
     * @internal
     */
    haveICameraAndScreenActive() {
        return this.isMyCameraActive() && this.isMyScreenActive();
    }
    /**
     * @internal
     */
    hasScreenAudioActive() {
        return this.localParticipant.isScreenAudioActive();
    }
    /**
     * Force to update the local participant object and fire a new {@link localParticipantObs} Observable event.
     */
    updateLocalParticipant() {
        this._localParticipant.next(Object.assign(Object.create(this.localParticipant), this.localParticipant));
    }
    /**
     * REMOTE USERS
     */
    /**
     * @internal
     */
    addRemoteConnection(connectionId, data, subscriber) {
        const type = this.getTypeConnectionData(data);
        const streamModel = {
            type,
            videoEnlarged: type === VideoType.SCREEN,
            streamManager: subscriber,
            connected: true,
            connectionId
        };
        // Avoiding create a new participant if participantId param is not exist in connection data
        // participant Id is necessary for allowing to have multiple connection in one participant
        const participantId = this.getParticipantIdFromData(data) || connectionId;
        const participantAdded = this.getRemoteParticipantById(participantId);
        if (!!participantAdded) {
            this.log.d('Adding connection to existing participant: ', participantId);
            if (participantAdded.hasConnectionType(streamModel.type)) {
                this.log.d('Participant has publisher, updating it');
                participantAdded.setPublisher(streamModel.type, subscriber);
            }
            else {
                this.log.d('Participant has not publisher, adding it');
                if (streamModel.type === VideoType.SCREEN) {
                    this.resetRemoteStreamsToNormalSize();
                    this.resetMyStreamsToNormalSize();
                }
                participantAdded.addConnection(streamModel);
            }
        }
        else {
            this.log.w('Creating new participant with id: ', participantId);
            const props = {
                nickname: this.getNicknameFromConnectionData(data),
                local: false,
                id: participantId
            };
            const remoteParticipant = this.newParticipant(props, streamModel);
            this.remoteParticipants.push(remoteParticipant);
        }
        this.updateRemoteParticipants();
    }
    getRemoteParticipants() {
        return this.remoteParticipants;
    }
    /**
     * @internal
     */
    resetRemoteStreamsToNormalSize() {
        this.remoteParticipants.forEach((participant) => participant.setAllVideoEnlarged(false));
        this.updateRemoteParticipants();
    }
    /**
     * @internal
     */
    removeConnectionByConnectionId(connectionId) {
        this.log.w('Deleting connection: ', connectionId);
        let participant;
        if (this.localParticipant.hasConnectionId(connectionId)) {
            participant = this.localParticipant;
        }
        else {
            participant = this.getRemoteParticipantByConnectionId(connectionId);
        }
        if (participant) {
            const removeStream = participant.removeConnection(connectionId);
            //TODO: Timeout of X seconds?? Its possible sometimes the connections map was empty but must not be deleted
            if (participant.streams.size === 0) {
                // Remove participants without connections
                this.remoteParticipants = this.remoteParticipants.filter((p) => p !== participant);
            }
            if (removeStream.type === VideoType.SCREEN) {
                const remoteScreens = this.remoteParticipants.filter((p) => p.isScreenActive());
                if (remoteScreens.length > 0) {
                    // Enlarging the last screen connection active
                    const lastScreenActive = remoteScreens[remoteScreens.length - 1];
                    lastScreenActive.setScreenEnlarged(true);
                }
                else if (this.localParticipant.isScreenActive()) {
                    // Enlarging my screen if thereare not any remote screen active
                    this.localParticipant.setScreenEnlarged(true);
                }
            }
            this.updateRemoteParticipants();
        }
    }
    /**
     * @internal
     */
    getRemoteParticipantByConnectionId(connectionId) {
        return this.remoteParticipants.find((p) => p.hasConnectionId(connectionId));
    }
    getRemoteParticipantById(id) {
        return this.remoteParticipants.find((p) => p.id === id);
    }
    /**
     * @internal
     */
    someoneIsSharingScreen() {
        return this.remoteParticipants.some((p) => p.someHasVideoEnlarged());
    }
    /**
     * @internal
     */
    toggleRemoteVideoEnlarged(connectionId) {
        const participant = this.getRemoteParticipantByConnectionId(connectionId);
        participant?.toggleVideoEnlarged(connectionId);
    }
    /**
     * @internal
     */
    getNicknameFromConnectionData(data) {
        try {
            return JSON.parse(data).clientData;
        }
        catch (error) {
            return 'OpenVidu_User';
        }
    }
    /**
     * @internal
     */
    setRemoteNickname(connectionId, nickname) {
        const participant = this.getRemoteParticipantByConnectionId(connectionId);
        if (participant) {
            participant.setNickname(nickname);
            this.updateRemoteParticipants();
        }
    }
    /**
     * @internal
     */
    setRemoteMutedForcibly(id, value) {
        const participant = this.getRemoteParticipantById(id);
        if (participant) {
            participant.setMutedForcibly(value);
            this.updateRemoteParticipants();
        }
    }
    /**
     * Force to update the remote participants object and fire a new {@link remoteParticipantsObs} Observable event.
     */
    updateRemoteParticipants() {
        this._remoteParticipants.next([...this.remoteParticipants]);
    }
    /**
     * @internal
     * @param data
     * @returns Stream video type
     */
    getTypeConnectionData(data) {
        try {
            return JSON.parse(data).type;
        }
        catch (error) {
            return VideoType.CAMERA;
        }
    }
    getParticipantIdFromData(data) {
        try {
            return JSON.parse(data).participantId;
        }
        catch (error) {
            return '';
        }
    }
    newParticipant(props, streamModel) {
        if (this.openviduAngularConfigSrv.hasParticipantFactory()) {
            return this.openviduAngularConfigSrv.getParticipantFactory().apply(this, [props, streamModel]);
        }
        return new ParticipantModel(props, streamModel);
    }
}
ParticipantService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantService, deps: [{ token: i1.OpenViduAngularConfigService }, { token: i2.LoggerService }], target: i0.ɵɵFactoryTarget.Injectable });
ParticipantService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.OpenViduAngularConfigService }, { type: i2.LoggerService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljaXBhbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL29wZW52aWR1LWFuZ3VsYXIvc3JjL2xpYi9zZXJ2aWNlcy9wYXJ0aWNpcGFudC9wYXJ0aWNpcGFudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUVuRCxPQUFPLEVBQTRCLGdCQUFnQixFQUFzQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ2hJLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7OztBQU8xRCxNQUFNLE9BQU8sa0JBQWtCO0lBb0I5Qjs7T0FFRztJQUNILFlBQXNCLHdCQUFzRCxFQUFZLFNBQXdCO1FBQTFGLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBOEI7UUFBWSxjQUFTLEdBQVQsU0FBUyxDQUFlO1FBbEJ0RyxzQkFBaUIsR0FBcUQsSUFBSSxlQUFlLENBQ2xHLElBQUksQ0FDSixDQUFDO1FBTVEsd0JBQW1CLEdBQWdELElBQUksZUFBZSxDQUE2QixFQUFFLENBQUMsQ0FBQztRQUd2SCx1QkFBa0IsR0FBK0IsRUFBRSxDQUFDO1FBUTdELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2pFLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsb0JBQW9CLENBQUMsS0FBNEI7UUFDaEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUks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QUNWO0lBQ0YsQ0FBQztJQUVTLGNBQWMsQ0FBQyxLQUE0QixFQUFFLFdBQXlCO1FBQy9FLElBQUksSUFBSSxDQUFDLHdCQUF3QixDQUFDLHFCQUFxQixFQUFFLEVBQUU7WUFDMUQsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7U0FDL0Y7UUFDRCxPQUFPLElBQUksZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7OytHQS9aVyxrQkFBa0I7bUhBQWxCLGtCQUFrQixjQUZsQixNQUFNOzJGQUVOLGtCQUFrQjtrQkFIOUIsVUFBVTttQkFBQztvQkFDWCxVQUFVLEVBQUUsTUFBTTtpQkFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQdWJsaXNoZXIsIFN1YnNjcmliZXIgfSBmcm9tICdvcGVudmlkdS1icm93c2VyJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSUxvZ2dlciB9IGZyb20gJy4uLy4uL21vZGVscy9sb2dnZXIubW9kZWwnO1xuaW1wb3J0IHsgUGFydGljaXBhbnRBYnN0cmFjdE1vZGVsLCBQYXJ0aWNpcGFudE1vZGVsLCBQYXJ0aWNpcGFudFByb3BlcnRpZXMsIFN0cmVhbU1vZGVsIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BhcnRpY2lwYW50Lm1vZGVsJztcbmltcG9ydCB7IFZpZGVvVHlwZSB9IGZyb20gJy4uLy4uL21vZGVscy92aWRlby10eXBlLm1vZGVsJztcbmltcG9ydCB7IE9wZW5WaWR1QW5ndWxhckNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi9jb25maWcvb3BlbnZpZHUtYW5ndWxhci5jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbG9nZ2VyL2xvZ2dlci5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGFydGljaXBhbnRTZXJ2aWNlIHtcblx0LyoqXG5cdCAqIExvY2FsIHBhcnRpY2lwYW50IE9ic2VydmFibGUgd2hpY2ggcHVzaGVzIHRoZSBsb2NhbCBwYXJ0aWNpcGFudCBvYmplY3QgaW4gZXZlcnkgdXBkYXRlLlxuXHQgKi9cblx0bG9jYWxQYXJ0aWNpcGFudE9iczogT2JzZXJ2YWJsZTxQYXJ0aWNpcGFudEFic3RyYWN0TW9kZWw+O1xuXHRwcm90ZWN0ZWQgX2xvY2FsUGFydGljaXBhbnQ6IEJlaGF2aW9yU3ViamVjdDxQYXJ0aWNpcGFudEFic3RyYWN0TW9kZWwgfCBudWxsPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UGFydGljaXBhbnRBYnN0cmFjdE1vZGVsIHwgbnVsbD4oXG5cdFx0bnVsbFxuXHQpO1xuXG5cdC8qKlxuXHQgKiBSZW1vdGUgcGFydGljaXBhbnRzIE9ic2VydmFibGUgd2hpY2ggcHVzaGVzIHRoZSByZW1vdGUgcGFydGljaXBhbnRzIGFycmF5IGluIGV2ZXJ5IHVwZGF0ZS5cblx0ICovXG5cdHJlbW90ZVBhcnRpY2lwYW50c09iczogT2JzZXJ2YWJsZTxQYXJ0aWNpcGFudEFic3RyYWN0TW9kZWxbXT47XG5cdHByb3RlY3RlZCBfcmVtb3RlUGFydGljaXBhbnRzOiBCZWhhdmlvclN1YmplY3Q8UGFydGljaXBhbnRBYnN0cmFjdE1vZGVsW10+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxQYXJ0aWNpcGFudEFic3RyYWN0TW9kZWxbXT4oW10pO1xuXG5cdHByb3RlY3RlZCBsb2NhbFBhcnRpY2lwYW50OiBQYXJ0aWNpcGFudEFic3RyYWN0TW9kZWw7XG5cdHByb3RlY3RlZCByZW1vdGVQYXJ0aWNpcGFudHM6IFBhcnRpY2lwYW50QWJzdHJhY3RNb2RlbFtdID0gW107XG5cblx0cHJvdGVjdGVkIGxvZzogSUxvZ2dlcjtcblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgb3BlbnZpZHVBbmd1bGFyQ29uZmlnU3J2OiBPcGVuVmlkdUFuZ3VsYXJDb25maWdTZXJ2aWNlLCBwcm90ZWN0ZWQgbG9nZ2VyU3J2OiBMb2dnZXJTZXJ2aWNlKSB7XG5cdFx0dGhpcy5sb2cgPSB0aGlzLmxvZ2dlclNydi5nZXQoJ1BhcnRpY2lwYW50U2VydmljZScpO1xuXG5cdFx0dGhpcy5sb2NhbFBhcnRpY2lwYW50T2JzID0gdGhpcy5fbG9jYWxQYXJ0aWNpcGFudC5hc09ic2VydmFibGUoKTtcblx0XHR0aGlzLnJlbW90ZVBhcnRpY2lwYW50c09icyA9IHRoaXMuX3JlbW90ZVBhcnRpY2lwYW50cy5hc09ic2VydmFibGUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGluaXRMb2NhbFBhcnRpY2lwYW50KHByb3BzOiBQYXJ0aWNpcGFudFByb3BlcnRpZXMpIHtcblx0XHR0aGlzLmxvY2FsUGFydGljaXBhbnQgPSB0aGlzLm5ld1BhcnRpY2lwYW50KHByb3BzKTtcblx0XHR0aGlzLnVwZGF0ZUxvY2FsUGFydGljaXBhbnQoKTtcblx0fVxuXG5cdGdldExvY2FsUGFydGljaXBhbnQoKTogUGFydGljaXBhbnRBYnN0cmFjdE1vZGVsIHtcblx0XHRyZXR1cm4gdGhpcy5sb2NhbFBhcnRpY2lwYW50O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0Z2V0TXlDYW1lcmFQdWJsaXNoZXIoKTogUHVibGlzaGVyIHtcblx0XHRyZXR1cm4gPFB1Ymxpc2hlcj50aGlzLmxvY2FsUGFydGljaXBhbnQuZ2V0Q2FtZXJhQ29ubmVjdGlvbigpLnN0cmVhbU1hbmFnZXI7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRzZXRNeUNhbWVyYVB1Ymxpc2hlcihwdWJsaXNoZXI6IFB1Ymxpc2hlcikge1xuXHRcdHRoaXMubG9jYWxQYXJ0aWNpcGFudC5zZXRDYW1lcmFQdWJsaXNoZXIocHVibGlzaGVyKTtcblx0fVxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRzZXRNeUNhbWVyYUNvbm5lY3Rpb25JZChjb25uZWN0aW9uSWQ6IHN0cmluZykge1xuXHRcdHRoaXMubG9jYWxQYXJ0aWNpcGFudC5zZXRDYW1lcmFDb25uZWN0aW9uSWQoY29ubmVjdGlvbklkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGdldE15U2NyZWVuUHVibGlzaGVyKCk6IFB1Ymxpc2hlciB7XG5cdFx0cmV0dXJuIDxQdWJsaXNoZXI+dGhpcy5sb2NhbFBhcnRpY2lwYW50LmdldFNjcmVlbkNvbm5lY3Rpb24oKT8uc3RyZWFtTWFuYWdlcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHNldE15U2NyZWVuUHVibGlzaGVyKHB1Ymxpc2hlcjogUHVibGlzaGVyKSB7XG5cdFx0dGhpcy5sb2NhbFBhcnRpY2lwYW50LnNldFNjcmVlblB1Ymxpc2hlcihwdWJsaXNoZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0c2V0TXlTY3JlZW5Db25uZWN0aW9uSWQoY29ubmVjdGlvbklkOiBzdHJpbmcpIHtcblx0XHR0aGlzLmxvY2FsUGFydGljaXBhbnQuc2V0U2NyZWVuQ29ubmVjdGlvbklkKGNvbm5lY3Rpb25JZCk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRlbmFibGVXZWJjYW1TdHJlYW0oKSB7XG5cdFx0dGhpcy5sb2NhbFBhcnRpY2lwYW50LmVuYWJsZUNhbWVyYSgpO1xuXHRcdHRoaXMudXBkYXRlTG9jYWxQYXJ0aWNpcGFudCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0ZGlzYWJsZVdlYmNhbVN0cmVhbSgpIHtcblx0XHR0aGlzLmxvY2FsUGFydGljaXBhbnQuZGlzYWJsZUNhbWVyYSgpO1xuXHRcdHRoaXMudXBkYXRlTG9jYWxQYXJ0aWNpcGFudCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0YWN0aXZlTXlTY3JlZW5TaGFyZShzY3JlZW5QdWJsaXNoZXI6IFB1Ymxpc2hlcikge1xuXHRcdHRoaXMubG9nLmQoJ0VuYWJsaW5nIHNjcmVlbiBwdWJsaXNoZXInKTtcblxuXHRcdGNvbnN0IHN0ZXJhbU1vZGVsOiBTdHJlYW1Nb2RlbCA9IHtcblx0XHRcdHR5cGU6IFZpZGVvVHlwZS5TQ1JFRU4sXG5cdFx0XHR2aWRlb0VubGFyZ2VkOiB0cnVlLFxuXHRcdFx0c3RyZWFtTWFuYWdlcjogc2NyZWVuUHVibGlzaGVyLFxuXHRcdFx0Y29ubmVjdGVkOiB0cnVlLFxuXHRcdFx0Y29ubmVjdGlvbklkOiAnJ1xuXHRcdH07XG5cblx0XHR0aGlzLnJlc2V0UmVtb3RlU3RyZWFtc1RvTm9ybWFsU2l6ZSgpO1xuXHRcdHRoaXMucmVzZXRNeVN0cmVhbXNUb05vcm1hbFNpemUoKTtcblx0XHR0aGlzLmxvY2FsUGFydGljaXBhbnQuYWRkQ29ubmVjdGlvbihzdGVyYW1Nb2RlbCk7XG5cdFx0dGhpcy51cGRhdGVMb2NhbFBhcnRpY2lwYW50KCk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRkaXNhYmxlU2NyZWVuU3RyZWFtKCkge1xuXHRcdHRoaXMubG9jYWxQYXJ0aWNpcGFudC5kaXNhYmxlU2NyZWVuKCk7XG5cdFx0dGhpcy51cGRhdGVMb2NhbFBhcnRpY2lwYW50KCk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRzZXRNeU5pY2tuYW1lKG5pY2tuYW1lOiBzdHJpbmcpIHtcblx0XHR0aGlzLmxvY2FsUGFydGljaXBhbnQuc2V0Tmlja25hbWUobmlja25hbWUpO1xuXHRcdHRoaXMudXBkYXRlTG9jYWxQYXJ0aWNpcGFudCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0Z2V0TXlOaWNrbmFtZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLmxvY2FsUGFydGljaXBhbnQubmlja25hbWU7XG5cdH1cblxuXHRnZXRNeVJvbGUoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5sb2NhbFBhcnRpY2lwYW50LmdldFJvbGUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHRvZ2dsZU15VmlkZW9FbmxhcmdlZChjb25uZWN0aW9uSWQ6IHN0cmluZykge1xuXHRcdHRoaXMubG9jYWxQYXJ0aWNpcGFudC50b2dnbGVWaWRlb0VubGFyZ2VkKGNvbm5lY3Rpb25JZCk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRyZXNldE15U3RyZWFtc1RvTm9ybWFsU2l6ZSgpIHtcblx0XHRpZiAodGhpcy5sb2NhbFBhcnRpY2lwYW50LnNvbWVIYXNWaWRlb0VubGFyZ2VkKCkpIHtcblx0XHRcdHRoaXMubG9jYWxQYXJ0aWNpcGFudC5zZXRBbGxWaWRlb0VubGFyZ2VkKGZhbHNlKTtcblx0XHRcdHRoaXMudXBkYXRlTG9jYWxQYXJ0aWNpcGFudCgpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGNsZWFyKCkge1xuXHRcdHRoaXMuZGlzYWJsZVNjcmVlblN0cmVhbSgpO1xuXHRcdHRoaXMucmVtb3RlUGFydGljaXBhbnRzID0gW107XG5cdFx0dGhpcy51cGRhdGVSZW1vdGVQYXJ0aWNpcGFudHMoKTtcblx0XHR0aGlzLnVwZGF0ZUxvY2FsUGFydGljaXBhbnQoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGlzTXlDYW1lcmFBY3RpdmUoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMubG9jYWxQYXJ0aWNpcGFudC5pc0NhbWVyYUFjdGl2ZSgpO1xuXHR9XG5cblx0aXNNeVZpZGVvQWN0aXZlKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmxvY2FsUGFydGljaXBhbnQuaXNDYW1lcmFWaWRlb0FjdGl2ZSgpO1xuXHR9XG5cblx0aXNNeUF1ZGlvQWN0aXZlKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmxvY2FsUGFydGljaXBhbnQ/Lmhhc0F1ZGlvQWN0aXZlKCk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRpc015U2NyZWVuQWN0aXZlKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmxvY2FsUGFydGljaXBhbnQuaXNTY3JlZW5BY3RpdmUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGlzT25seU15Q2FtZXJhQWN0aXZlKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmlzTXlDYW1lcmFBY3RpdmUoKSAmJiAhdGhpcy5pc015U2NyZWVuQWN0aXZlKCk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRpc09ubHlNeVNjcmVlbkFjdGl2ZSgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5pc015U2NyZWVuQWN0aXZlKCkgJiYgIXRoaXMuaXNNeUNhbWVyYUFjdGl2ZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0aGF2ZUlDYW1lcmFBbmRTY3JlZW5BY3RpdmUoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuaXNNeUNhbWVyYUFjdGl2ZSgpICYmIHRoaXMuaXNNeVNjcmVlbkFjdGl2ZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0aGFzU2NyZWVuQXVkaW9BY3RpdmUoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMubG9jYWxQYXJ0aWNpcGFudC5pc1NjcmVlbkF1ZGlvQWN0aXZlKCk7XG5cdH1cblxuXHQvKipcblx0ICogRm9yY2UgdG8gdXBkYXRlIHRoZSBsb2NhbCBwYXJ0aWNpcGFudCBvYmplY3QgYW5kIGZpcmUgYSBuZXcge0BsaW5rIGxvY2FsUGFydGljaXBhbnRPYnN9IE9ic2VydmFibGUgZXZlbnQuXG5cdCAqL1xuXHR1cGRhdGVMb2NhbFBhcnRpY2lwYW50KCkge1xuXHRcdHRoaXMuX2xvY2FsUGFydGljaXBhbnQubmV4dChPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUodGhpcy5sb2NhbFBhcnRpY2lwYW50KSwgdGhpcy5sb2NhbFBhcnRpY2lwYW50KSk7XG5cdH1cblxuXHQvKipcblx0ICogUkVNT1RFIFVTRVJTXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGFkZFJlbW90ZUNvbm5lY3Rpb24oY29ubmVjdGlvbklkOiBzdHJpbmcsIGRhdGE6IHN0cmluZywgc3Vic2NyaWJlcjogU3Vic2NyaWJlcikge1xuXHRcdGNvbnN0IHR5cGU6IFZpZGVvVHlwZSA9IHRoaXMuZ2V0VHlwZUNvbm5lY3Rpb25EYXRhKGRhdGEpO1xuXHRcdGNvbnN0IHN0cmVhbU1vZGVsOiBTdHJlYW1Nb2RlbCA9IHtcblx0XHRcdHR5cGUsXG5cdFx0XHR2aWRlb0VubGFyZ2VkOiB0eXBlID09PSBWaWRlb1R5cGUuU0NSRUVOLFxuXHRcdFx0c3RyZWFtTWFuYWdlcjogc3Vic2NyaWJlcixcblx0XHRcdGNvbm5lY3RlZDogdHJ1ZSxcblx0XHRcdGNvbm5lY3Rpb25JZFxuXHRcdH07XG5cblx0XHQvLyBBdm9pZGluZyBjcmVhdGUgYSBuZXcgcGFydGljaXBhbnQgaWYgcGFydGljaXBhbnRJZCBwYXJhbSBpcyBub3QgZXhpc3QgaW4gY29ubmVjdGlvbiBkYXRhXG5cdFx0Ly8gcGFydGljaXBhbnQgSWQgaXMgbmVjZXNzYXJ5IGZvciBhbGxvd2luZyB0byBoYXZlIG11bHRpcGxlIGNvbm5lY3Rpb24gaW4gb25lIHBhcnRpY2lwYW50XG5cdFx0Y29uc3QgcGFydGljaXBhbnRJZCA9IHRoaXMuZ2V0UGFydGljaXBhbnRJZEZyb21EYXRhKGRhdGEpIHx8IGNvbm5lY3Rpb25JZDtcblxuXHRcdGNvbnN0IHBhcnRpY2lwYW50QWRkZWQgPSB0aGlzLmdldFJlbW90ZVBhcnRpY2lwYW50QnlJZChwYXJ0aWNpcGFudElkKTtcblx0XHRpZiAoISFwYXJ0aWNpcGFudEFkZGVkKSB7XG5cdFx0XHR0aGlzLmxvZy5kKCdBZGRpbmcgY29ubmVjdGlvbiB0byBleGlzdGluZyBwYXJ0aWNpcGFudDogJywgcGFydGljaXBhbnRJZCk7XG5cdFx0XHRpZiAocGFydGljaXBhbnRBZGRlZC5oYXNDb25uZWN0aW9uVHlwZShzdHJlYW1Nb2RlbC50eXBlKSkge1xuXHRcdFx0XHR0aGlzLmxvZy5kKCdQYXJ0aWNpcGFudCBoYXMgcHVibGlzaGVyLCB1cGRhdGluZyBpdCcpO1xuXHRcdFx0XHRwYXJ0aWNpcGFudEFkZGVkLnNldFB1Ymxpc2hlcihzdHJlYW1Nb2RlbC50eXBlLCBzdWJzY3JpYmVyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMubG9nLmQoJ1BhcnRpY2lwYW50IGhhcyBub3QgcHVibGlzaGVyLCBhZGRpbmcgaXQnKTtcblx0XHRcdFx0aWYgKHN0cmVhbU1vZGVsLnR5cGUgPT09IFZpZGVvVHlwZS5TQ1JFRU4pIHtcblx0XHRcdFx0XHR0aGlzLnJlc2V0UmVtb3RlU3RyZWFtc1RvTm9ybWFsU2l6ZSgpO1xuXHRcdFx0XHRcdHRoaXMucmVzZXRNeVN0cmVhbXNUb05vcm1hbFNpemUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwYXJ0aWNpcGFudEFkZGVkLmFkZENvbm5lY3Rpb24oc3RyZWFtTW9kZWwpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmxvZy53KCdDcmVhdGluZyBuZXcgcGFydGljaXBhbnQgd2l0aCBpZDogJywgcGFydGljaXBhbnRJZCk7XG5cdFx0XHRjb25zdCBwcm9wczogUGFydGljaXBhbnRQcm9wZXJ0aWVzID0ge1xuXHRcdFx0XHRuaWNrbmFtZTogdGhpcy5nZXROaWNrbmFtZUZyb21Db25uZWN0aW9uRGF0YShkYXRhKSxcblx0XHRcdFx0bG9jYWw6IGZhbHNlLFxuXHRcdFx0XHRpZDogcGFydGljaXBhbnRJZFxuXHRcdFx0fTtcblx0XHRcdGNvbnN0IHJlbW90ZVBhcnRpY2lwYW50ID0gdGhpcy5uZXdQYXJ0aWNpcGFudChwcm9wcywgc3RyZWFtTW9kZWwpO1xuXHRcdFx0dGhpcy5yZW1vdGVQYXJ0aWNpcGFudHMucHVzaChyZW1vdGVQYXJ0aWNpcGFudCk7XG5cdFx0fVxuXHRcdHRoaXMudXBkYXRlUmVtb3RlUGFydGljaXBhbnRzKCk7XG5cdH1cblxuXHRnZXRSZW1vdGVQYXJ0aWNpcGFudHMoKTogUGFydGljaXBhbnRBYnN0cmFjdE1vZGVsW10ge1xuXHRcdHJldHVybiB0aGlzLnJlbW90ZVBhcnRpY2lwYW50cztcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHJlc2V0UmVtb3RlU3RyZWFtc1RvTm9ybWFsU2l6ZSgpIHtcblx0XHR0aGlzLnJlbW90ZVBhcnRpY2lwYW50cy5mb3JFYWNoKChwYXJ0aWNpcGFudCkgPT4gcGFydGljaXBhbnQuc2V0QWxsVmlkZW9FbmxhcmdlZChmYWxzZSkpO1xuXHRcdHRoaXMudXBkYXRlUmVtb3RlUGFydGljaXBhbnRzKCk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRyZW1vdmVDb25uZWN0aW9uQnlDb25uZWN0aW9uSWQoY29ubmVjdGlvbklkOiBzdHJpbmcpIHtcblx0XHR0aGlzLmxvZy53KCdEZWxldGluZyBjb25uZWN0aW9uOiAnLCBjb25uZWN0aW9uSWQpO1xuXHRcdGxldCBwYXJ0aWNpcGFudDogUGFydGljaXBhbnRBYnN0cmFjdE1vZGVsIHwgdW5kZWZpbmVkO1xuXHRcdGlmICh0aGlzLmxvY2FsUGFydGljaXBhbnQuaGFzQ29ubmVjdGlvbklkKGNvbm5lY3Rpb25JZCkpIHtcblx0XHRcdHBhcnRpY2lwYW50ID0gdGhpcy5sb2NhbFBhcnRpY2lwYW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwYXJ0aWNpcGFudCA9IHRoaXMuZ2V0UmVtb3RlUGFydGljaXBhbnRCeUNvbm5lY3Rpb25JZChjb25uZWN0aW9uSWQpO1xuXHRcdH1cblxuXHRcdGlmIChwYXJ0aWNpcGFudCkge1xuXHRcdFx0Y29uc3QgcmVtb3ZlU3RyZWFtOiBTdHJlYW1Nb2RlbCA9IHBhcnRpY2lwYW50LnJlbW92ZUNvbm5lY3Rpb24oY29ubmVjdGlvbklkKTtcblx0XHRcdC8vVE9ETzogVGltZW91dCBvZiBYIHNlY29uZHM/PyBJdHMgcG9zc2libGUgc29tZXRpbWVzIHRoZSBjb25uZWN0aW9ucyBtYXAgd2FzIGVtcHR5IGJ1dCBtdXN0IG5vdCBiZSBkZWxldGVkXG5cdFx0XHRpZiAocGFydGljaXBhbnQuc3RyZWFtcy5zaXplID09PSAwKSB7XG5cdFx0XHRcdC8vIFJlbW92ZSBwYXJ0aWNpcGFudHMgd2l0aG91dCBjb25uZWN0aW9uc1xuXHRcdFx0XHR0aGlzLnJlbW90ZVBhcnRpY2lwYW50cyA9IHRoaXMucmVtb3RlUGFydGljaXBhbnRzLmZpbHRlcigocCkgPT4gcCAhPT0gcGFydGljaXBhbnQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlbW92ZVN0cmVhbS50eXBlID09PSBWaWRlb1R5cGUuU0NSRUVOKSB7XG5cdFx0XHRcdGNvbnN0IHJlbW90ZVNjcmVlbnMgPSB0aGlzLnJlbW90ZVBhcnRpY2lwYW50cy5maWx0ZXIoKHApID0+IHAuaXNTY3JlZW5BY3RpdmUoKSk7XG5cdFx0XHRcdGlmIChyZW1vdGVTY3JlZW5zLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHQvLyBFbmxhcmdpbmcgdGhlIGxhc3Qgc2NyZWVuIGNvbm5lY3Rpb24gYWN0aXZlXG5cdFx0XHRcdFx0Y29uc3QgbGFzdFNjcmVlbkFjdGl2ZSA9IHJlbW90ZVNjcmVlbnNbcmVtb3RlU2NyZWVucy5sZW5ndGggLSAxXTtcblx0XHRcdFx0XHRsYXN0U2NyZWVuQWN0aXZlLnNldFNjcmVlbkVubGFyZ2VkKHRydWUpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMubG9jYWxQYXJ0aWNpcGFudC5pc1NjcmVlbkFjdGl2ZSgpKSB7XG5cdFx0XHRcdFx0Ly8gRW5sYXJnaW5nIG15IHNjcmVlbiBpZiB0aGVyZWFyZSBub3QgYW55IHJlbW90ZSBzY3JlZW4gYWN0aXZlXG5cdFx0XHRcdFx0dGhpcy5sb2NhbFBhcnRpY2lwYW50LnNldFNjcmVlbkVubGFyZ2VkKHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMudXBkYXRlUmVtb3RlUGFydGljaXBhbnRzKCk7XG5cdFx0fVxuXHR9XG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGdldFJlbW90ZVBhcnRpY2lwYW50QnlDb25uZWN0aW9uSWQoY29ubmVjdGlvbklkOiBzdHJpbmcpOiBQYXJ0aWNpcGFudEFic3RyYWN0TW9kZWwgfCB1bmRlZmluZWQge1xuXHRcdHJldHVybiB0aGlzLnJlbW90ZVBhcnRpY2lwYW50cy5maW5kKChwKSA9PiBwLmhhc0Nvbm5lY3Rpb25JZChjb25uZWN0aW9uSWQpKTtcblx0fVxuXG5cdHByb3RlY3RlZCBnZXRSZW1vdGVQYXJ0aWNpcGFudEJ5SWQoaWQ6IHN0cmluZyk6IFBhcnRpY2lwYW50QWJzdHJhY3RNb2RlbCB8IHVuZGVmaW5lZCB7XG5cdFx0cmV0dXJuIHRoaXMucmVtb3RlUGFydGljaXBhbnRzLmZpbmQoKHApID0+IHAuaWQgPT09IGlkKTtcblx0fVxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRzb21lb25lSXNTaGFyaW5nU2NyZWVuKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLnJlbW90ZVBhcnRpY2lwYW50cy5zb21lKChwKSA9PiBwLnNvbWVIYXNWaWRlb0VubGFyZ2VkKCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0dG9nZ2xlUmVtb3RlVmlkZW9FbmxhcmdlZChjb25uZWN0aW9uSWQ6IHN0cmluZykge1xuXHRcdGNvbnN0IHBhcnRpY2lwYW50ID0gdGhpcy5nZXRSZW1vdGVQYXJ0aWNpcGFudEJ5Q29ubmVjdGlvbklkKGNvbm5lY3Rpb25JZCk7XG5cdFx0cGFydGljaXBhbnQ/LnRvZ2dsZVZpZGVvRW5sYXJnZWQoY29ubmVjdGlvbklkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGdldE5pY2tuYW1lRnJvbUNvbm5lY3Rpb25EYXRhKGRhdGE6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBKU09OLnBhcnNlKGRhdGEpLmNsaWVudERhdGE7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHJldHVybiAnT3BlblZpZHVfVXNlcic7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0c2V0UmVtb3RlTmlja25hbWUoY29ubmVjdGlvbklkOiBzdHJpbmcsIG5pY2tuYW1lOiBzdHJpbmcpIHtcblx0XHRjb25zdCBwYXJ0aWNpcGFudCA9IHRoaXMuZ2V0UmVtb3RlUGFydGljaXBhbnRCeUNvbm5lY3Rpb25JZChjb25uZWN0aW9uSWQpO1xuXHRcdGlmIChwYXJ0aWNpcGFudCkge1xuXHRcdFx0cGFydGljaXBhbnQuc2V0Tmlja25hbWUobmlja25hbWUpO1xuXHRcdFx0dGhpcy51cGRhdGVSZW1vdGVQYXJ0aWNpcGFudHMoKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRzZXRSZW1vdGVNdXRlZEZvcmNpYmx5KGlkOiBzdHJpbmcsIHZhbHVlOiBib29sZWFuKSB7XG5cdFx0Y29uc3QgcGFydGljaXBhbnQgPSB0aGlzLmdldFJlbW90ZVBhcnRpY2lwYW50QnlJZChpZCk7XG5cdFx0aWYgKHBhcnRpY2lwYW50KSB7XG5cdFx0XHRwYXJ0aWNpcGFudC5zZXRNdXRlZEZvcmNpYmx5KHZhbHVlKTtcblx0XHRcdHRoaXMudXBkYXRlUmVtb3RlUGFydGljaXBhbnRzKCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEZvcmNlIHRvIHVwZGF0ZSB0aGUgcmVtb3RlIHBhcnRpY2lwYW50cyBvYmplY3QgYW5kIGZpcmUgYSBuZXcge0BsaW5rIHJlbW90ZVBhcnRpY2lwYW50c09ic30gT2JzZXJ2YWJsZSBldmVudC5cblx0ICovXG5cdHVwZGF0ZVJlbW90ZVBhcnRpY2lwYW50cygpIHtcblx0XHR0aGlzLl9yZW1vdGVQYXJ0aWNpcGFudHMubmV4dChbLi4udGhpcy5yZW1vdGVQYXJ0aWNpcGFudHNdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogQHBhcmFtIGRhdGFcblx0ICogQHJldHVybnMgU3RyZWFtIHZpZGVvIHR5cGVcblx0ICovXG5cdGdldFR5cGVDb25uZWN0aW9uRGF0YShkYXRhOiBzdHJpbmcpOiBWaWRlb1R5cGUge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gSlNPTi5wYXJzZShkYXRhKS50eXBlO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRyZXR1cm4gVmlkZW9UeXBlLkNBTUVSQTtcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgZ2V0UGFydGljaXBhbnRJZEZyb21EYXRhKGRhdGE6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBKU09OLnBhcnNlKGRhdGEpLnBhcnRpY2lwYW50SWQ7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgbmV3UGFydGljaXBhbnQocHJvcHM6IFBhcnRpY2lwYW50UHJvcGVydGllcywgc3RyZWFtTW9kZWw/OiBTdHJlYW1Nb2RlbCkge1xuXHRcdGlmICh0aGlzLm9wZW52aWR1QW5ndWxhckNvbmZpZ1Nydi5oYXNQYXJ0aWNpcGFudEZhY3RvcnkoKSkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3BlbnZpZHVBbmd1bGFyQ29uZmlnU3J2LmdldFBhcnRpY2lwYW50RmFjdG9yeSgpLmFwcGx5KHRoaXMsIFtwcm9wcywgc3RyZWFtTW9kZWxdKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBQYXJ0aWNpcGFudE1vZGVsKHByb3BzLCBzdHJlYW1Nb2RlbCk7XG5cdH1cbn1cbiJdfQ==