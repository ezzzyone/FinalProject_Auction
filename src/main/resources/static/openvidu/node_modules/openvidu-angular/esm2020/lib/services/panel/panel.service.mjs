import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { PanelType } from '../../models/panel.model';
import * as i0 from "@angular/core";
import * as i1 from "../logger/logger.service";
export class PanelService {
    /**
     * @internal
     */
    constructor(loggerSrv) {
        this.loggerSrv = loggerSrv;
        this.isExternalOpened = false;
        this._panelOpened = new BehaviorSubject({ opened: false });
        this.panelMap = new Map();
        this.log = this.loggerSrv.get('PanelService');
        this.panelOpenedObs = this._panelOpened.asObservable();
        Object.values(PanelType).forEach((panel) => this.panelMap.set(panel, false));
    }
    /**
     * Open or close the panel type received. Calling this method with the panel opened and the same type panel, will close the panel.
     * If the type is differente, it will switch to the properly panel.
     */
    togglePanel(type, expand) {
        let nextOpenedValue = false;
        if (this.panelMap.has(type)) {
            this.log.d(`Toggling ${type} menu`);
            this.panelMap.forEach((opened, panel) => {
                if (panel === type) {
                    // Toggle panel
                    this.panelMap.set(panel, !opened);
                    nextOpenedValue = !opened;
                }
                else {
                    // Close others
                    this.panelMap.set(panel, false);
                }
            });
        }
        else {
            // Panel is external
            this.log.d('Toggling external panel');
            // Close all panels
            this.panelMap.forEach((_, panel) => this.panelMap.set(panel, false));
            // Opening when external panel is closed or is opened with another type
            this.isExternalOpened = !this.isExternalOpened || this.externalType !== type;
            this.externalType = !this.isExternalOpened ? '' : type;
            nextOpenedValue = this.isExternalOpened;
        }
        const oldType = this._panelOpened.getValue().type;
        this._panelOpened.next({ opened: nextOpenedValue, type, expand, oldType });
    }
    /**
     * @internal
     */
    isPanelOpened() {
        const anyOpened = Array.from(this.panelMap.values()).some((opened) => opened);
        return anyOpened || this.isExternalPanelOpened();
    }
    /**
     * Closes the panel (if opened)
     */
    closePanel() {
        this.panelMap.forEach((_, panel) => this.panelMap.set(panel, false));
        this._panelOpened.next({ opened: false });
    }
    /**
     * Whether the chat panel is opened or not.
     */
    isChatPanelOpened() {
        return !!this.panelMap.get(PanelType.CHAT);
    }
    /**
     * Whether the participants panel is opened or not.
     */
    isParticipantsPanelOpened() {
        return !!this.panelMap.get(PanelType.PARTICIPANTS);
    }
    /**
     * Whether the activities panel is opened or not.
     */
    isActivitiesPanelOpened() {
        return !!this.panelMap.get(PanelType.ACTIVITIES);
    }
    /**
     * Whether the settings panel is opened or not.
     */
    isSettingsPanelOpened() {
        return !!this.panelMap.get(PanelType.SETTINGS);
    }
    /**
     * Whether the background effects panel is opened or not.
     */
    isBackgroundEffectsPanelOpened() {
        return !!this.panelMap.get(PanelType.BACKGROUND_EFFECTS);
    }
    isExternalPanelOpened() {
        return this.isExternalOpened;
    }
}
PanelService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: PanelService, deps: [{ token: i1.LoggerService }], target: i0.ɵɵFactoryTarget.Injectable });
PanelService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: PanelService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: PanelService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.LoggerService }]; } });
//# sourceMappingURL=data:application/json;base64,