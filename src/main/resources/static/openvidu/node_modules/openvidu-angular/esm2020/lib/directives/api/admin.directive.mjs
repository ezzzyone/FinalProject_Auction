import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/config/openvidu-angular.config.service";
/**
 * The **recordingsList** directive allows show all recordings saved in your OpenVidu deployment in {@link AdminDashboardComponent}.
 *
 * Default: `[]`
 *
 * @example
 * <ov-admin-dashboard [recordingsList]="recordings"></ov-admin-dashboard>
 *
 */
export class AdminRecordingsListDirective {
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.recordingsValue = [];
    }
    set recordingsList(value) {
        this.recordingsValue = value;
        this.update(this.recordingsValue);
    }
    ngAfterViewInit() {
        this.update(this.recordingsValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.recordingsValue = null;
        this.update(null);
    }
    update(value) {
        if (this.libService.adminRecordingsList.getValue() !== value) {
            this.libService.adminRecordingsList.next(value);
        }
    }
}
AdminRecordingsListDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: AdminRecordingsListDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
AdminRecordingsListDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: AdminRecordingsListDirective, selector: "ov-admin-dashboard[recordingsList]", inputs: { recordingsList: "recordingsList" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: AdminRecordingsListDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-admin-dashboard[recordingsList]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { recordingsList: [{
                type: Input
            }] } });
/**
 * The **error** directive allows show the authentication error in {@link AdminLoginComponent}.
 *
 * Default: `null`
 *
 * @example
 * <ov-admin-login [error]="error"></ov-admin-login>
 *
 */
export class AdminLoginDirective {
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.errorValue = null;
    }
    set error(value) {
        this.errorValue = value;
        this.update(this.errorValue);
    }
    ngAfterViewInit() {
        this.update(this.errorValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.errorValue = null;
        this.update(null);
    }
    update(value) {
        if (this.libService.adminLoginError.getValue() !== value) {
            this.libService.adminLoginError.next(value);
        }
    }
}
AdminLoginDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: AdminLoginDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
AdminLoginDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: AdminLoginDirective, selector: "ov-admin-login[error]", inputs: { error: "error" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: AdminLoginDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-admin-login[error]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { error: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW4uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvb3BlbnZpZHUtYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvYXBpL2FkbWluLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUE0QixLQUFLLEVBQWMsTUFBTSxlQUFlLENBQUM7OztBQUl2Rjs7Ozs7Ozs7R0FRRztBQUlILE1BQU0sT0FBTyw0QkFBNEI7SUFTeEMsWUFBbUIsVUFBc0IsRUFBVSxVQUF3QztRQUF4RSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBOEI7UUFGM0Ysb0JBQWUsR0FBcUIsRUFBRSxDQUFDO0lBRXVELENBQUM7SUFQL0YsSUFBYSxjQUFjLENBQUMsS0FBc0I7UUFDakQsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQU1ELGVBQWU7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsV0FBVztRQUNWLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFDRCxLQUFLO1FBQ0osSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQXNCO1FBQzVCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLEVBQUU7WUFDN0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEQ7SUFDRixDQUFDOzt5SEExQlcsNEJBQTRCOzZHQUE1Qiw0QkFBNEI7MkZBQTVCLDRCQUE0QjtrQkFIeEMsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsb0NBQW9DO2lCQUM5Qzs0SUFHYSxjQUFjO3NCQUExQixLQUFLOztBQTJCUDs7Ozs7Ozs7R0FRRztBQUlILE1BQU0sT0FBTyxtQkFBbUI7SUFTL0IsWUFBbUIsVUFBc0IsRUFBVSxVQUF3QztRQUF4RSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBOEI7UUFGM0YsZUFBVSxHQUFRLElBQUksQ0FBQztJQUV1RSxDQUFDO0lBUC9GLElBQWEsS0FBSyxDQUFDLEtBQVU7UUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQU1ELGVBQWU7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQ0QsV0FBVztRQUNWLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFDRCxLQUFLO1FBQ0osSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVU7UUFDaEIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLEVBQUU7WUFDekQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVDO0lBQ0YsQ0FBQzs7Z0hBMUJXLG1CQUFtQjtvR0FBbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBSDlCLFNBQVM7bUJBQUM7b0JBQ1gsUUFBUSxFQUFFLHVCQUF1QjtpQkFDakM7NElBR2EsS0FBSztzQkFBakIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBJbnB1dCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVjb3JkaW5nSW5mbyB9IGZyb20gJy4uLy4uL21vZGVscy9yZWNvcmRpbmcubW9kZWwnO1xuaW1wb3J0IHsgT3BlblZpZHVBbmd1bGFyQ29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NvbmZpZy9vcGVudmlkdS1hbmd1bGFyLmNvbmZpZy5zZXJ2aWNlJztcblxuLyoqXG4gKiBUaGUgKipyZWNvcmRpbmdzTGlzdCoqIGRpcmVjdGl2ZSBhbGxvd3Mgc2hvdyBhbGwgcmVjb3JkaW5ncyBzYXZlZCBpbiB5b3VyIE9wZW5WaWR1IGRlcGxveW1lbnQgaW4ge0BsaW5rIEFkbWluRGFzaGJvYXJkQ29tcG9uZW50fS5cbiAqXG4gKiBEZWZhdWx0OiBgW11gXG4gKlxuICogQGV4YW1wbGVcbiAqIDxvdi1hZG1pbi1kYXNoYm9hcmQgW3JlY29yZGluZ3NMaXN0XT1cInJlY29yZGluZ3NcIj48L292LWFkbWluLWRhc2hib2FyZD5cbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ292LWFkbWluLWRhc2hib2FyZFtyZWNvcmRpbmdzTGlzdF0nXG59KVxuZXhwb3J0IGNsYXNzIEFkbWluUmVjb3JkaW5nc0xpc3REaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG5cdEBJbnB1dCgpIHNldCByZWNvcmRpbmdzTGlzdCh2YWx1ZTogUmVjb3JkaW5nSW5mb1tdKSB7XG5cdFx0dGhpcy5yZWNvcmRpbmdzVmFsdWUgPSB2YWx1ZTtcblx0XHR0aGlzLnVwZGF0ZSh0aGlzLnJlY29yZGluZ3NWYWx1ZSk7XG5cdH1cblxuXHRyZWNvcmRpbmdzVmFsdWU6IFJlY29yZGluZ0luZm8gW10gPSBbXTtcblxuXHRjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBsaWJTZXJ2aWNlOiBPcGVuVmlkdUFuZ3VsYXJDb25maWdTZXJ2aWNlKSB7fVxuXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblx0XHR0aGlzLnVwZGF0ZSh0aGlzLnJlY29yZGluZ3NWYWx1ZSk7XG5cdH1cblx0bmdPbkRlc3Ryb3koKTogdm9pZCB7XG5cdFx0dGhpcy5jbGVhcigpO1xuXHR9XG5cdGNsZWFyKCkge1xuXHRcdHRoaXMucmVjb3JkaW5nc1ZhbHVlID0gbnVsbDtcblx0XHR0aGlzLnVwZGF0ZShudWxsKTtcblx0fVxuXG5cdHVwZGF0ZSh2YWx1ZTogUmVjb3JkaW5nSW5mb1tdKSB7XG5cdFx0aWYgKHRoaXMubGliU2VydmljZS5hZG1pblJlY29yZGluZ3NMaXN0LmdldFZhbHVlKCkgIT09IHZhbHVlKSB7XG5cdFx0XHR0aGlzLmxpYlNlcnZpY2UuYWRtaW5SZWNvcmRpbmdzTGlzdC5uZXh0KHZhbHVlKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgKiplcnJvcioqIGRpcmVjdGl2ZSBhbGxvd3Mgc2hvdyB0aGUgYXV0aGVudGljYXRpb24gZXJyb3IgaW4ge0BsaW5rIEFkbWluTG9naW5Db21wb25lbnR9LlxuICpcbiAqIERlZmF1bHQ6IGBudWxsYFxuICpcbiAqIEBleGFtcGxlXG4gKiA8b3YtYWRtaW4tbG9naW4gW2Vycm9yXT1cImVycm9yXCI+PC9vdi1hZG1pbi1sb2dpbj5cbiAqXG4gKi9cbiBARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdvdi1hZG1pbi1sb2dpbltlcnJvcl0nXG59KVxuZXhwb3J0IGNsYXNzIEFkbWluTG9naW5EaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG5cdEBJbnB1dCgpIHNldCBlcnJvcih2YWx1ZTogYW55KSB7XG5cdFx0dGhpcy5lcnJvclZhbHVlID0gdmFsdWU7XG5cdFx0dGhpcy51cGRhdGUodGhpcy5lcnJvclZhbHVlKTtcblx0fVxuXG5cdGVycm9yVmFsdWU6IGFueSA9IG51bGw7XG5cblx0Y29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgbGliU2VydmljZTogT3BlblZpZHVBbmd1bGFyQ29uZmlnU2VydmljZSkge31cblxuXHRuZ0FmdGVyVmlld0luaXQoKSB7XG5cdFx0dGhpcy51cGRhdGUodGhpcy5lcnJvclZhbHVlKTtcblx0fVxuXHRuZ09uRGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLmNsZWFyKCk7XG5cdH1cblx0Y2xlYXIoKSB7XG5cdFx0dGhpcy5lcnJvclZhbHVlID0gbnVsbDtcblx0XHR0aGlzLnVwZGF0ZShudWxsKTtcblx0fVxuXG5cdHVwZGF0ZSh2YWx1ZTogYW55KSB7XG5cdFx0aWYgKHRoaXMubGliU2VydmljZS5hZG1pbkxvZ2luRXJyb3IuZ2V0VmFsdWUoKSAhPT0gdmFsdWUpIHtcblx0XHRcdHRoaXMubGliU2VydmljZS5hZG1pbkxvZ2luRXJyb3IubmV4dCh2YWx1ZSk7XG5cdFx0fVxuXHR9XG59XG5cbiJdfQ==