import { Component, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { PanelType } from '../../../models/panel.model';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/panel/panel.service";
import * as i2 from "../../../services/config/openvidu-angular.config.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/icon";
import * as i6 from "@angular/material/tooltip";
import * as i7 from "@angular/flex-layout/flex";
import * as i8 from "@angular/material/expansion";
import * as i9 from "./recording-activity-panel/recording-activity.component";
import * as i10 from "../../../pipes/translate.pipe";
export class ActivitiesPanelComponent {
    /**
     * @internal
     */
    constructor(panelService, libService, cd) {
        this.panelService = panelService;
        this.libService = libService;
        this.cd = cd;
        /**
         * Provides event notifications that fire when start recording button has been clicked.
         * The recording should be stated using the OpenVidu REST API.
         */
        this.onStartRecordingClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when stop recording button has been clicked.
         * The recording should be stopped using the OpenVidu REST API.
         */
        this.onStopRecordingClicked = new EventEmitter();
        /**
         * Provides event notifications that fire when delete recording button has been clicked.
         * The recording should be deleted using the OpenVidu REST API.
         */
        this.onDeleteRecordingClicked = new EventEmitter();
        /**
         * @internal
         */
        this.expandedPanel = '';
        /**
         * @internal
         */
        this.showRecordingActivity = true;
    }
    /**
     * @internal
     */
    ngOnInit() {
        this.subscribeToPanelToggling();
        this.subscribeToActivitiesPanelDirective();
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        if (this.panelSubscription)
            this.panelSubscription.unsubscribe();
        if (this.recordingActivitySub)
            this.recordingActivitySub.unsubscribe();
    }
    /**
     * @internal
     */
    close() {
        this.panelService.togglePanel(PanelType.ACTIVITIES);
    }
    /**
     * @internal
     */
    _onStartRecordingClicked() {
        this.onStartRecordingClicked.emit();
    }
    /**
     * @internal
     */
    _onStopRecordingClicked() {
        this.onStopRecordingClicked.emit();
    }
    /**
     * @internal
     */
    _onDeleteRecordingClicked(recordingId) {
        this.onDeleteRecordingClicked.emit(recordingId);
    }
    subscribeToPanelToggling() {
        this.panelSubscription = this.panelService.panelOpenedObs.subscribe((ev) => {
            if (ev.type === PanelType.ACTIVITIES && !!ev.expand) {
                this.expandedPanel = ev.expand;
            }
        });
    }
    subscribeToActivitiesPanelDirective() {
        this.recordingActivitySub = this.libService.recordingActivity.subscribe((value) => {
            this.showRecordingActivity = value;
            this.cd.markForCheck();
        });
    }
}
ActivitiesPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ActivitiesPanelComponent, deps: [{ token: i1.PanelService }, { token: i2.OpenViduAngularConfigService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ActivitiesPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: ActivitiesPanelComponent, selector: "ov-activities-panel", outputs: { onStartRecordingClicked: "onStartRecordingClicked", onStopRecordingClicked: "onStopRecordingClicked", onDeleteRecordingClicked: "onDeleteRecordingClicked" }, ngImport: i0, template: "<div class=\"panel-container\" id=\"activities-container\" fxLayout=\"column\" fxLayoutAlign=\"space-evenly none\">\n\t<div class=\"panel-header-container\" fxFlex=\"55px\" fxLayoutAlign=\"start center\">\n\t\t<h3 class=\"panel-title\">Activities</h3>\n\t\t<button class=\"panel-close-button\" mat-icon-button matTooltip=\"{{ 'PANEL.CLOSE' | translate }}\" (click)=\"close()\">\n\t\t\t<mat-icon>close</mat-icon>\n\t\t</button>\n\t</div>\n\n\t<div class=\"activities-body-container\" fxFlex=\"75%\" fxLayoutAlign=\"space-evenly none\">\n\t\t<mat-accordion>\n\t\t\t<ov-recording-activity\n\t\t\t\t*ngIf=\"showRecordingActivity\"\n\t\t\t\tid=\"recording-activity\"\n\t\t\t\t[expanded]=\"expandedPanel === 'recording'\"\n\t\t\t\t(onStartRecordingClicked)=\"_onStartRecordingClicked()\"\n\t\t\t\t(onStopRecordingClicked)=\"_onStopRecordingClicked()\"\n\t\t\t\t(onDeleteRecordingClicked)=\"_onDeleteRecordingClicked($event)\"\n\t\t\t></ov-recording-activity>\n\t\t</mat-accordion>\n\t</div>\n</div>\n", styles: [".panel-container{margin:20px;background-color:var(--ov-panel-background);border-radius:var(--ov-panel-radius);max-height:calc(100% - 40px);min-height:calc(100% - 40px)}.panel-header-container{padding:10px;display:flex}.panel-title{margin-left:5px;margin-top:auto;margin-bottom:auto}.panel-close-button{margin-left:auto;border-radius:var(--ov-buttons-radius)}::-webkit-scrollbar{width:8px}::-webkit-scrollbar-thumb{background:#a7a7a7;border-radius:4px}::-webkit-scrollbar-thumb:hover{background:#7c7c7c}::-webkit-scrollbar-track{background:var(--ov-light-color);border-radius:4px}\n", ".activities-body-container{display:block!important;overflow-y:auto;overflow-x:hidden;padding:10px}.activity-icon{display:inherit;background-color:var(--ov-light-color);border-radius:var(--ov-panel-radius)}.activity-icon mat-icon{margin:auto}.activity-subtitle{font-style:italic;font-size:11px!important}.activity-title{font-weight:700!important}.activity-action-buttons{align-self:flex-start;margin-top:15px;font-weight:600}::ng-deep .mat-list-text{padding-left:10px!important}::ng-deep .mat-expansion-panel-header{padding:0 10px!important;height:65px!important}::ng-deep .mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{padding:0!important}::ng-deep mat-expansion-panel .mat-expansion-panel-body{padding:0!important;min-height:400px}::ng-deep .mat-expansion-panel-header-description{flex-grow:0!important}::ng-deep .mat-expansion-panel{box-shadow:none!important}\n"], dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i6.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: i7.DefaultLayoutDirective, selector: "  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]", inputs: ["fxLayout", "fxLayout.xs", "fxLayout.sm", "fxLayout.md", "fxLayout.lg", "fxLayout.xl", "fxLayout.lt-sm", "fxLayout.lt-md", "fxLayout.lt-lg", "fxLayout.lt-xl", "fxLayout.gt-xs", "fxLayout.gt-sm", "fxLayout.gt-md", "fxLayout.gt-lg"] }, { kind: "directive", type: i7.DefaultLayoutAlignDirective, selector: "  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]", inputs: ["fxLayoutAlign", "fxLayoutAlign.xs", "fxLayoutAlign.sm", "fxLayoutAlign.md", "fxLayoutAlign.lg", "fxLayoutAlign.xl", "fxLayoutAlign.lt-sm", "fxLayoutAlign.lt-md", "fxLayoutAlign.lt-lg", "fxLayoutAlign.lt-xl", "fxLayoutAlign.gt-xs", "fxLayoutAlign.gt-sm", "fxLayoutAlign.gt-md", "fxLayoutAlign.gt-lg"] }, { kind: "directive", type: i7.DefaultFlexDirective, selector: "  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]", inputs: ["fxFlex", "fxFlex.xs", "fxFlex.sm", "fxFlex.md", "fxFlex.lg", "fxFlex.xl", "fxFlex.lt-sm", "fxFlex.lt-md", "fxFlex.lt-lg", "fxFlex.lt-xl", "fxFlex.gt-xs", "fxFlex.gt-sm", "fxFlex.gt-md", "fxFlex.gt-lg"] }, { kind: "directive", type: i8.MatAccordion, selector: "mat-accordion", inputs: ["multi", "hideToggle", "displayMode", "togglePosition"], exportAs: ["matAccordion"] }, { kind: "component", type: i9.RecordingActivityComponent, selector: "ov-recording-activity", inputs: ["expanded"], outputs: ["onStartRecordingClicked", "onStopRecordingClicked", "onDeleteRecordingClicked"] }, { kind: "pipe", type: i10.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ActivitiesPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-activities-panel', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"panel-container\" id=\"activities-container\" fxLayout=\"column\" fxLayoutAlign=\"space-evenly none\">\n\t<div class=\"panel-header-container\" fxFlex=\"55px\" fxLayoutAlign=\"start center\">\n\t\t<h3 class=\"panel-title\">Activities</h3>\n\t\t<button class=\"panel-close-button\" mat-icon-button matTooltip=\"{{ 'PANEL.CLOSE' | translate }}\" (click)=\"close()\">\n\t\t\t<mat-icon>close</mat-icon>\n\t\t</button>\n\t</div>\n\n\t<div class=\"activities-body-container\" fxFlex=\"75%\" fxLayoutAlign=\"space-evenly none\">\n\t\t<mat-accordion>\n\t\t\t<ov-recording-activity\n\t\t\t\t*ngIf=\"showRecordingActivity\"\n\t\t\t\tid=\"recording-activity\"\n\t\t\t\t[expanded]=\"expandedPanel === 'recording'\"\n\t\t\t\t(onStartRecordingClicked)=\"_onStartRecordingClicked()\"\n\t\t\t\t(onStopRecordingClicked)=\"_onStopRecordingClicked()\"\n\t\t\t\t(onDeleteRecordingClicked)=\"_onDeleteRecordingClicked($event)\"\n\t\t\t></ov-recording-activity>\n\t\t</mat-accordion>\n\t</div>\n</div>\n", styles: [".panel-container{margin:20px;background-color:var(--ov-panel-background);border-radius:var(--ov-panel-radius);max-height:calc(100% - 40px);min-height:calc(100% - 40px)}.panel-header-container{padding:10px;display:flex}.panel-title{margin-left:5px;margin-top:auto;margin-bottom:auto}.panel-close-button{margin-left:auto;border-radius:var(--ov-buttons-radius)}::-webkit-scrollbar{width:8px}::-webkit-scrollbar-thumb{background:#a7a7a7;border-radius:4px}::-webkit-scrollbar-thumb:hover{background:#7c7c7c}::-webkit-scrollbar-track{background:var(--ov-light-color);border-radius:4px}\n", ".activities-body-container{display:block!important;overflow-y:auto;overflow-x:hidden;padding:10px}.activity-icon{display:inherit;background-color:var(--ov-light-color);border-radius:var(--ov-panel-radius)}.activity-icon mat-icon{margin:auto}.activity-subtitle{font-style:italic;font-size:11px!important}.activity-title{font-weight:700!important}.activity-action-buttons{align-self:flex-start;margin-top:15px;font-weight:600}::ng-deep .mat-list-text{padding-left:10px!important}::ng-deep .mat-expansion-panel-header{padding:0 10px!important;height:65px!important}::ng-deep .mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{padding:0!important}::ng-deep mat-expansion-panel .mat-expansion-panel-body{padding:0!important;min-height:400px}::ng-deep .mat-expansion-panel-header-description{flex-grow:0!important}::ng-deep .mat-expansion-panel{box-shadow:none!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.PanelService }, { type: i2.OpenViduAngularConfigService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { onStartRecordingClicked: [{
                type: Output
            }], onStopRecordingClicked: [{
                type: Output
            }], onDeleteRecordingClicked: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,