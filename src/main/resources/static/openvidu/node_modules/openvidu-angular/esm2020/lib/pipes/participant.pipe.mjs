import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../services/translate/translate.service";
export class ParticipantStreamsPipe {
    constructor() { }
    transform(participants) {
        let streams = [];
        if (participants && Object.keys(participants).length > 0) {
            if (Array.isArray(participants)) {
                participants.forEach((p) => {
                    streams = streams.concat(p.getAvailableConnections());
                });
            }
            else {
                streams = participants.getAvailableConnections();
            }
        }
        return streams;
    }
}
ParticipantStreamsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantStreamsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ParticipantStreamsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.2.8", ngImport: i0, type: ParticipantStreamsPipe, name: "streams" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantStreamsPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'streams' }]
        }], ctorParameters: function () { return []; } });
/**
 * @internal
 */
export class StreamTypesEnabledPipe {
    constructor(translateService) {
        this.translateService = translateService;
    }
    transform(participant) {
        let result = '';
        let activeStreams = participant?.getConnectionTypesActive().toString();
        const activeStreamsArr = activeStreams.split(',');
        activeStreamsArr.forEach((type, index) => {
            result += this.translateService.translate(`PANEL.PARTICIPANTS.${type}`);
            if (activeStreamsArr.length > 0 && index < activeStreamsArr.length - 1) {
                result += ', ';
            }
        });
        return `(${result})`;
    }
}
StreamTypesEnabledPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StreamTypesEnabledPipe, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Pipe });
StreamTypesEnabledPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.2.8", ngImport: i0, type: StreamTypesEnabledPipe, name: "streamTypesEnabled" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StreamTypesEnabledPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'streamTypesEnabled' }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljaXBhbnQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL29wZW52aWR1LWFuZ3VsYXIvc3JjL2xpYi9waXBlcy9wYXJ0aWNpcGFudC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOzs7QUFLcEQsTUFBTSxPQUFPLHNCQUFzQjtJQUNsQyxnQkFBZSxDQUFDO0lBRWhCLFNBQVMsQ0FBQyxZQUFtRTtRQUM1RSxJQUFJLE9BQU8sR0FBa0IsRUFBRSxDQUFDO1FBQ2hDLElBQUcsWUFBWSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQztZQUN2RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQ2hDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDMUIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQztnQkFDdkQsQ0FBQyxDQUFDLENBQUM7YUFDSDtpQkFBTTtnQkFFTixPQUFPLEdBQUcsWUFBWSxDQUFDLHVCQUF1QixFQUFFLENBQUM7YUFDakQ7U0FDRDtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2hCLENBQUM7O21IQWhCVyxzQkFBc0I7aUhBQXRCLHNCQUFzQjsyRkFBdEIsc0JBQXNCO2tCQURsQyxJQUFJO21CQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTs7QUFvQnpCOztHQUVHO0FBRUgsTUFBTSxPQUFPLHNCQUFzQjtJQUNsQyxZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUFHLENBQUM7SUFFMUQsU0FBUyxDQUFDLFdBQXFDO1FBQzlDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLGFBQWEsR0FBRyxXQUFXLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN2RSxNQUFNLGdCQUFnQixHQUFhLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUQsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3hDLE1BQU0sSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLHNCQUFzQixJQUFJLEVBQUUsQ0FBQyxDQUFBO1lBQ3ZFLElBQUcsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQztnQkFDckUsTUFBTSxJQUFJLElBQUksQ0FBQzthQUNmO1FBQ0YsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksTUFBTSxHQUFHLENBQUM7SUFDdEIsQ0FBQzs7bUhBZFcsc0JBQXNCO2lIQUF0QixzQkFBc0I7MkZBQXRCLHNCQUFzQjtrQkFEbEMsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0cmVhbU1vZGVsLCBQYXJ0aWNpcGFudEFic3RyYWN0TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvcGFydGljaXBhbnQubW9kZWwnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RyYW5zbGF0ZS90cmFuc2xhdGUuc2VydmljZSc7XG5cbkBQaXBlKHsgbmFtZTogJ3N0cmVhbXMnIH0pXG5leHBvcnQgY2xhc3MgUGFydGljaXBhbnRTdHJlYW1zUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXHRjb25zdHJ1Y3RvcigpIHt9XG5cblx0dHJhbnNmb3JtKHBhcnRpY2lwYW50czogUGFydGljaXBhbnRBYnN0cmFjdE1vZGVsW10gfCBQYXJ0aWNpcGFudEFic3RyYWN0TW9kZWwpOiBTdHJlYW1Nb2RlbFtdIHtcblx0XHRsZXQgc3RyZWFtczogU3RyZWFtTW9kZWxbXSA9IFtdO1xuXHRcdGlmKHBhcnRpY2lwYW50cyAmJiBPYmplY3Qua2V5cyhwYXJ0aWNpcGFudHMpLmxlbmd0aCA+IDApe1xuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkocGFydGljaXBhbnRzKSkge1xuXHRcdFx0XHRwYXJ0aWNpcGFudHMuZm9yRWFjaCgocCkgPT4ge1xuXHRcdFx0XHRcdHN0cmVhbXMgPSBzdHJlYW1zLmNvbmNhdChwLmdldEF2YWlsYWJsZUNvbm5lY3Rpb25zKCkpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3RyZWFtcyA9IHBhcnRpY2lwYW50cy5nZXRBdmFpbGFibGVDb25uZWN0aW9ucygpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gc3RyZWFtcztcblx0fVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5AUGlwZSh7IG5hbWU6ICdzdHJlYW1UeXBlc0VuYWJsZWQnIH0pXG5leHBvcnQgY2xhc3MgU3RyZWFtVHlwZXNFbmFibGVkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UpIHt9XG5cblx0dHJhbnNmb3JtKHBhcnRpY2lwYW50OiBQYXJ0aWNpcGFudEFic3RyYWN0TW9kZWwpOiBzdHJpbmcge1xuXHRcdGxldCByZXN1bHQgPSAnJztcblx0XHRsZXQgYWN0aXZlU3RyZWFtcyA9IHBhcnRpY2lwYW50Py5nZXRDb25uZWN0aW9uVHlwZXNBY3RpdmUoKS50b1N0cmluZygpO1xuXHRcdGNvbnN0IGFjdGl2ZVN0cmVhbXNBcnI6IHN0cmluZ1tdID0gYWN0aXZlU3RyZWFtcy5zcGxpdCgnLCcpO1xuXHRcdGFjdGl2ZVN0cmVhbXNBcnIuZm9yRWFjaCgodHlwZSwgaW5kZXgpID0+IHtcblx0XHRcdHJlc3VsdCArPSB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UudHJhbnNsYXRlKGBQQU5FTC5QQVJUSUNJUEFOVFMuJHt0eXBlfWApXG5cdFx0XHRpZihhY3RpdmVTdHJlYW1zQXJyLmxlbmd0aCA+IDAgJiYgaW5kZXggPCBhY3RpdmVTdHJlYW1zQXJyLmxlbmd0aCAtIDEpe1xuXHRcdFx0XHRyZXN1bHQgKz0gJywgJztcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gYCgke3Jlc3VsdH0pYDtcblx0fVxufVxuIl19