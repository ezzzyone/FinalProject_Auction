import { Component, ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';
import { UntypedFormControl, Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "../../services/config/openvidu-angular.config.service";
import * as i2 from "../../services/action/action.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/material/button";
import * as i6 from "@angular/material/card";
import * as i7 from "@angular/material/toolbar";
import * as i8 from "@angular/material/form-field";
import * as i9 from "@angular/material/input";
import * as i10 from "@angular/material/progress-spinner";
import * as i11 from "../../pipes/translate.pipe";
export class AdminLoginComponent {
    /**
     * @internal
     */
    constructor(libService, actionService) {
        this.libService = libService;
        this.actionService = actionService;
        /**
         * Provides event notifications that fire when login button has been clicked.
         * The event will contain the password value.
         */
        this.onLoginButtonClicked = new EventEmitter();
        /**
         * @internal
         */
        this.checkingLogged = false;
        /**
         * @internal
         */
        this.showSpinner = false;
        /**
         * @internal
         */
        this.loginFormControl = new UntypedFormControl('', [Validators.required]);
        /**
         * @internal
         */
        this.matcher = new FormErrorStateMatcher();
    }
    /**
     * @internal
     */
    ngOnInit() {
        this.subscribeToAdminLoginDirectives();
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.showSpinner = false;
        if (this.errorSub)
            this.errorSub.unsubscribe();
    }
    /**
     * @internal
     */
    login() {
        this.showSpinner = true;
        this.onLoginButtonClicked.emit(this.secret);
    }
    /**
     * @internal
     */
    submitForm() {
        if (this.loginForm.nativeElement.checkValidity()) {
            this.login();
        }
        else {
            this.submitBtn.nativeElement.click();
        }
    }
    subscribeToAdminLoginDirectives() {
        this.errorSub = this.libService.adminLoginErrorObs.subscribe((value) => {
            const errorExists = !!value;
            if (errorExists) {
                this.showSpinner = false;
                this.actionService.openDialog(value.error, value.message, true);
            }
        });
    }
}
AdminLoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: AdminLoginComponent, deps: [{ token: i1.OpenViduAngularConfigService }, { token: i2.ActionService }], target: i0.ɵɵFactoryTarget.Component });
AdminLoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: AdminLoginComponent, selector: "ov-admin-login", outputs: { onLoginButtonClicked: "onLoginButtonClicked" }, viewQueries: [{ propertyName: "submitBtn", first: true, predicate: ["submitBtn"], descendants: true }, { propertyName: "loginForm", first: true, predicate: ["loginForm"], descendants: true, read: ElementRef }], ngImport: i0, template: "<mat-toolbar class=\"header\">\n</mat-toolbar>\n\n<div *ngIf=\"checkingLogged\" class=\"outer\">\n\t<div class=\"middle\">\n\t\t<div class=\"inner\">\n\t\t\t<mat-spinner *ngIf=\"checkingLogged\"></mat-spinner>\n\t\t</div>\n\t</div>\n</div>\n\n<mat-card *ngIf=\"!checkingLogged\">\n\t<mat-card-content>\n\t\t<form ngNativeValidate #loginForm (ngSubmit)=\"login()\">\n\t\t\t<table class=\"full-width\" cellspacing=\"0\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<mat-form-field id=\"secret-field\" class=\"full-width\" appearance=\"outline\">\n\t\t\t\t\t\t\t<mat-label>{{ 'ADMIN.SECRET' | translate }}</mat-label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"secret-input\"\n\t\t\t\t\t\t\t\tmatInput\n\t\t\t\t\t\t\t\t[(ngModel)]=\"secret\"\n\t\t\t\t\t\t\t\t[disabled]=\"showSpinner\"\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\tname=\"secret\"\n\t\t\t\t\t\t\t\tautocomplete=\"current-password\"\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<mat-error *ngIf=\"loginFormControl.hasError('required')\"> {{ 'ADMIN.SECRET_REQURED' | translate }} </mat-error>\n\t\t\t\t\t\t</mat-form-field>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t\t<input #submitBtn type=\"submit\" [style.display]=\"'none'\" />\n\t\t</form>\n\t\t<mat-spinner [style.display]=\"showSpinner ? 'block' : 'none'\"></mat-spinner>\n\t</mat-card-content>\n\t<mat-card-actions>\n\t\t<button mat-flat-button id=\"login-btn\" type=\"submit\" (click)=\"submitForm()\" color=\"primary\" class=\"full-width\">\n\t\t\t{{ 'ADMIN.LOGIN' | translate }}\n\t\t</button>\n\t</mat-card-actions>\n</mat-card>\n", styles: ["mat-card{max-width:220px;margin:auto;margin-top:10vh}mat-card-content{margin-bottom:8px}mat-card-actions{padding-top:0}.header{height:50px;background-color:var(--ov-secondary-color);color:var(--ov-text-color)}mat-spinner{margin:auto}.mat-card-actions{margin:0}.full-width{width:100%}.outer{display:table;position:absolute;height:100%;width:100%}.middle{display:table-cell;vertical-align:middle}.inner{margin-left:auto;margin-right:auto}#login-btn{text-transform:none;font-size:17px;width:100%}::ng-deep .mat-input-element{caret-color:#000}::ng-deep .mat-primary .mat-option.mat-selected:not(.mat-option-disabled){color:#000}::ng-deep .mat-form-field-label{color:var(--ov-panel-text-color)!important}::ng-deep .mat-form-field.mat-focused .mat-form-field-ripple{background-color:var(--ov-panel-text-color)!important}\n"], dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i5.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i6.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { kind: "directive", type: i6.MatCardContent, selector: "mat-card-content, [mat-card-content], [matCardContent]" }, { kind: "directive", type: i6.MatCardActions, selector: "mat-card-actions", inputs: ["align"], exportAs: ["matCardActions"] }, { kind: "component", type: i7.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "directive", type: i8.MatError, selector: "mat-error", inputs: ["id"] }, { kind: "component", type: i8.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i8.MatLabel, selector: "mat-label" }, { kind: "directive", type: i9.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i10.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "diameter", "strokeWidth", "mode", "value"], exportAs: ["matProgressSpinner"] }, { kind: "pipe", type: i11.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: AdminLoginComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-admin-login', template: "<mat-toolbar class=\"header\">\n</mat-toolbar>\n\n<div *ngIf=\"checkingLogged\" class=\"outer\">\n\t<div class=\"middle\">\n\t\t<div class=\"inner\">\n\t\t\t<mat-spinner *ngIf=\"checkingLogged\"></mat-spinner>\n\t\t</div>\n\t</div>\n</div>\n\n<mat-card *ngIf=\"!checkingLogged\">\n\t<mat-card-content>\n\t\t<form ngNativeValidate #loginForm (ngSubmit)=\"login()\">\n\t\t\t<table class=\"full-width\" cellspacing=\"0\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<mat-form-field id=\"secret-field\" class=\"full-width\" appearance=\"outline\">\n\t\t\t\t\t\t\t<mat-label>{{ 'ADMIN.SECRET' | translate }}</mat-label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"secret-input\"\n\t\t\t\t\t\t\t\tmatInput\n\t\t\t\t\t\t\t\t[(ngModel)]=\"secret\"\n\t\t\t\t\t\t\t\t[disabled]=\"showSpinner\"\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\tname=\"secret\"\n\t\t\t\t\t\t\t\tautocomplete=\"current-password\"\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<mat-error *ngIf=\"loginFormControl.hasError('required')\"> {{ 'ADMIN.SECRET_REQURED' | translate }} </mat-error>\n\t\t\t\t\t\t</mat-form-field>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t\t<input #submitBtn type=\"submit\" [style.display]=\"'none'\" />\n\t\t</form>\n\t\t<mat-spinner [style.display]=\"showSpinner ? 'block' : 'none'\"></mat-spinner>\n\t</mat-card-content>\n\t<mat-card-actions>\n\t\t<button mat-flat-button id=\"login-btn\" type=\"submit\" (click)=\"submitForm()\" color=\"primary\" class=\"full-width\">\n\t\t\t{{ 'ADMIN.LOGIN' | translate }}\n\t\t</button>\n\t</mat-card-actions>\n</mat-card>\n", styles: ["mat-card{max-width:220px;margin:auto;margin-top:10vh}mat-card-content{margin-bottom:8px}mat-card-actions{padding-top:0}.header{height:50px;background-color:var(--ov-secondary-color);color:var(--ov-text-color)}mat-spinner{margin:auto}.mat-card-actions{margin:0}.full-width{width:100%}.outer{display:table;position:absolute;height:100%;width:100%}.middle{display:table-cell;vertical-align:middle}.inner{margin-left:auto;margin-right:auto}#login-btn{text-transform:none;font-size:17px;width:100%}::ng-deep .mat-input-element{caret-color:#000}::ng-deep .mat-primary .mat-option.mat-selected:not(.mat-option-disabled){color:#000}::ng-deep .mat-form-field-label{color:var(--ov-panel-text-color)!important}::ng-deep .mat-form-field.mat-focused .mat-form-field-ripple{background-color:var(--ov-panel-text-color)!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.OpenViduAngularConfigService }, { type: i2.ActionService }]; }, propDecorators: { onLoginButtonClicked: [{
                type: Output
            }], submitBtn: [{
                type: ViewChild,
                args: ['submitBtn']
            }], loginForm: [{
                type: ViewChild,
                args: ['loginForm', { read: ElementRef }]
            }] } });
/**
 * @internal
 */
export class FormErrorStateMatcher {
    isErrorState(control, form) {
        const isSubmitted = form && form.submitted;
        return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));
    }
}
//# sourceMappingURL=data:application/json;base64,