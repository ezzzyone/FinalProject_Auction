import { Injectable } from '@angular/core';
import { LayoutClass } from '../../models/layout.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/flex-layout";
/**
 * @internal
 */
export class DocumentService {
    constructor(media) {
        this.media = media;
        this.screenSizeObs = this.media.asObservable();
    }
    toggleFullscreen(elementId) {
        const document = window.document;
        const fs = document.getElementById(elementId);
        if (!document.fullscreenElement &&
            !document.mozFullScreenElement &&
            !document.webkitFullscreenElement &&
            !document.msFullscreenElement) {
            if (fs.requestFullscreen) {
                fs.requestFullscreen();
            }
            else if (fs.msRequestFullscreen) {
                fs.msRequestFullscreen();
            }
            else if (fs.mozRequestFullScreen) {
                fs.mozRequestFullScreen();
            }
            else if (fs.webkitRequestFullscreen) {
                fs.webkitRequestFullscreen();
            }
        }
        else {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            }
            else if (document.msExitFullscreen) {
                document.msExitFullscreen();
            }
            else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            }
            else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            }
        }
    }
    isSmallElement(element) {
        return element?.className.includes(LayoutClass.SMALL_ELEMENT);
    }
}
DocumentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: DocumentService, deps: [{ token: i1.MediaObserver }], target: i0.ɵɵFactoryTarget.Injectable });
DocumentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: DocumentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: DocumentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.MediaObserver }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL29wZW52aWR1LWFuZ3VsYXIvc3JjL2xpYi9zZXJ2aWNlcy9kb2N1bWVudC9kb2N1bWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7QUFFeEQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8sZUFBZTtJQUczQixZQUFvQixLQUFvQjtRQUFwQixVQUFLLEdBQUwsS0FBSyxDQUFlO1FBQ3ZDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsU0FBaUI7UUFDakMsTUFBTSxRQUFRLEdBQVEsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUN0QyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLElBQ0MsQ0FBQyxRQUFRLENBQUMsaUJBQWlCO1lBQzNCLENBQUMsUUFBUSxDQUFDLG9CQUFvQjtZQUM5QixDQUFDLFFBQVEsQ0FBQyx1QkFBdUI7WUFDakMsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQzVCO1lBQ0QsSUFBSSxFQUFFLENBQUMsaUJBQWlCLEVBQUU7Z0JBQ3pCLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2FBQ3ZCO2lCQUFNLElBQUksRUFBRSxDQUFDLG1CQUFtQixFQUFFO2dCQUNsQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQzthQUN6QjtpQkFBTSxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRTtnQkFDbkMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUM7YUFDMUI7aUJBQU0sSUFBSSxFQUFFLENBQUMsdUJBQXVCLEVBQUU7Z0JBQ3RDLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO2FBQzdCO1NBQ0Q7YUFBTTtZQUNOLElBQUksUUFBUSxDQUFDLGNBQWMsRUFBRTtnQkFDNUIsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO2FBQzFCO2lCQUFNLElBQUksUUFBUSxDQUFDLGdCQUFnQixFQUFFO2dCQUNyQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzthQUM1QjtpQkFBTSxJQUFJLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRTtnQkFDeEMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLENBQUM7YUFDL0I7aUJBQU0sSUFBSSxRQUFRLENBQUMsb0JBQW9CLEVBQUU7Z0JBQ3pDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO2FBQ2hDO1NBQ0Q7SUFDRixDQUFDO0lBRUQsY0FBYyxDQUFDLE9BQThCO1FBQzVDLE9BQU8sT0FBTyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQy9ELENBQUM7OzRHQXhDVyxlQUFlO2dIQUFmLGVBQWUsY0FGZixNQUFNOzJGQUVOLGVBQWU7a0JBSDNCLFVBQVU7bUJBQUM7b0JBQ1gsVUFBVSxFQUFFLE1BQU07aUJBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWVkaWFDaGFuZ2UsIE1lZGlhT2JzZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMYXlvdXRDbGFzcyB9IGZyb20gJy4uLy4uL21vZGVscy9sYXlvdXQubW9kZWwnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5ASW5qZWN0YWJsZSh7XG5cdHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBEb2N1bWVudFNlcnZpY2Uge1xuXHRzY3JlZW5TaXplT2JzOiBPYnNlcnZhYmxlPE1lZGlhQ2hhbmdlW10+O1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgbWVkaWE6IE1lZGlhT2JzZXJ2ZXIpIHtcblx0XHR0aGlzLnNjcmVlblNpemVPYnMgPSB0aGlzLm1lZGlhLmFzT2JzZXJ2YWJsZSgpO1xuXHR9XG5cblx0dG9nZ2xlRnVsbHNjcmVlbihlbGVtZW50SWQ6IHN0cmluZykge1xuXHRcdGNvbnN0IGRvY3VtZW50OiBhbnkgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cdFx0Y29uc3QgZnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuXHRcdGlmIChcblx0XHRcdCFkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCAmJlxuXHRcdFx0IWRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50ICYmXG5cdFx0XHQhZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgJiZcblx0XHRcdCFkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50XG5cdFx0KSB7XG5cdFx0XHRpZiAoZnMucmVxdWVzdEZ1bGxzY3JlZW4pIHtcblx0XHRcdFx0ZnMucmVxdWVzdEZ1bGxzY3JlZW4oKTtcblx0XHRcdH0gZWxzZSBpZiAoZnMubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuXHRcdFx0XHRmcy5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG5cdFx0XHR9IGVsc2UgaWYgKGZzLm1velJlcXVlc3RGdWxsU2NyZWVuKSB7XG5cdFx0XHRcdGZzLm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XG5cdFx0XHR9IGVsc2UgaWYgKGZzLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7XG5cdFx0XHRcdGZzLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChkb2N1bWVudC5leGl0RnVsbHNjcmVlbikge1xuXHRcdFx0XHRkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpO1xuXHRcdFx0fSBlbHNlIGlmIChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSB7XG5cdFx0XHRcdGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcblx0XHRcdH0gZWxzZSBpZiAoZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikge1xuXHRcdFx0XHRkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XG5cdFx0XHR9IGVsc2UgaWYgKGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKSB7XG5cdFx0XHRcdGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aXNTbWFsbEVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQgfCBFbGVtZW50KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIGVsZW1lbnQ/LmNsYXNzTmFtZS5pbmNsdWRlcyhMYXlvdXRDbGFzcy5TTUFMTF9FTEVNRU5UKTtcblx0fVxufVxuIl19