import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/config/openvidu-angular.config.service";
import * as i2 from "../../services/translate/translate.service";
import * as i3 from "../../services/caption/caption.service";
/**
 * The **minimal** directive applies a minimal UI hiding all controls except for cam and mic.
 *
 * It is only available for {@link VideoconferenceComponent}.
 *
 *  Default: `false`
 *
 * @example
 * <ov-videoconference [minimal]="true"></ov-videoconference>
 */
export class MinimalDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
    }
    /**
     * @ignore
     */
    set minimal(value) {
        this.update(value);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.clear();
    }
    /**
     * @ignore
     */
    clear() {
        this.update(false);
    }
    /**
     * @ignore
     */
    update(value) {
        if (this.libService.minimal.getValue() !== value) {
            this.libService.minimal.next(value);
        }
    }
}
MinimalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: MinimalDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
MinimalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: MinimalDirective, selector: "ov-videoconference[minimal]", inputs: { minimal: "minimal" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: MinimalDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[minimal]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { minimal: [{
                type: Input
            }] } });
/**
 * The **lang** directive allows set the UI language to a default language.
 *
 * It is only available for {@link VideoconferenceComponent}.
 *
 * **Default:** English `en`
 *
 * **Available:**
 *
 * * English: `en`
 * * Spanish: `es`
 * * German: `de`
 * * French: `fr`
 * * Chinese: `cn`
 * * Hindi: `hi`
 * * Italian: `it`
 * * Japanese: `ja`
 * * Netherlands: `nl`
 * * Portuguese: `pt`
 *
 * @example
 * <ov-videoconference [lang]="es"></ov-videoconference>
 */
export class LangDirective {
    /**
     * @ignore
     */
    constructor(elementRef, translateService) {
        this.elementRef = elementRef;
        this.translateService = translateService;
    }
    /**
     * @ignore
     */
    set lang(value) {
        this.update(value);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.clear();
    }
    /**
     * @ignore
     */
    clear() {
        this.update('en');
    }
    /**
     * @ignore
     */
    update(value) {
        this.translateService.setLanguage(value);
    }
}
LangDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: LangDirective, deps: [{ token: i0.ElementRef }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Directive });
LangDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: LangDirective, selector: "ov-videoconference[lang]", inputs: { lang: "lang" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: LangDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[lang]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i2.TranslateService }]; }, propDecorators: { lang: [{
                type: Input
            }] } });
/**
 * The **captions-lang** directive allows specify the language of room's members
 *
 * It is only available for {@link VideoconferenceComponent}.
 *
 * It must be a valid [BCP-47](https://tools.ietf.org/html/bcp47) language tag like "en-US" or "es-ES".
 *
 *
 * **Default:** English `en-US`
 *
 * **Available:**
 *
 * * English: `en-US`
 * * Spanish: `es-ES`
 * * German: `de-DE`
 * * French: `fr-FR`
 * * Chinese: `zh-CN`
 * * Hindi: `hi-IN`
 * * Italian: `it-IT`
 * * Japanese: `jp-JP`
 * * Portuguese: `pt-PT`
 *
 * @example
 * <ov-videoconference [captionsLang]="es-ES"></ov-videoconference>
 */
export class CaptionsLangDirective {
    /**
     * @ignore
     */
    constructor(elementRef, captionService) {
        this.elementRef = elementRef;
        this.captionService = captionService;
    }
    /**
     * @ignore
     */
    set captionsLang(value) {
        this.update(value);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.clear();
    }
    /**
     * @ignore
     */
    clear() {
        this.update('en-US');
    }
    /**
     * @ignore
     */
    update(value) {
        this.captionService.setLanguage(value);
    }
}
CaptionsLangDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: CaptionsLangDirective, deps: [{ token: i0.ElementRef }, { token: i3.CaptionService }], target: i0.ɵɵFactoryTarget.Directive });
CaptionsLangDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: CaptionsLangDirective, selector: "ov-videoconference[captionsLang]", inputs: { captionsLang: "captionsLang" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: CaptionsLangDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[captionsLang]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i3.CaptionService }]; }, propDecorators: { captionsLang: [{
                type: Input
            }] } });
/**
 * The **participantName** directive sets the participant name. It can be useful for aplications which doesn't need the prejoin page.
 *
 * It is only available for {@link VideoconferenceComponent}.
 *
 * @example
 * <ov-videoconference [participantName]="'OpenVidu'"></ov-videoconference>
 */
export class ParticipantNameDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
    }
    /**
     * @ignore
     */
    ngOnInit() {
        this.update(this.participantName);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.clear();
    }
    /**
     * @ignore
     */
    clear() {
        this.update('');
    }
    /**
     * @ignore
     */
    update(value) {
        this.libService.participantName.next(value);
    }
}
ParticipantNameDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantNameDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ParticipantNameDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ParticipantNameDirective, selector: "ov-videoconference[participantName]", inputs: { participantName: "participantName" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantNameDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[participantName]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { participantName: [{
                type: Input
            }] } });
/**
 * The **prejoin** directive allows show/hide the prejoin page for selecting media devices.
 *
 * It is only available for {@link VideoconferenceComponent}.
 *
 * Default: `true`
 *
 * @example
 * <ov-videoconference [prejoin]="false"></ov-videoconference>
 */
export class PrejoinDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
    }
    /**
     * @ignore
     */
    set prejoin(value) {
        this.update(value);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.clear();
    }
    /**
     * @ignore
     */
    clear() {
        this.update(true);
    }
    /**
     * @ignore
     */
    update(value) {
        if (this.libService.prejoin.getValue() !== value) {
            this.libService.prejoin.next(value);
        }
    }
}
PrejoinDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: PrejoinDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
PrejoinDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: PrejoinDirective, selector: "ov-videoconference[prejoin]", inputs: { prejoin: "prejoin" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: PrejoinDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[prejoin]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { prejoin: [{
                type: Input
            }] } });
/**
 * The **videoMuted** directive allows to join the session with camera muted/unmuted.
 *
 * It is only available for {@link VideoconferenceComponent}.
 *
 * Default: `false`
 *
 *
 * @example
 * <ov-videoconference [videoMuted]="true"></ov-videoconference>
 */
export class VideoMutedDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
    }
    /**
     * @ignore
     */
    set videoMuted(value) {
        this.update(value);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.clear();
    }
    /**
     * @ignore
     */
    clear() {
        this.update(false);
    }
    /**
     * @ignore
     */
    update(value) {
        if (this.libService.videoMuted.getValue() !== value) {
            this.libService.videoMuted.next(value);
        }
    }
}
VideoMutedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: VideoMutedDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
VideoMutedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: VideoMutedDirective, selector: "ov-videoconference[videoMuted]", inputs: { videoMuted: "videoMuted" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: VideoMutedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[videoMuted]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { videoMuted: [{
                type: Input
            }] } });
/**
 * The **audioMuted** directive allows to join the session with microphone muted/unmuted.
 *
 * It is only available for {@link VideoconferenceComponent}.
 *
 * Default: `false`
 *
 * @example
 * <ov-videoconference [audioMuted]="true"></ov-videoconference>
 */
export class AudioMutedDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
    }
    /**
     * @ignore
     */
    set audioMuted(value) {
        this.update(value);
    }
    ngOnDestroy() {
        this.clear();
    }
    /**
     * @ignore
     */
    clear() {
        this.update(false);
    }
    /**
     * @ignore
     */
    update(value) {
        if (this.libService.audioMuted.getValue() !== value) {
            this.libService.audioMuted.next(value);
        }
    }
}
AudioMutedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: AudioMutedDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
AudioMutedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: AudioMutedDirective, selector: "ov-videoconference[audioMuted]", inputs: { audioMuted: "audioMuted" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: AudioMutedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[audioMuted]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { audioMuted: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,