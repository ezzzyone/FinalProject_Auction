import { Injectable } from '@angular/core';
import { OpenVidu, OpenViduErrorName } from 'openvidu-browser';
import { CameraType } from '../../models/device.model';
import { OpenViduEdition } from '../../models/openvidu.model';
import { ScreenType, VideoType } from '../../models/video-type.model';
import * as i0 from "@angular/core";
import * as i1 from "../config/openvidu-angular.config.service";
import * as i2 from "../platform/platform.service";
import * as i3 from "../logger/logger.service";
import * as i4 from "../participant/participant.service";
import * as i5 from "../device/device.service";
export class OpenViduService {
    /**
     * @internal
     */
    constructor(openviduAngularConfigSrv, platformService, loggerSrv, participantService, deviceService) {
        this.openviduAngularConfigSrv = openviduAngularConfigSrv;
        this.platformService = platformService;
        this.loggerSrv = loggerSrv;
        this.participantService = participantService;
        this.deviceService = deviceService;
        this.webcamToken = '';
        this.screenToken = '';
        this.videoSource = undefined;
        this.audioSource = undefined;
        this.log = this.loggerSrv.get('OpenViduService');
    }
    /**
     * @internal
     */
    initialize() {
        this.OV = new OpenVidu();
        this.OV.setAdvancedConfiguration({
            publisherSpeakingEventsOptions: {
                interval: 50
            }
        });
        if (this.openviduAngularConfigSrv.isProduction())
            this.OV.enableProdMode();
        this.webcamSession = this.OV.initSession();
        // Initialize screen session only if it is not mobile platform
        if (!this.platformService.isMobile()) {
            this.OVScreen = new OpenVidu();
            if (this.openviduAngularConfigSrv.isProduction())
                this.OVScreen.enableProdMode();
            this.screenSession = this.OVScreen.initSession();
        }
    }
    /**
     * @internal
     */
    setWebcamToken(token) {
        this.webcamToken = token;
    }
    /**
     * @internal
     */
    setScreenToken(token) {
        this.screenToken = token;
    }
    /**
     * @internal
     */
    getWebcamToken() {
        return this.webcamToken;
    }
    /**
     * @internal
     */
    getScreenToken() {
        return this.screenToken;
    }
    /**
     * @internal
     */
    isOpenViduCE() {
        return this.ovEdition === OpenViduEdition.CE;
    }
    /**
     * @internal
     */
    isOpenViduPro() {
        return this.ovEdition === OpenViduEdition.PRO;
    }
    /**
     * @internal
     */
    setOpenViduEdition(edition) {
        this.ovEdition = edition;
    }
    isSessionConnected() {
        return !!this.webcamSession.connection;
    }
    /**
     * @internal
     */
    async clear() {
        this.videoSource = undefined;
        this.audioSource = undefined;
        await this.participantService.getMyCameraPublisher()?.stream?.disposeMediaStream();
        await this.participantService.getMyScreenPublisher()?.stream?.disposeMediaStream();
    }
    /**
     *
     * Returns the local Session. See {@link https://docs.openvidu.io/en/stable/api/openvidu-browser/classes/Session.html  Session} object.
     */
    getSession() {
        return this.getWebcamSession();
    }
    /**
     * @internal
     */
    getWebcamSession() {
        return this.webcamSession;
    }
    /**
     * @internal
     */
    isWebcamSessionConnected() {
        return !!this.webcamSession.capabilities;
    }
    /**
     * @internal
     */
    getScreenSession() {
        return this.screenSession;
    }
    /**
     * @internal
     */
    isScreenSessionConnected() {
        return !!this.screenSession.capabilities;
    }
    /**
     * @internal
     */
    async connectSession(session, token) {
        if (!!token && session) {
            const nickname = this.participantService.getMyNickname();
            const participantId = this.participantService.getLocalParticipant().id;
            if (session === this.webcamSession) {
                this.log.d('Connecting webcam session');
                await this.webcamSession.connect(token, {
                    clientData: nickname,
                    participantId,
                    type: VideoType.CAMERA
                });
                this.participantService.setMyCameraConnectionId(this.webcamSession.connection.connectionId);
            }
            else if (session === this.screenSession) {
                this.log.d('Connecting screen session');
                await this.screenSession.connect(token, {
                    clientData: `${nickname}_${VideoType.SCREEN}`,
                    participantId,
                    type: VideoType.SCREEN
                });
                this.participantService.setMyScreenConnectionId(this.screenSession.connection.connectionId);
            }
        }
    }
    /**
     * Leaves the session, destroying all local streams and clean all participant data.
     */
    disconnect() {
        this.disconnectSession(this.webcamSession);
        this.disconnectSession(this.screenSession);
    }
    /**
     * @internal
     * Initialize a publisher checking devices saved on storage or if participant have devices available.
     */
    async initDefaultPublisher() {
        const hasVideoDevices = this.deviceService.hasVideoDeviceAvailable();
        const hasAudioDevices = this.deviceService.hasAudioDeviceAvailable();
        const isVideoActive = !this.deviceService.isVideoMuted();
        const isAudioActive = !this.deviceService.isAudioMuted();
        let videoSource = false;
        let audioSource = false;
        if (hasVideoDevices) {
            // Video is active, assign the device selected
            videoSource = this.deviceService.getCameraSelected().device;
        }
        else if (!isVideoActive && hasVideoDevices) {
            // Video is muted, assign the default device
            // videoSource = undefined;
        }
        if (hasAudioDevices) {
            // Audio is active, assign the device selected
            audioSource = this.deviceService.getMicrophoneSelected().device;
        }
        else if (!isAudioActive && hasAudioDevices) {
            // Audio is muted, assign the default device
            // audioSource = undefined;
        }
        const mirror = this.deviceService.getCameraSelected() && this.deviceService.getCameraSelected().type === CameraType.FRONT;
        const properties = {
            videoSource,
            audioSource,
            publishVideo: isVideoActive,
            publishAudio: isAudioActive,
            mirror
        };
        if (hasVideoDevices || hasAudioDevices) {
            const publisher = await this.initPublisher(undefined, properties);
            this.participantService.setMyCameraPublisher(publisher);
            this.participantService.updateLocalParticipant();
            return publisher;
        }
        else {
            this.participantService.setMyCameraPublisher(null);
        }
    }
    /**
     * @internal
     */
    async initPublisher(targetElement, properties) {
        this.log.d('Initializing publisher with properties: ', properties);
        return await this.OV.initPublisherAsync(targetElement, properties);
    }
    /**
     * @internal
     */
    async publish(publisher) {
        if (!!publisher) {
            if (publisher === this.participantService.getMyCameraPublisher()) {
                if (this.webcamSession?.capabilities?.publish) {
                    return await this.webcamSession.publish(publisher);
                }
                this.log.e('Webcam publisher cannot be published');
            }
            else if (publisher === this.participantService.getMyScreenPublisher()) {
                if (this.screenSession?.capabilities?.publish) {
                    return await this.screenSession.publish(publisher);
                }
                this.log.e('Screen publisher cannot be published');
            }
        }
    }
    /**
     * @internal
     */
    unpublish(publisher) {
        if (!!publisher) {
            if (publisher === this.participantService.getMyCameraPublisher()) {
                this.publishAudioAux(this.participantService.getMyScreenPublisher(), this.participantService.isMyAudioActive());
                this.webcamSession.unpublish(publisher);
            }
            else if (publisher === this.participantService.getMyScreenPublisher()) {
                this.screenSession.unpublish(publisher);
            }
        }
    }
    /**
     * Publish or unpublish the video stream (if available).
     * It hides the camera muted stream if screen is sharing.
     * See openvidu-browser {@link https://docs.openvidu.io/en/stable/api/openvidu-browser/classes/Publisher.html#publishVideo publishVideo}
     */
    async publishVideo(publish) {
        const publishAudio = this.participantService.isMyAudioActive();
        // Disabling webcam
        if (this.participantService.haveICameraAndScreenActive()) {
            await this.publishVideoAux(this.participantService.getMyCameraPublisher(), publish);
            this.participantService.disableWebcamStream();
            this.unpublish(this.participantService.getMyCameraPublisher());
            this.publishAudioAux(this.participantService.getMyScreenPublisher(), publishAudio);
        }
        else if (this.participantService.isOnlyMyScreenActive()) {
            // Enabling webcam
            const hasAudio = this.participantService.hasScreenAudioActive();
            if (!this.isWebcamSessionConnected()) {
                await this.connectSession(this.getWebcamSession(), this.getWebcamToken());
            }
            await this.publish(this.participantService.getMyCameraPublisher());
            await this.publishVideoAux(this.participantService.getMyCameraPublisher(), true);
            this.publishAudioAux(this.participantService.getMyScreenPublisher(), false);
            this.publishAudioAux(this.participantService.getMyCameraPublisher(), hasAudio);
            this.participantService.enableWebcamStream();
        }
        else {
            // Muting/unmuting webcam
            await this.publishVideoAux(this.participantService.getMyCameraPublisher(), publish);
        }
    }
    /**
     * @internal
     */
    async publishVideoAux(publisher, publish) {
        if (!!publisher) {
            let resource = true;
            if (publish) {
                // Forcing restoration with a custom media stream (the older one instead the default)
                const currentDeviceId = this.deviceService.getCameraSelected()?.device;
                const mediaStream = await this.createMediaStream({ videoSource: currentDeviceId, audioSource: false });
                resource = mediaStream.getVideoTracks()[0];
            }
            await publisher.publishVideo(publish, resource);
            this.participantService.updateLocalParticipant();
        }
    }
    /**
     * Publish or unpublish the audio stream (if available).
     * See openvidu-browser {@link https://docs.openvidu.io/en/stable/api/openvidu-browser/classes/Publisher.html#publishAudio publishAudio}.
     */
    async publishAudio(publish) {
        if (this.participantService.isMyCameraActive()) {
            if (this.participantService.isMyScreenActive() && this.participantService.hasScreenAudioActive()) {
                this.publishAudioAux(this.participantService.getMyScreenPublisher(), false);
            }
            this.publishAudioAux(this.participantService.getMyCameraPublisher(), publish);
        }
        else {
            this.publishAudioAux(this.participantService.getMyScreenPublisher(), publish);
        }
    }
    /**
     * Share or unshare the screen.
     * Hide the camera muted stream when screen is sharing.
     */
    async toggleScreenshare() {
        if (this.participantService.haveICameraAndScreenActive()) {
            // Disabling screenShare
            this.participantService.disableScreenStream();
            this.unpublish(this.participantService.getMyScreenPublisher());
        }
        else if (this.participantService.isOnlyMyCameraActive()) {
            // I only have the camera published
            const hasAudioDevicesAvailable = this.deviceService.hasAudioDeviceAvailable();
            const willWebcamBePresent = this.participantService.isMyCameraActive() && this.participantService.isMyVideoActive();
            const hasAudio = willWebcamBePresent ? false : hasAudioDevicesAvailable && this.participantService.isMyAudioActive();
            const properties = {
                videoSource: ScreenType.SCREEN,
                audioSource: hasAudioDevicesAvailable ? this.deviceService.getMicrophoneSelected().device : false,
                publishVideo: true,
                publishAudio: hasAudio,
                mirror: false
            };
            const screenPublisher = await this.initPublisher(undefined, properties);
            screenPublisher.once('accessAllowed', async () => {
                // Listen to event fired when native stop button is clicked
                screenPublisher.stream
                    .getMediaStream()
                    .getVideoTracks()[0]
                    .addEventListener('ended', async () => {
                    this.log.d('Clicked native stop button. Stopping screen sharing');
                    await this.toggleScreenshare();
                });
                // Enabling screenShare
                this.participantService.activeMyScreenShare(screenPublisher);
                if (!this.isScreenSessionConnected()) {
                    await this.connectSession(this.getScreenSession(), this.getScreenToken());
                }
                await this.publish(this.participantService.getMyScreenPublisher());
                if (!this.participantService.isMyVideoActive()) {
                    // Disabling webcam
                    this.participantService.disableWebcamStream();
                    this.unpublish(this.participantService.getMyCameraPublisher());
                }
            });
            screenPublisher.once('accessDenied', (error) => {
                return Promise.reject(error);
            });
        }
        else {
            // I only have my screenshare active and I have no camera or it is muted
            const hasAudio = this.participantService.hasScreenAudioActive();
            // Enable webcam
            if (!this.isWebcamSessionConnected()) {
                await this.connectSession(this.getWebcamSession(), this.getWebcamToken());
            }
            await this.publish(this.participantService.getMyCameraPublisher());
            this.publishAudioAux(this.participantService.getMyCameraPublisher(), hasAudio);
            this.participantService.enableWebcamStream();
            // Disabling screenshare
            this.participantService.disableScreenStream();
            this.unpublish(this.participantService.getMyScreenPublisher());
        }
    }
    /**
     * @internal
     */
    publishAudioAux(publisher, value) {
        if (!!publisher) {
            publisher.publishAudio(value);
            this.participantService.updateLocalParticipant();
        }
    }
    /**
     * @internal
     */
    sendSignal(type, connections, data) {
        const signalOptions = {
            data: JSON.stringify(data),
            type,
            to: connections && connections.length > 0 ? connections : undefined
        };
        this.webcamSession.signal(signalOptions);
    }
    /**
     * @internal
     */
    async replaceTrack(videoType, props) {
        try {
            this.log.d(`Replacing ${videoType} track`, props);
            if (videoType === VideoType.CAMERA) {
                let mediaStream;
                const isReplacingAudio = !!props.audioSource;
                const isReplacingVideo = !!props.videoSource;
                if (isReplacingVideo) {
                    mediaStream = await this.createMediaStream(props);
                    // Replace video track
                    const videoTrack = mediaStream.getVideoTracks()[0];
                    await this.participantService.getMyCameraPublisher().replaceTrack(videoTrack);
                }
                else if (isReplacingAudio) {
                    mediaStream = await this.createMediaStream(props);
                    // Replace audio track
                    const audioTrack = mediaStream.getAudioTracks()[0];
                    await this.participantService.getMyCameraPublisher().replaceTrack(audioTrack);
                }
            }
            else if (videoType === VideoType.SCREEN) {
                try {
                    let newScreenMediaStream = await this.OVScreen.getUserMedia(props);
                    this.participantService.getMyScreenPublisher().stream.getMediaStream().getVideoTracks()[0].stop();
                    await this.participantService.getMyScreenPublisher().replaceTrack(newScreenMediaStream.getVideoTracks()[0]);
                }
                catch (error) {
                    this.log.w('Cannot create the new MediaStream', error);
                }
            }
        }
        catch (error) {
            this.log.e('Error replacing track ', error);
        }
    }
    // private destroyPublisher(publisher: Publisher): void {
    // 	if (!!publisher) {
    // 		if (publisher.stream.getWebRtcPeer()) {
    // 			publisher.stream.disposeWebRtcPeer();
    // 		}
    // 		publisher.stream.disposeMediaStream();
    // 		if (publisher.id === this.participantService.getMyCameraPublisher().id) {
    // 			this.participantService.setMyCameraPublisher(publisher);
    // 		} else if (publisher.id === this.participantService.getMyScreenPublisher().id) {
    // 			this.participantService.setMyScreenPublisher(publisher);
    // 		}
    // 	}
    // }
    async createMediaStream(pp) {
        let mediaStream;
        const isFirefoxPlatform = this.platformService.isFirefox();
        const isReplacingAudio = !!pp.audioSource;
        const isReplacingVideo = !!pp.videoSource;
        try {
            mediaStream = await this.OV.getUserMedia(pp);
        }
        catch (error) {
            if (error.name === OpenViduErrorName.DEVICE_ACCESS_DENIED) {
                if (isFirefoxPlatform) {
                    this.log.w('The device requested is not available. Restoring the older one');
                    // The track requested is not available so we are getting the old tracks ids for recovering the track
                    if (isReplacingVideo) {
                        pp.videoSource = this.deviceService.getCameraSelected().device;
                    }
                    else if (isReplacingAudio) {
                        pp.audioSource = this.deviceService.getMicrophoneSelected().device;
                    }
                    mediaStream = await this.OV.getUserMedia(pp);
                    // TODO show error alert informing that the new device is not available
                }
            }
        }
        finally {
            return mediaStream;
        }
    }
    /**
     * @internal
     */
    needSendNicknameSignal() {
        let oldNickname;
        try {
            const connData = JSON.parse(this.webcamSession.connection.data.split('%/%')[0]);
            oldNickname = connData.clientData;
        }
        catch (error) {
            this.log.e(error);
        }
        return oldNickname !== this.participantService.getMyNickname();
    }
    /**
     * @internal
     */
    isMyOwnConnection(connectionId) {
        return (this.webcamSession?.connection?.connectionId === connectionId || this.screenSession?.connection?.connectionId === connectionId);
    }
    /**
     *
     * Returns the remote connections of the Session.
     * See {@link https://docs.openvidu.io/en/stable/api/openvidu-browser/classes/Connection.html  Connection} object.
     */
    getRemoteConnections() {
        // Avoid screen connections
        const remoteCameraConnections = Array.from(this.webcamSession.remoteConnections.values()).filter((conn) => {
            let type;
            type = JSON.parse(conn.data).type;
            return type !== VideoType.SCREEN;
        });
        return remoteCameraConnections;
    }
    disconnectSession(session) {
        if (session) {
            if (session.sessionId === this.webcamSession?.sessionId) {
                this.log.d('Disconnecting webcam session');
                this.webcamSession?.disconnect();
                this.webcamSession = null;
            }
            else if (session.sessionId === this.screenSession?.sessionId) {
                this.log.d('Disconnecting screen session');
                this.screenSession?.disconnect();
                this.screenSession = null;
            }
        }
    }
}
OpenViduService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: OpenViduService, deps: [{ token: i1.OpenViduAngularConfigService }, { token: i2.PlatformService }, { token: i3.LoggerService }, { token: i4.ParticipantService }, { token: i5.DeviceService }], target: i0.ɵɵFactoryTarget.Injectable });
OpenViduService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: OpenViduService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: OpenViduService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.OpenViduAngularConfigService }, { type: i2.PlatformService }, { type: i3.LoggerService }, { type: i4.ParticipantService }, { type: i5.DeviceService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbnZpZHUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL29wZW52aWR1LWFuZ3VsYXIvc3JjL2xpYi9zZXJ2aWNlcy9vcGVudmlkdS9vcGVudmlkdS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUVOLFFBQVEsRUFFUixpQkFBaUIsRUFLakIsTUFBTSxrQkFBa0IsQ0FBQztBQUkxQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlELE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7Ozs7QUFTdEUsTUFBTSxPQUFPLGVBQWU7SUFZM0I7O09BRUc7SUFDSCxZQUNXLHdCQUFzRCxFQUN0RCxlQUFnQyxFQUNoQyxTQUF3QixFQUMxQixrQkFBc0MsRUFDcEMsYUFBNEI7UUFKNUIsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUE4QjtRQUN0RCxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsY0FBUyxHQUFULFNBQVMsQ0FBZTtRQUMxQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3BDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBbEIvQixnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUNqQixnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUtmLGdCQUFXLEdBQUcsU0FBUyxDQUFDO1FBQ3hCLGdCQUFXLEdBQUcsU0FBUyxDQUFDO1FBYWpDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxVQUFVO1FBQ1QsSUFBSSxDQUFDLEVB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QUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxDQUFDO2dCQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQzthQUMxQjtpQkFBTSxJQUFJLE9BQU8sQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUU7Z0JBQy9ELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLENBQUM7Z0JBQzNDLElBQUksQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO2FBQzFCO1NBQ0Q7SUFDRixDQUFDOzs0R0F6aUJXLGVBQWU7Z0hBQWYsZUFBZSxjQUZmLE1BQU07MkZBRU4sZUFBZTtrQkFIM0IsVUFBVTttQkFBQztvQkFDWCxVQUFVLEVBQUUsTUFBTTtpQkFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuXHRDb25uZWN0aW9uLFxuXHRPcGVuVmlkdSxcblx0T3BlblZpZHVFcnJvcixcblx0T3BlblZpZHVFcnJvck5hbWUsXG5cdFB1Ymxpc2hlcixcblx0UHVibGlzaGVyUHJvcGVydGllcyxcblx0U2Vzc2lvbixcblx0U2lnbmFsT3B0aW9uc1xufSBmcm9tICdvcGVudmlkdS1icm93c2VyJztcblxuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJy4uL2xvZ2dlci9sb2dnZXIuc2VydmljZSc7XG5cbmltcG9ydCB7IENhbWVyYVR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbHMvZGV2aWNlLm1vZGVsJztcbmltcG9ydCB7IElMb2dnZXIgfSBmcm9tICcuLi8uLi9tb2RlbHMvbG9nZ2VyLm1vZGVsJztcbmltcG9ydCB7IE9wZW5WaWR1RWRpdGlvbiB9IGZyb20gJy4uLy4uL21vZGVscy9vcGVudmlkdS5tb2RlbCc7XG5pbXBvcnQgeyBTaWduYWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvc2lnbmFsLm1vZGVsJztcbmltcG9ydCB7IFNjcmVlblR5cGUsIFZpZGVvVHlwZSB9IGZyb20gJy4uLy4uL21vZGVscy92aWRlby10eXBlLm1vZGVsJztcbmltcG9ydCB7IE9wZW5WaWR1QW5ndWxhckNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi9jb25maWcvb3BlbnZpZHUtYW5ndWxhci5jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBEZXZpY2VTZXJ2aWNlIH0gZnJvbSAnLi4vZGV2aWNlL2RldmljZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBhcnRpY2lwYW50U2VydmljZSB9IGZyb20gJy4uL3BhcnRpY2lwYW50L3BhcnRpY2lwYW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgUGxhdGZvcm1TZXJ2aWNlIH0gZnJvbSAnLi4vcGxhdGZvcm0vcGxhdGZvcm0uc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcblx0cHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE9wZW5WaWR1U2VydmljZSB7XG5cdHByaXZhdGUgb3ZFZGl0aW9uOiBPcGVuVmlkdUVkaXRpb247XG5cdHByaXZhdGUgd2ViY2FtVG9rZW4gPSAnJztcblx0cHJpdmF0ZSBzY3JlZW5Ub2tlbiA9ICcnO1xuXHRwcm90ZWN0ZWQgT1Y6IE9wZW5WaWR1O1xuXHRwcm90ZWN0ZWQgT1ZTY3JlZW46IE9wZW5WaWR1O1xuXHRwcm90ZWN0ZWQgd2ViY2FtU2Vzc2lvbjogU2Vzc2lvbjtcblx0cHJvdGVjdGVkIHNjcmVlblNlc3Npb246IFNlc3Npb247XG5cdHByb3RlY3RlZCB2aWRlb1NvdXJjZSA9IHVuZGVmaW5lZDtcblx0cHJvdGVjdGVkIGF1ZGlvU291cmNlID0gdW5kZWZpbmVkO1xuXHRwcm90ZWN0ZWQgbG9nOiBJTG9nZ2VyO1xuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByb3RlY3RlZCBvcGVudmlkdUFuZ3VsYXJDb25maWdTcnY6IE9wZW5WaWR1QW5ndWxhckNvbmZpZ1NlcnZpY2UsXG5cdFx0cHJvdGVjdGVkIHBsYXRmb3JtU2VydmljZTogUGxhdGZvcm1TZXJ2aWNlLFxuXHRcdHByb3RlY3RlZCBsb2dnZXJTcnY6IExvZ2dlclNlcnZpY2UsXG5cdFx0cHJpdmF0ZSBwYXJ0aWNpcGFudFNlcnZpY2U6IFBhcnRpY2lwYW50U2VydmljZSxcblx0XHRwcm90ZWN0ZWQgZGV2aWNlU2VydmljZTogRGV2aWNlU2VydmljZVxuXHQpIHtcblx0XHR0aGlzLmxvZyA9IHRoaXMubG9nZ2VyU3J2LmdldCgnT3BlblZpZHVTZXJ2aWNlJyk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRpbml0aWFsaXplKCkge1xuXHRcdHRoaXMuT1YgPSBuZXcgT3BlblZpZHUoKTtcblx0XHR0aGlzLk9WLnNldEFkdmFuY2VkQ29uZmlndXJhdGlvbih7XG5cdFx0XHRwdWJsaXNoZXJTcGVha2luZ0V2ZW50c09wdGlvbnM6IHtcblx0XHRcdFx0aW50ZXJ2YWw6IDUwXG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0aWYgKHRoaXMub3BlbnZpZHVBbmd1bGFyQ29uZmlnU3J2LmlzUHJvZHVjdGlvbigpKSB0aGlzLk9WLmVuYWJsZVByb2RNb2RlKCk7XG5cdFx0dGhpcy53ZWJjYW1TZXNzaW9uID0gdGhpcy5PVi5pbml0U2Vzc2lvbigpO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSBzY3JlZW4gc2Vzc2lvbiBvbmx5IGlmIGl0IGlzIG5vdCBtb2JpbGUgcGxhdGZvcm1cblx0XHRpZiAoIXRoaXMucGxhdGZvcm1TZXJ2aWNlLmlzTW9iaWxlKCkpIHtcblx0XHRcdHRoaXMuT1ZTY3JlZW4gPSBuZXcgT3BlblZpZHUoKTtcblx0XHRcdGlmICh0aGlzLm9wZW52aWR1QW5ndWxhckNvbmZpZ1Nydi5pc1Byb2R1Y3Rpb24oKSkgdGhpcy5PVlNjcmVlbi5lbmFibGVQcm9kTW9kZSgpO1xuXHRcdFx0dGhpcy5zY3JlZW5TZXNzaW9uID0gdGhpcy5PVlNjcmVlbi5pbml0U2Vzc2lvbigpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHNldFdlYmNhbVRva2VuKHRva2VuOiBzdHJpbmcpIHtcblx0XHR0aGlzLndlYmNhbVRva2VuID0gdG9rZW47XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRzZXRTY3JlZW5Ub2tlbih0b2tlbjogc3RyaW5nKSB7XG5cdFx0dGhpcy5zY3JlZW5Ub2tlbiA9IHRva2VuO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0Z2V0V2ViY2FtVG9rZW4oKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy53ZWJjYW1Ub2tlbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGdldFNjcmVlblRva2VuKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuc2NyZWVuVG9rZW47XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRpc09wZW5WaWR1Q0UoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMub3ZFZGl0aW9uID09PSBPcGVuVmlkdUVkaXRpb24uQ0U7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHQgaXNPcGVuVmlkdVBybygpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5vdkVkaXRpb24gPT09IE9wZW5WaWR1RWRpdGlvbi5QUk87XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRzZXRPcGVuVmlkdUVkaXRpb24oZWRpdGlvbjogT3BlblZpZHVFZGl0aW9uKSB7XG5cdFx0dGhpcy5vdkVkaXRpb24gPSBlZGl0aW9uO1xuXHR9XG5cblx0aXNTZXNzaW9uQ29ubmVjdGVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAhIXRoaXMud2ViY2FtU2Vzc2lvbi5jb25uZWN0aW9uO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0YXN5bmMgY2xlYXIoKSB7XG5cdFx0dGhpcy52aWRlb1NvdXJjZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLmF1ZGlvU291cmNlID0gdW5kZWZpbmVkO1xuXHRcdGF3YWl0IHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmdldE15Q2FtZXJhUHVibGlzaGVyKCk/LnN0cmVhbT8uZGlzcG9zZU1lZGlhU3RyZWFtKCk7XG5cdFx0YXdhaXQgdGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlTY3JlZW5QdWJsaXNoZXIoKT8uc3RyZWFtPy5kaXNwb3NlTWVkaWFTdHJlYW0oKTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBSZXR1cm5zIHRoZSBsb2NhbCBTZXNzaW9uLiBTZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5vcGVudmlkdS5pby9lbi9zdGFibGUvYXBpL29wZW52aWR1LWJyb3dzZXIvY2xhc3Nlcy9TZXNzaW9uLmh0bWwgIFNlc3Npb259IG9iamVjdC5cblx0ICovXG5cdGdldFNlc3Npb24oKTogU2Vzc2lvbiB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0V2ViY2FtU2Vzc2lvbigpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0Z2V0V2ViY2FtU2Vzc2lvbigpOiBTZXNzaW9uIHtcblx0XHRyZXR1cm4gdGhpcy53ZWJjYW1TZXNzaW9uO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0aXNXZWJjYW1TZXNzaW9uQ29ubmVjdGVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAhIXRoaXMud2ViY2FtU2Vzc2lvbi5jYXBhYmlsaXRpZXM7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRnZXRTY3JlZW5TZXNzaW9uKCk6IFNlc3Npb24ge1xuXHRcdHJldHVybiB0aGlzLnNjcmVlblNlc3Npb247XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRpc1NjcmVlblNlc3Npb25Db25uZWN0ZWQoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuICEhdGhpcy5zY3JlZW5TZXNzaW9uLmNhcGFiaWxpdGllcztcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGFzeW5jIGNvbm5lY3RTZXNzaW9uKHNlc3Npb246IFNlc3Npb24sIHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiAoISF0b2tlbiAmJiBzZXNzaW9uKSB7XG5cdFx0XHRjb25zdCBuaWNrbmFtZSA9IHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmdldE15Tmlja25hbWUoKTtcblx0XHRcdGNvbnN0IHBhcnRpY2lwYW50SWQgPSB0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRMb2NhbFBhcnRpY2lwYW50KCkuaWQ7XG5cdFx0XHRpZiAoc2Vzc2lvbiA9PT0gdGhpcy53ZWJjYW1TZXNzaW9uKSB7XG5cdFx0XHRcdHRoaXMubG9nLmQoJ0Nvbm5lY3Rpbmcgd2ViY2FtIHNlc3Npb24nKTtcblx0XHRcdFx0YXdhaXQgdGhpcy53ZWJjYW1TZXNzaW9uLmNvbm5lY3QodG9rZW4sIHtcblx0XHRcdFx0XHRjbGllbnREYXRhOiBuaWNrbmFtZSxcblx0XHRcdFx0XHRwYXJ0aWNpcGFudElkLFxuXHRcdFx0XHRcdHR5cGU6IFZpZGVvVHlwZS5DQU1FUkFcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLnNldE15Q2FtZXJhQ29ubmVjdGlvbklkKHRoaXMud2ViY2FtU2Vzc2lvbi5jb25uZWN0aW9uLmNvbm5lY3Rpb25JZCk7XG5cdFx0XHR9IGVsc2UgaWYgKHNlc3Npb24gPT09IHRoaXMuc2NyZWVuU2Vzc2lvbikge1xuXHRcdFx0XHR0aGlzLmxvZy5kKCdDb25uZWN0aW5nIHNjcmVlbiBzZXNzaW9uJyk7XG5cdFx0XHRcdGF3YWl0IHRoaXMuc2NyZWVuU2Vzc2lvbi5jb25uZWN0KHRva2VuLCB7XG5cdFx0XHRcdFx0Y2xpZW50RGF0YTogYCR7bmlja25hbWV9XyR7VmlkZW9UeXBlLlNDUkVFTn1gLFxuXHRcdFx0XHRcdHBhcnRpY2lwYW50SWQsXG5cdFx0XHRcdFx0dHlwZTogVmlkZW9UeXBlLlNDUkVFTlxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLnBhcnRpY2lwYW50U2VydmljZS5zZXRNeVNjcmVlbkNvbm5lY3Rpb25JZCh0aGlzLnNjcmVlblNlc3Npb24uY29ubmVjdGlvbi5jb25uZWN0aW9uSWQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBMZWF2ZXMgdGhlIHNlc3Npb24sIGRlc3Ryb3lpbmcgYWxsIGxvY2FsIHN0cmVhbXMgYW5kIGNsZWFuIGFsbCBwYXJ0aWNpcGFudCBkYXRhLlxuXHQgKi9cblx0ZGlzY29ubmVjdCgpIHtcblx0XHR0aGlzLmRpc2Nvbm5lY3RTZXNzaW9uKHRoaXMud2ViY2FtU2Vzc2lvbik7XG5cdFx0dGhpcy5kaXNjb25uZWN0U2Vzc2lvbih0aGlzLnNjcmVlblNlc3Npb24pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBJbml0aWFsaXplIGEgcHVibGlzaGVyIGNoZWNraW5nIGRldmljZXMgc2F2ZWQgb24gc3RvcmFnZSBvciBpZiBwYXJ0aWNpcGFudCBoYXZlIGRldmljZXMgYXZhaWxhYmxlLlxuXHQgKi9cblx0YXN5bmMgaW5pdERlZmF1bHRQdWJsaXNoZXIoKTogUHJvbWlzZTxQdWJsaXNoZXI+IHtcblx0XHRjb25zdCBoYXNWaWRlb0RldmljZXMgPSB0aGlzLmRldmljZVNlcnZpY2UuaGFzVmlkZW9EZXZpY2VBdmFpbGFibGUoKTtcblx0XHRjb25zdCBoYXNBdWRpb0RldmljZXMgPSB0aGlzLmRldmljZVNlcnZpY2UuaGFzQXVkaW9EZXZpY2VBdmFpbGFibGUoKTtcblx0XHRjb25zdCBpc1ZpZGVvQWN0aXZlID0gIXRoaXMuZGV2aWNlU2VydmljZS5pc1ZpZGVvTXV0ZWQoKTtcblx0XHRjb25zdCBpc0F1ZGlvQWN0aXZlID0gIXRoaXMuZGV2aWNlU2VydmljZS5pc0F1ZGlvTXV0ZWQoKTtcblxuXHRcdGxldCB2aWRlb1NvdXJjZTogc3RyaW5nIHwgYm9vbGVhbiA9IGZhbHNlO1xuXHRcdGxldCBhdWRpb1NvdXJjZTogc3RyaW5nIHwgYm9vbGVhbiA9IGZhbHNlO1xuXG5cdFx0aWYgKGhhc1ZpZGVvRGV2aWNlcykge1xuXHRcdFx0Ly8gVmlkZW8gaXMgYWN0aXZlLCBhc3NpZ24gdGhlIGRldmljZSBzZWxlY3RlZFxuXHRcdFx0dmlkZW9Tb3VyY2UgPSB0aGlzLmRldmljZVNlcnZpY2UuZ2V0Q2FtZXJhU2VsZWN0ZWQoKS5kZXZpY2U7XG5cdFx0fSBlbHNlIGlmICghaXNWaWRlb0FjdGl2ZSAmJiBoYXNWaWRlb0RldmljZXMpIHtcblx0XHRcdC8vIFZpZGVvIGlzIG11dGVkLCBhc3NpZ24gdGhlIGRlZmF1bHQgZGV2aWNlXG5cdFx0XHQvLyB2aWRlb1NvdXJjZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoaGFzQXVkaW9EZXZpY2VzKSB7XG5cdFx0XHQvLyBBdWRpbyBpcyBhY3RpdmUsIGFzc2lnbiB0aGUgZGV2aWNlIHNlbGVjdGVkXG5cdFx0XHRhdWRpb1NvdXJjZSA9IHRoaXMuZGV2aWNlU2VydmljZS5nZXRNaWNyb3Bob25lU2VsZWN0ZWQoKS5kZXZpY2U7XG5cdFx0fSBlbHNlIGlmICghaXNBdWRpb0FjdGl2ZSAmJiBoYXNBdWRpb0RldmljZXMpIHtcblx0XHRcdC8vIEF1ZGlvIGlzIG11dGVkLCBhc3NpZ24gdGhlIGRlZmF1bHQgZGV2aWNlXG5cdFx0XHQvLyBhdWRpb1NvdXJjZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRjb25zdCBtaXJyb3IgPSB0aGlzLmRldmljZVNlcnZpY2UuZ2V0Q2FtZXJhU2VsZWN0ZWQoKSAmJiB0aGlzLmRldmljZVNlcnZpY2UuZ2V0Q2FtZXJhU2VsZWN0ZWQoKS50eXBlID09PSBDYW1lcmFUeXBlLkZST05UO1xuXHRcdGNvbnN0IHByb3BlcnRpZXM6IFB1Ymxpc2hlclByb3BlcnRpZXMgPSB7XG5cdFx0XHR2aWRlb1NvdXJjZSxcblx0XHRcdGF1ZGlvU291cmNlLFxuXHRcdFx0cHVibGlzaFZpZGVvOiBpc1ZpZGVvQWN0aXZlLFxuXHRcdFx0cHVibGlzaEF1ZGlvOiBpc0F1ZGlvQWN0aXZlLFxuXHRcdFx0bWlycm9yXG5cdFx0fTtcblx0XHRpZiAoaGFzVmlkZW9EZXZpY2VzIHx8IGhhc0F1ZGlvRGV2aWNlcykge1xuXHRcdFx0Y29uc3QgcHVibGlzaGVyID0gYXdhaXQgdGhpcy5pbml0UHVibGlzaGVyKHVuZGVmaW5lZCwgcHJvcGVydGllcyk7XG5cdFx0XHR0aGlzLnBhcnRpY2lwYW50U2VydmljZS5zZXRNeUNhbWVyYVB1Ymxpc2hlcihwdWJsaXNoZXIpO1xuXHRcdFx0dGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UudXBkYXRlTG9jYWxQYXJ0aWNpcGFudCgpO1xuXHRcdFx0cmV0dXJuIHB1Ymxpc2hlcjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wYXJ0aWNpcGFudFNlcnZpY2Uuc2V0TXlDYW1lcmFQdWJsaXNoZXIobnVsbCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0YXN5bmMgaW5pdFB1Ymxpc2hlcih0YXJnZXRFbGVtZW50OiBzdHJpbmcgfCBIVE1MRWxlbWVudCwgcHJvcGVydGllczogUHVibGlzaGVyUHJvcGVydGllcyk6IFByb21pc2U8UHVibGlzaGVyPiB7XG5cdFx0dGhpcy5sb2cuZCgnSW5pdGlhbGl6aW5nIHB1Ymxpc2hlciB3aXRoIHByb3BlcnRpZXM6ICcsIHByb3BlcnRpZXMpO1xuXHRcdHJldHVybiBhd2FpdCB0aGlzLk9WLmluaXRQdWJsaXNoZXJBc3luYyh0YXJnZXRFbGVtZW50LCBwcm9wZXJ0aWVzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGFzeW5jIHB1Ymxpc2gocHVibGlzaGVyOiBQdWJsaXNoZXIpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiAoISFwdWJsaXNoZXIpIHtcblx0XHRcdGlmIChwdWJsaXNoZXIgPT09IHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmdldE15Q2FtZXJhUHVibGlzaGVyKCkpIHtcblx0XHRcdFx0aWYgKHRoaXMud2ViY2FtU2Vzc2lvbj8uY2FwYWJpbGl0aWVzPy5wdWJsaXNoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGF3YWl0IHRoaXMud2ViY2FtU2Vzc2lvbi5wdWJsaXNoKHB1Ymxpc2hlcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5sb2cuZSgnV2ViY2FtIHB1Ymxpc2hlciBjYW5ub3QgYmUgcHVibGlzaGVkJyk7XG5cdFx0XHR9IGVsc2UgaWYgKHB1Ymxpc2hlciA9PT0gdGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlTY3JlZW5QdWJsaXNoZXIoKSkge1xuXHRcdFx0XHRpZiAodGhpcy5zY3JlZW5TZXNzaW9uPy5jYXBhYmlsaXRpZXM/LnB1Ymxpc2gpIHtcblx0XHRcdFx0XHRyZXR1cm4gYXdhaXQgdGhpcy5zY3JlZW5TZXNzaW9uLnB1Ymxpc2gocHVibGlzaGVyKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmxvZy5lKCdTY3JlZW4gcHVibGlzaGVyIGNhbm5vdCBiZSBwdWJsaXNoZWQnKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRwcml2YXRlIHVucHVibGlzaChwdWJsaXNoZXI6IFB1Ymxpc2hlcik6IHZvaWQge1xuXHRcdGlmICghIXB1Ymxpc2hlcikge1xuXHRcdFx0aWYgKHB1Ymxpc2hlciA9PT0gdGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlDYW1lcmFQdWJsaXNoZXIoKSkge1xuXHRcdFx0XHR0aGlzLnB1Ymxpc2hBdWRpb0F1eCh0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRNeVNjcmVlblB1Ymxpc2hlcigpLCB0aGlzLnBhcnRpY2lwYW50U2VydmljZS5pc015QXVkaW9BY3RpdmUoKSk7XG5cdFx0XHRcdHRoaXMud2ViY2FtU2Vzc2lvbi51bnB1Ymxpc2gocHVibGlzaGVyKTtcblx0XHRcdH0gZWxzZSBpZiAocHVibGlzaGVyID09PSB0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRNeVNjcmVlblB1Ymxpc2hlcigpKSB7XG5cdFx0XHRcdHRoaXMuc2NyZWVuU2Vzc2lvbi51bnB1Ymxpc2gocHVibGlzaGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUHVibGlzaCBvciB1bnB1Ymxpc2ggdGhlIHZpZGVvIHN0cmVhbSAoaWYgYXZhaWxhYmxlKS5cblx0ICogSXQgaGlkZXMgdGhlIGNhbWVyYSBtdXRlZCBzdHJlYW0gaWYgc2NyZWVuIGlzIHNoYXJpbmcuXG5cdCAqIFNlZSBvcGVudmlkdS1icm93c2VyIHtAbGluayBodHRwczovL2RvY3Mub3BlbnZpZHUuaW8vZW4vc3RhYmxlL2FwaS9vcGVudmlkdS1icm93c2VyL2NsYXNzZXMvUHVibGlzaGVyLmh0bWwjcHVibGlzaFZpZGVvIHB1Ymxpc2hWaWRlb31cblx0ICovXG5cdGFzeW5jIHB1Ymxpc2hWaWRlbyhwdWJsaXNoOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgcHVibGlzaEF1ZGlvID0gdGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuaXNNeUF1ZGlvQWN0aXZlKCk7XG5cblx0XHQvLyBEaXNhYmxpbmcgd2ViY2FtXG5cdFx0aWYgKHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmhhdmVJQ2FtZXJhQW5kU2NyZWVuQWN0aXZlKCkpIHtcblx0XHRcdGF3YWl0IHRoaXMucHVibGlzaFZpZGVvQXV4KHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmdldE15Q2FtZXJhUHVibGlzaGVyKCksIHB1Ymxpc2gpO1xuXHRcdFx0dGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZGlzYWJsZVdlYmNhbVN0cmVhbSgpO1xuXHRcdFx0dGhpcy51bnB1Ymxpc2godGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlDYW1lcmFQdWJsaXNoZXIoKSk7XG5cdFx0XHR0aGlzLnB1Ymxpc2hBdWRpb0F1eCh0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRNeVNjcmVlblB1Ymxpc2hlcigpLCBwdWJsaXNoQXVkaW8pO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuaXNPbmx5TXlTY3JlZW5BY3RpdmUoKSkge1xuXHRcdFx0Ly8gRW5hYmxpbmcgd2ViY2FtXG5cdFx0XHRjb25zdCBoYXNBdWRpbyA9IHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmhhc1NjcmVlbkF1ZGlvQWN0aXZlKCk7XG5cdFx0XHRpZiAoIXRoaXMuaXNXZWJjYW1TZXNzaW9uQ29ubmVjdGVkKCkpIHtcblx0XHRcdFx0YXdhaXQgdGhpcy5jb25uZWN0U2Vzc2lvbih0aGlzLmdldFdlYmNhbVNlc3Npb24oKSwgdGhpcy5nZXRXZWJjYW1Ub2tlbigpKTtcblx0XHRcdH1cblx0XHRcdGF3YWl0IHRoaXMucHVibGlzaCh0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRNeUNhbWVyYVB1Ymxpc2hlcigpKTtcblx0XHRcdGF3YWl0IHRoaXMucHVibGlzaFZpZGVvQXV4KHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmdldE15Q2FtZXJhUHVibGlzaGVyKCksIHRydWUpO1xuXHRcdFx0dGhpcy5wdWJsaXNoQXVkaW9BdXgodGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlTY3JlZW5QdWJsaXNoZXIoKSwgZmFsc2UpO1xuXHRcdFx0dGhpcy5wdWJsaXNoQXVkaW9BdXgodGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlDYW1lcmFQdWJsaXNoZXIoKSwgaGFzQXVkaW8pO1xuXHRcdFx0dGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZW5hYmxlV2ViY2FtU3RyZWFtKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIE11dGluZy91bm11dGluZyB3ZWJjYW1cblx0XHRcdGF3YWl0IHRoaXMucHVibGlzaFZpZGVvQXV4KHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmdldE15Q2FtZXJhUHVibGlzaGVyKCksIHB1Ymxpc2gpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHByaXZhdGUgYXN5bmMgcHVibGlzaFZpZGVvQXV4KHB1Ymxpc2hlcjogUHVibGlzaGVyLCBwdWJsaXNoOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0aWYgKCEhcHVibGlzaGVyKSB7XG5cdFx0XHRsZXQgcmVzb3VyY2U6IGJvb2xlYW4gfCBNZWRpYVN0cmVhbVRyYWNrID0gdHJ1ZTtcblx0XHRcdGlmIChwdWJsaXNoKSB7XG5cdFx0XHRcdC8vIEZvcmNpbmcgcmVzdG9yYXRpb24gd2l0aCBhIGN1c3RvbSBtZWRpYSBzdHJlYW0gKHRoZSBvbGRlciBvbmUgaW5zdGVhZCB0aGUgZGVmYXVsdClcblx0XHRcdFx0Y29uc3QgY3VycmVudERldmljZUlkID0gdGhpcy5kZXZpY2VTZXJ2aWNlLmdldENhbWVyYVNlbGVjdGVkKCk/LmRldmljZTtcblx0XHRcdFx0Y29uc3QgbWVkaWFTdHJlYW0gPSBhd2FpdCB0aGlzLmNyZWF0ZU1lZGlhU3RyZWFtKHsgdmlkZW9Tb3VyY2U6IGN1cnJlbnREZXZpY2VJZCwgYXVkaW9Tb3VyY2U6IGZhbHNlIH0pO1xuXHRcdFx0XHRyZXNvdXJjZSA9IG1lZGlhU3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF07XG5cdFx0XHR9XG5cblx0XHRcdGF3YWl0IHB1Ymxpc2hlci5wdWJsaXNoVmlkZW8ocHVibGlzaCwgcmVzb3VyY2UpO1xuXHRcdFx0dGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UudXBkYXRlTG9jYWxQYXJ0aWNpcGFudCgpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBQdWJsaXNoIG9yIHVucHVibGlzaCB0aGUgYXVkaW8gc3RyZWFtIChpZiBhdmFpbGFibGUpLlxuXHQgKiBTZWUgb3BlbnZpZHUtYnJvd3NlciB7QGxpbmsgaHR0cHM6Ly9kb2NzLm9wZW52aWR1LmlvL2VuL3N0YWJsZS9hcGkvb3BlbnZpZHUtYnJvd3Nlci9jbGFzc2VzL1B1Ymxpc2hlci5odG1sI3B1Ymxpc2hBdWRpbyBwdWJsaXNoQXVkaW99LlxuXHQgKi9cblx0YXN5bmMgcHVibGlzaEF1ZGlvKHB1Ymxpc2g6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiAodGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuaXNNeUNhbWVyYUFjdGl2ZSgpKSB7XG5cdFx0XHRpZiAodGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuaXNNeVNjcmVlbkFjdGl2ZSgpICYmIHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmhhc1NjcmVlbkF1ZGlvQWN0aXZlKCkpIHtcblx0XHRcdFx0dGhpcy5wdWJsaXNoQXVkaW9BdXgodGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlTY3JlZW5QdWJsaXNoZXIoKSwgZmFsc2UpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnB1Ymxpc2hBdWRpb0F1eCh0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRNeUNhbWVyYVB1Ymxpc2hlcigpLCBwdWJsaXNoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wdWJsaXNoQXVkaW9BdXgodGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlTY3JlZW5QdWJsaXNoZXIoKSwgcHVibGlzaCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNoYXJlIG9yIHVuc2hhcmUgdGhlIHNjcmVlbi5cblx0ICogSGlkZSB0aGUgY2FtZXJhIG11dGVkIHN0cmVhbSB3aGVuIHNjcmVlbiBpcyBzaGFyaW5nLlxuXHQgKi9cblx0YXN5bmMgdG9nZ2xlU2NyZWVuc2hhcmUoKSB7XG5cdFx0aWYgKHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmhhdmVJQ2FtZXJhQW5kU2NyZWVuQWN0aXZlKCkpIHtcblx0XHRcdC8vIERpc2FibGluZyBzY3JlZW5TaGFyZVxuXHRcdFx0dGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZGlzYWJsZVNjcmVlblN0cmVhbSgpO1xuXHRcdFx0dGhpcy51bnB1Ymxpc2godGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlTY3JlZW5QdWJsaXNoZXIoKSk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLnBhcnRpY2lwYW50U2VydmljZS5pc09ubHlNeUNhbWVyYUFjdGl2ZSgpKSB7XG5cdFx0XHQvLyBJIG9ubHkgaGF2ZSB0aGUgY2FtZXJhIHB1Ymxpc2hlZFxuXHRcdFx0Y29uc3QgaGFzQXVkaW9EZXZpY2VzQXZhaWxhYmxlID0gdGhpcy5kZXZpY2VTZXJ2aWNlLmhhc0F1ZGlvRGV2aWNlQXZhaWxhYmxlKCk7XG5cdFx0XHRjb25zdCB3aWxsV2ViY2FtQmVQcmVzZW50ID0gdGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuaXNNeUNhbWVyYUFjdGl2ZSgpICYmIHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmlzTXlWaWRlb0FjdGl2ZSgpO1xuXHRcdFx0Y29uc3QgaGFzQXVkaW8gPSB3aWxsV2ViY2FtQmVQcmVzZW50ID8gZmFsc2UgOiBoYXNBdWRpb0RldmljZXNBdmFpbGFibGUgJiYgdGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuaXNNeUF1ZGlvQWN0aXZlKCk7XG5cblx0XHRcdGNvbnN0IHByb3BlcnRpZXM6IFB1Ymxpc2hlclByb3BlcnRpZXMgPSB7XG5cdFx0XHRcdHZpZGVvU291cmNlOiBTY3JlZW5UeXBlLlNDUkVFTixcblx0XHRcdFx0YXVkaW9Tb3VyY2U6IGhhc0F1ZGlvRGV2aWNlc0F2YWlsYWJsZSA/IHRoaXMuZGV2aWNlU2VydmljZS5nZXRNaWNyb3Bob25lU2VsZWN0ZWQoKS5kZXZpY2UgOiBmYWxzZSxcblx0XHRcdFx0cHVibGlzaFZpZGVvOiB0cnVlLFxuXHRcdFx0XHRwdWJsaXNoQXVkaW86IGhhc0F1ZGlvLFxuXHRcdFx0XHRtaXJyb3I6IGZhbHNlXG5cdFx0XHR9O1xuXHRcdFx0Y29uc3Qgc2NyZWVuUHVibGlzaGVyID0gYXdhaXQgdGhpcy5pbml0UHVibGlzaGVyKHVuZGVmaW5lZCwgcHJvcGVydGllcyk7XG5cblx0XHRcdHNjcmVlblB1Ymxpc2hlci5vbmNlKCdhY2Nlc3NBbGxvd2VkJywgYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnQgZmlyZWQgd2hlbiBuYXRpdmUgc3RvcCBidXR0b24gaXMgY2xpY2tlZFxuXHRcdFx0XHRzY3JlZW5QdWJsaXNoZXIuc3RyZWFtXG5cdFx0XHRcdFx0LmdldE1lZGlhU3RyZWFtKClcblx0XHRcdFx0XHQuZ2V0VmlkZW9UcmFja3MoKVswXVxuXHRcdFx0XHRcdC5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMubG9nLmQoJ0NsaWNrZWQgbmF0aXZlIHN0b3AgYnV0dG9uLiBTdG9wcGluZyBzY3JlZW4gc2hhcmluZycpO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy50b2dnbGVTY3JlZW5zaGFyZSgpO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vIEVuYWJsaW5nIHNjcmVlblNoYXJlXG5cdFx0XHRcdHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmFjdGl2ZU15U2NyZWVuU2hhcmUoc2NyZWVuUHVibGlzaGVyKTtcblxuXHRcdFx0XHRpZiAoIXRoaXMuaXNTY3JlZW5TZXNzaW9uQ29ubmVjdGVkKCkpIHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmNvbm5lY3RTZXNzaW9uKHRoaXMuZ2V0U2NyZWVuU2Vzc2lvbigpLCB0aGlzLmdldFNjcmVlblRva2VuKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGF3YWl0IHRoaXMucHVibGlzaCh0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRNeVNjcmVlblB1Ymxpc2hlcigpKTtcblx0XHRcdFx0aWYgKCF0aGlzLnBhcnRpY2lwYW50U2VydmljZS5pc015VmlkZW9BY3RpdmUoKSkge1xuXHRcdFx0XHRcdC8vIERpc2FibGluZyB3ZWJjYW1cblx0XHRcdFx0XHR0aGlzLnBhcnRpY2lwYW50U2VydmljZS5kaXNhYmxlV2ViY2FtU3RyZWFtKCk7XG5cdFx0XHRcdFx0dGhpcy51bnB1Ymxpc2godGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlDYW1lcmFQdWJsaXNoZXIoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRzY3JlZW5QdWJsaXNoZXIub25jZSgnYWNjZXNzRGVuaWVkJywgKGVycm9yOiBhbnkpID0+IHtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBJIG9ubHkgaGF2ZSBteSBzY3JlZW5zaGFyZSBhY3RpdmUgYW5kIEkgaGF2ZSBubyBjYW1lcmEgb3IgaXQgaXMgbXV0ZWRcblx0XHRcdGNvbnN0IGhhc0F1ZGlvID0gdGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuaGFzU2NyZWVuQXVkaW9BY3RpdmUoKTtcblxuXHRcdFx0Ly8gRW5hYmxlIHdlYmNhbVxuXHRcdFx0aWYgKCF0aGlzLmlzV2ViY2FtU2Vzc2lvbkNvbm5lY3RlZCgpKSB7XG5cdFx0XHRcdGF3YWl0IHRoaXMuY29ubmVjdFNlc3Npb24odGhpcy5nZXRXZWJjYW1TZXNzaW9uKCksIHRoaXMuZ2V0V2ViY2FtVG9rZW4oKSk7XG5cdFx0XHR9XG5cdFx0XHRhd2FpdCB0aGlzLnB1Ymxpc2godGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlDYW1lcmFQdWJsaXNoZXIoKSk7XG5cdFx0XHR0aGlzLnB1Ymxpc2hBdWRpb0F1eCh0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRNeUNhbWVyYVB1Ymxpc2hlcigpLCBoYXNBdWRpbyk7XG5cdFx0XHR0aGlzLnBhcnRpY2lwYW50U2VydmljZS5lbmFibGVXZWJjYW1TdHJlYW0oKTtcblxuXHRcdFx0Ly8gRGlzYWJsaW5nIHNjcmVlbnNoYXJlXG5cdFx0XHR0aGlzLnBhcnRpY2lwYW50U2VydmljZS5kaXNhYmxlU2NyZWVuU3RyZWFtKCk7XG5cdFx0XHR0aGlzLnVucHVibGlzaCh0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRNeVNjcmVlblB1Ymxpc2hlcigpKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRwcml2YXRlIHB1Ymxpc2hBdWRpb0F1eChwdWJsaXNoZXI6IFB1Ymxpc2hlciwgdmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcblx0XHRpZiAoISFwdWJsaXNoZXIpIHtcblx0XHRcdHB1Ymxpc2hlci5wdWJsaXNoQXVkaW8odmFsdWUpO1xuXHRcdFx0dGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UudXBkYXRlTG9jYWxQYXJ0aWNpcGFudCgpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHNlbmRTaWduYWwodHlwZTogU2lnbmFsLCBjb25uZWN0aW9ucz86IENvbm5lY3Rpb25bXSwgZGF0YT86IGFueSk6IHZvaWQge1xuXHRcdGNvbnN0IHNpZ25hbE9wdGlvbnM6IFNpZ25hbE9wdGlvbnMgPSB7XG5cdFx0XHRkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKSxcblx0XHRcdHR5cGUsXG5cdFx0XHR0bzogY29ubmVjdGlvbnMgJiYgY29ubmVjdGlvbnMubGVuZ3RoID4gMCA/IGNvbm5lY3Rpb25zIDogdW5kZWZpbmVkXG5cdFx0fTtcblx0XHR0aGlzLndlYmNhbVNlc3Npb24uc2lnbmFsKHNpZ25hbE9wdGlvbnMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0YXN5bmMgcmVwbGFjZVRyYWNrKHZpZGVvVHlwZTogVmlkZW9UeXBlLCBwcm9wczogUHVibGlzaGVyUHJvcGVydGllcykge1xuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLmxvZy5kKGBSZXBsYWNpbmcgJHt2aWRlb1R5cGV9IHRyYWNrYCwgcHJvcHMpO1xuXG5cdFx0XHRpZiAodmlkZW9UeXBlID09PSBWaWRlb1R5cGUuQ0FNRVJBKSB7XG5cdFx0XHRcdGxldCBtZWRpYVN0cmVhbTogTWVkaWFTdHJlYW07XG5cdFx0XHRcdGNvbnN0IGlzUmVwbGFjaW5nQXVkaW8gPSAhIXByb3BzLmF1ZGlvU291cmNlO1xuXHRcdFx0XHRjb25zdCBpc1JlcGxhY2luZ1ZpZGVvID0gISFwcm9wcy52aWRlb1NvdXJjZTtcblxuXHRcdFx0XHRpZiAoaXNSZXBsYWNpbmdWaWRlbykge1xuXHRcdFx0XHRcdG1lZGlhU3RyZWFtID0gYXdhaXQgdGhpcy5jcmVhdGVNZWRpYVN0cmVhbShwcm9wcyk7XG5cdFx0XHRcdFx0Ly8gUmVwbGFjZSB2aWRlbyB0cmFja1xuXHRcdFx0XHRcdGNvbnN0IHZpZGVvVHJhY2s6IE1lZGlhU3RyZWFtVHJhY2sgPSBtZWRpYVN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmdldE15Q2FtZXJhUHVibGlzaGVyKCkucmVwbGFjZVRyYWNrKHZpZGVvVHJhY2spO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGlzUmVwbGFjaW5nQXVkaW8pIHtcblx0XHRcdFx0XHRtZWRpYVN0cmVhbSA9IGF3YWl0IHRoaXMuY3JlYXRlTWVkaWFTdHJlYW0ocHJvcHMpO1xuXHRcdFx0XHRcdC8vIFJlcGxhY2UgYXVkaW8gdHJhY2tcblx0XHRcdFx0XHRjb25zdCBhdWRpb1RyYWNrOiBNZWRpYVN0cmVhbVRyYWNrID0gbWVkaWFTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRNeUNhbWVyYVB1Ymxpc2hlcigpLnJlcGxhY2VUcmFjayhhdWRpb1RyYWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh2aWRlb1R5cGUgPT09IFZpZGVvVHlwZS5TQ1JFRU4pIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRsZXQgbmV3U2NyZWVuTWVkaWFTdHJlYW0gPSBhd2FpdCB0aGlzLk9WU2NyZWVuLmdldFVzZXJNZWRpYShwcm9wcyk7XG5cdFx0XHRcdFx0dGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlTY3JlZW5QdWJsaXNoZXIoKS5zdHJlYW0uZ2V0TWVkaWFTdHJlYW0oKS5nZXRWaWRlb1RyYWNrcygpWzBdLnN0b3AoKTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBhcnRpY2lwYW50U2VydmljZS5nZXRNeVNjcmVlblB1Ymxpc2hlcigpLnJlcGxhY2VUcmFjayhuZXdTY3JlZW5NZWRpYVN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHR0aGlzLmxvZy53KCdDYW5ub3QgY3JlYXRlIHRoZSBuZXcgTWVkaWFTdHJlYW0nLCBlcnJvcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhpcy5sb2cuZSgnRXJyb3IgcmVwbGFjaW5nIHRyYWNrICcsIGVycm9yKTtcblx0XHR9XG5cdH1cblxuXHQvLyBwcml2YXRlIGRlc3Ryb3lQdWJsaXNoZXIocHVibGlzaGVyOiBQdWJsaXNoZXIpOiB2b2lkIHtcblx0Ly8gXHRpZiAoISFwdWJsaXNoZXIpIHtcblx0Ly8gXHRcdGlmIChwdWJsaXNoZXIuc3RyZWFtLmdldFdlYlJ0Y1BlZXIoKSkge1xuXHQvLyBcdFx0XHRwdWJsaXNoZXIuc3RyZWFtLmRpc3Bvc2VXZWJSdGNQZWVyKCk7XG5cdC8vIFx0XHR9XG5cdC8vIFx0XHRwdWJsaXNoZXIuc3RyZWFtLmRpc3Bvc2VNZWRpYVN0cmVhbSgpO1xuXHQvLyBcdFx0aWYgKHB1Ymxpc2hlci5pZCA9PT0gdGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlDYW1lcmFQdWJsaXNoZXIoKS5pZCkge1xuXHQvLyBcdFx0XHR0aGlzLnBhcnRpY2lwYW50U2VydmljZS5zZXRNeUNhbWVyYVB1Ymxpc2hlcihwdWJsaXNoZXIpO1xuXHQvLyBcdFx0fSBlbHNlIGlmIChwdWJsaXNoZXIuaWQgPT09IHRoaXMucGFydGljaXBhbnRTZXJ2aWNlLmdldE15U2NyZWVuUHVibGlzaGVyKCkuaWQpIHtcblx0Ly8gXHRcdFx0dGhpcy5wYXJ0aWNpcGFudFNlcnZpY2Uuc2V0TXlTY3JlZW5QdWJsaXNoZXIocHVibGlzaGVyKTtcblx0Ly8gXHRcdH1cblx0Ly8gXHR9XG5cdC8vIH1cblxuXHRwcml2YXRlIGFzeW5jIGNyZWF0ZU1lZGlhU3RyZWFtKHBwOiBQdWJsaXNoZXJQcm9wZXJ0aWVzKTogUHJvbWlzZTxNZWRpYVN0cmVhbT4ge1xuXHRcdGxldCBtZWRpYVN0cmVhbTogTWVkaWFTdHJlYW07XG5cdFx0Y29uc3QgaXNGaXJlZm94UGxhdGZvcm0gPSB0aGlzLnBsYXRmb3JtU2VydmljZS5pc0ZpcmVmb3goKTtcblx0XHRjb25zdCBpc1JlcGxhY2luZ0F1ZGlvID0gISFwcC5hdWRpb1NvdXJjZTtcblx0XHRjb25zdCBpc1JlcGxhY2luZ1ZpZGVvID0gISFwcC52aWRlb1NvdXJjZTtcblxuXHRcdHRyeSB7XG5cdFx0XHRtZWRpYVN0cmVhbSA9IGF3YWl0IHRoaXMuT1YuZ2V0VXNlck1lZGlhKHBwKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0aWYgKCg8T3BlblZpZHVFcnJvcj5lcnJvcikubmFtZSA9PT0gT3BlblZpZHVFcnJvck5hbWUuREVWSUNFX0FDQ0VTU19ERU5JRUQpIHtcblx0XHRcdFx0aWYgKGlzRmlyZWZveFBsYXRmb3JtKSB7XG5cdFx0XHRcdFx0dGhpcy5sb2cudygnVGhlIGRldmljZSByZXF1ZXN0ZWQgaXMgbm90IGF2YWlsYWJsZS4gUmVzdG9yaW5nIHRoZSBvbGRlciBvbmUnKTtcblx0XHRcdFx0XHQvLyBUaGUgdHJhY2sgcmVxdWVzdGVkIGlzIG5vdCBhdmFpbGFibGUgc28gd2UgYXJlIGdldHRpbmcgdGhlIG9sZCB0cmFja3MgaWRzIGZvciByZWNvdmVyaW5nIHRoZSB0cmFja1xuXHRcdFx0XHRcdGlmIChpc1JlcGxhY2luZ1ZpZGVvKSB7XG5cdFx0XHRcdFx0XHRwcC52aWRlb1NvdXJjZSA9IHRoaXMuZGV2aWNlU2VydmljZS5nZXRDYW1lcmFTZWxlY3RlZCgpLmRldmljZTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGlzUmVwbGFjaW5nQXVkaW8pIHtcblx0XHRcdFx0XHRcdHBwLmF1ZGlvU291cmNlID0gdGhpcy5kZXZpY2VTZXJ2aWNlLmdldE1pY3JvcGhvbmVTZWxlY3RlZCgpLmRldmljZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bWVkaWFTdHJlYW0gPSBhd2FpdCB0aGlzLk9WLmdldFVzZXJNZWRpYShwcCk7XG5cdFx0XHRcdFx0Ly8gVE9ETyBzaG93IGVycm9yIGFsZXJ0IGluZm9ybWluZyB0aGF0IHRoZSBuZXcgZGV2aWNlIGlzIG5vdCBhdmFpbGFibGVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRyZXR1cm4gbWVkaWFTdHJlYW07XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0bmVlZFNlbmROaWNrbmFtZVNpZ25hbCgpOiBib29sZWFuIHtcblx0XHRsZXQgb2xkTmlja25hbWU6IHN0cmluZztcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgY29ubkRhdGEgPSBKU09OLnBhcnNlKHRoaXMud2ViY2FtU2Vzc2lvbi5jb25uZWN0aW9uLmRhdGEuc3BsaXQoJyUvJScpWzBdKTtcblx0XHRcdG9sZE5pY2tuYW1lID0gY29ubkRhdGEuY2xpZW50RGF0YTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhpcy5sb2cuZShlcnJvcik7XG5cdFx0fVxuXHRcdHJldHVybiBvbGROaWNrbmFtZSAhPT0gdGhpcy5wYXJ0aWNpcGFudFNlcnZpY2UuZ2V0TXlOaWNrbmFtZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0aXNNeU93bkNvbm5lY3Rpb24oY29ubmVjdGlvbklkOiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0dGhpcy53ZWJjYW1TZXNzaW9uPy5jb25uZWN0aW9uPy5jb25uZWN0aW9uSWQgPT09IGNvbm5lY3Rpb25JZCB8fCB0aGlzLnNjcmVlblNlc3Npb24/LmNvbm5lY3Rpb24/LmNvbm5lY3Rpb25JZCA9PT0gY29ubmVjdGlvbklkXG5cdFx0KTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBSZXR1cm5zIHRoZSByZW1vdGUgY29ubmVjdGlvbnMgb2YgdGhlIFNlc3Npb24uXG5cdCAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLm9wZW52aWR1LmlvL2VuL3N0YWJsZS9hcGkvb3BlbnZpZHUtYnJvd3Nlci9jbGFzc2VzL0Nvbm5lY3Rpb24uaHRtbCAgQ29ubmVjdGlvbn0gb2JqZWN0LlxuXHQgKi9cblx0Z2V0UmVtb3RlQ29ubmVjdGlvbnMoKTogQ29ubmVjdGlvbltdIHtcblx0XHQvLyBBdm9pZCBzY3JlZW4gY29ubmVjdGlvbnNcblx0XHRjb25zdCByZW1vdGVDYW1lcmFDb25uZWN0aW9uczogQ29ubmVjdGlvbltdID0gQXJyYXkuZnJvbSh0aGlzLndlYmNhbVNlc3Npb24ucmVtb3RlQ29ubmVjdGlvbnMudmFsdWVzKCkpLmZpbHRlcigoY29ubikgPT4ge1xuXHRcdFx0bGV0IHR5cGU6IFZpZGVvVHlwZTtcblx0XHRcdHR5cGUgPSBKU09OLnBhcnNlKGNvbm4uZGF0YSkudHlwZTtcblx0XHRcdHJldHVybiB0eXBlICE9PSBWaWRlb1R5cGUuU0NSRUVOO1xuXHRcdH0pO1xuXHRcdHJldHVybiByZW1vdGVDYW1lcmFDb25uZWN0aW9ucztcblx0fVxuXG5cdHByaXZhdGUgZGlzY29ubmVjdFNlc3Npb24oc2Vzc2lvbjogU2Vzc2lvbikge1xuXHRcdGlmIChzZXNzaW9uKSB7XG5cdFx0XHRpZiAoc2Vzc2lvbi5zZXNzaW9uSWQgPT09IHRoaXMud2ViY2FtU2Vzc2lvbj8uc2Vzc2lvbklkKSB7XG5cdFx0XHRcdHRoaXMubG9nLmQoJ0Rpc2Nvbm5lY3Rpbmcgd2ViY2FtIHNlc3Npb24nKTtcblx0XHRcdFx0dGhpcy53ZWJjYW1TZXNzaW9uPy5kaXNjb25uZWN0KCk7XG5cdFx0XHRcdHRoaXMud2ViY2FtU2Vzc2lvbiA9IG51bGw7XG5cdFx0XHR9IGVsc2UgaWYgKHNlc3Npb24uc2Vzc2lvbklkID09PSB0aGlzLnNjcmVlblNlc3Npb24/LnNlc3Npb25JZCkge1xuXHRcdFx0XHR0aGlzLmxvZy5kKCdEaXNjb25uZWN0aW5nIHNjcmVlbiBzZXNzaW9uJyk7XG5cdFx0XHRcdHRoaXMuc2NyZWVuU2Vzc2lvbj8uZGlzY29ubmVjdCgpO1xuXHRcdFx0XHR0aGlzLnNjcmVlblNlc3Npb24gPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIl19