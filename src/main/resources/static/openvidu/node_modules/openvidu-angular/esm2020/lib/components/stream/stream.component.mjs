import { animate, style, transition, trigger } from '@angular/animations';
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { MatMenuTrigger } from '@angular/material/menu';
import { VideoSizeIcon } from '../../models/icon.model';
import { Signal } from '../../models/signal.model';
import { ScreenType, VideoType } from '../../models/video-type.model';
import * as i0 from "@angular/core";
import * as i1 from "../../services/openvidu/openvidu.service";
import * as i2 from "../../services/layout/layout.service";
import * as i3 from "../../services/participant/participant.service";
import * as i4 from "../../services/storage/storage.service";
import * as i5 from "../../services/cdk-overlay/cdk-overlay.service";
import * as i6 from "../../services/config/openvidu-angular.config.service";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
import * as i9 from "@angular/material/button";
import * as i10 from "@angular/material/icon";
import * as i11 from "@angular/material/input";
import * as i12 from "@angular/material/tooltip";
import * as i13 from "@angular/flex-layout/extended";
import * as i14 from "@angular/material/menu";
import * as i15 from "../audio-wave/audio-wave.component";
import * as i16 from "../avatar-profile/avatar-profile.component";
import * as i17 from "../video/video.component";
import * as i18 from "../../pipes/translate.pipe";
/**
 * The **StreamComponent** is hosted inside of the {@link LayoutComponent}.
 * It is in charge of displaying the participant video stream in the videoconference layout.
 *
 * <div class="custom-table-container">
 * <div>
 *  <h3>API Directives</h3>
 *
 * This component allows us to show or hide certain HTML elements with the following {@link https://angular.io/guide/attribute-directives Angular attribute directives}
 * with the aim of fully customizing the StreamComponent.
 *
 * | **Parameter**                  | **Type**  | **Reference**                                   |
 * | :----------------------------: | :-------: | :---------------------------------------------: |
 * | **displayParticipantName**   | `boolean` | {@link StreamDisplayParticipantNameDirective}   |
 * | **displayAudioDetection**    | `boolean` | {@link StreamDisplayAudioDetectionDirective}    |
 * | **settingsButton**          | `boolean` | {@link StreamSettingsButtonDirective}           |
 *
 * <p class="component-link-text">
 * <span class="italic">See all {@link ApiDirectiveModule API Directives}</span>
 * </p>
 * </div>
 *
 * <div>
 * <h3>OpenVidu Angular Directives</h3>
 *
 * The StreamComponent can be replaced with a custom component. It provides us the following {@link https://angular.io/guide/structural-directives Angular structural directives}
 * for doing this.
 *
 * |            **Directive**           |                 **Reference**                 |
 * |:----------------------------------:|:---------------------------------------------:|
 * |           ***ovStream**           |            {@link StreamDirective}           |
 *
 * <p class="component-link-text">
 * 	<span class="italic">See all {@link OpenViduAngularDirectiveModule OpenVidu Angular Directives}</span>
 * </p>
 * </div>
 *
 * </div>
 */
export class StreamComponent {
    /**
     * @ignore
     */
    constructor(openviduService, layoutService, participantService, storageService, cdkSrv, libService) {
        this.openviduService = openviduService;
        this.layoutService = layoutService;
        this.participantService = participantService;
        this.storageService = storageService;
        this.cdkSrv = cdkSrv;
        this.libService = libService;
        /**
         * @ignore
         */
        this.videoSizeIconEnum = VideoSizeIcon;
        /**
         * @ignore
         */
        this.videoTypeEnum = VideoType;
        /**
         * @ignore
         */
        this.videoSizeIcon = VideoSizeIcon.BIG;
        /**
         * @ignore
         */
        this.isMinimal = false;
        /**
         * @ignore
         */
        this.showNickname = true;
        /**
         * @ignore
         */
        this.showAudioDetection = true;
        /**
         * @ignore
         */
        this.showSettingsButton = true;
    }
    /**
     * @ignore
     */
    set streamContainer(streamContainer) {
        setTimeout(() => {
            if (streamContainer) {
                this._streamContainer = streamContainer;
                // This is a workaround for fixing a layout bug which provide a bad UX with each new elements created.
                setTimeout(() => {
                    this.showVideo = true;
                }, 100);
            }
        }, 0);
    }
    set stream(stream) {
        this._stream = stream;
        this.checkVideoEnlarged();
        if (this._stream.participant) {
            this.nickname = this._stream.participant.nickname;
        }
    }
    /**
     * @ignore
     */
    set nicknameInputElement(element) {
        setTimeout(() => {
            element?.nativeElement.focus();
        });
    }
    ngOnInit() {
        this.subscribeToStreamDirectives();
    }
    ngOnDestroy() {
        this.cdkSrv.setSelector('body');
        if (this.settingsButtonSub)
            this.settingsButtonSub.unsubscribe();
        if (this.displayAudioDetectionSub)
            this.displayAudioDetectionSub.unsubscribe();
        if (this.displayParticipantNameSub)
            this.displayParticipantNameSub.unsubscribe();
        if (this.minimalSub)
            this.minimalSub.unsubscribe();
    }
    /**
     * @ignore
     */
    toggleVideoEnlarged() {
        if (!!this._stream.streamManager?.stream?.connection?.connectionId) {
            if (this.openviduService.isMyOwnConnection(this._stream.streamManager?.stream?.connection?.connectionId)) {
                this.participantService.toggleMyVideoEnlarged(this._stream.streamManager?.stream?.connection?.connectionId);
            }
            else {
                this.participantService.toggleRemoteVideoEnlarged(this._stream.streamManager?.stream?.connection?.connectionId);
            }
        }
        this.layoutService.update();
    }
    /**
     * @ignore
     */
    toggleVideoMenu(event) {
        if (this.menuTrigger.menuOpen) {
            this.menuTrigger.closeMenu();
            return;
        }
        this.cdkSrv.setSelector('#container-' + this._stream.streamManager?.stream?.streamId);
        this.menuTrigger.openMenu();
    }
    /**
     * @ignore
     */
    toggleMuteForcibly() {
        this.participantService.setRemoteMutedForcibly(this._stream.participant.id, !this._stream.participant.isMutedForcibly);
    }
    /**
     * @ignore
     */
    toggleNicknameForm() {
        if (this._stream?.participant?.local) {
            this.toggleNickname = !this.toggleNickname;
        }
    }
    /**
     * @ignore
     */
    updateNickname(event) {
        if (event?.keyCode === 13 || event?.type === 'focusout') {
            if (!!this.nickname) {
                this.participantService.setMyNickname(this.nickname);
                this.storageService.setNickname(this.nickname);
                this.openviduService.sendSignal(Signal.NICKNAME_CHANGED, undefined, { clientData: this.nickname });
            }
            this.toggleNicknameForm();
        }
    }
    /**
     * @ignore
     */
    async replaceScreenTrack() {
        const properties = {
            videoSource: ScreenType.SCREEN,
            publishVideo: true,
            publishAudio: !this.participantService.isMyCameraActive(),
            mirror: false
        };
        await this.openviduService.replaceTrack(VideoType.SCREEN, properties);
    }
    checkVideoEnlarged() {
        this.videoSizeIcon = this._stream.videoEnlarged ? VideoSizeIcon.NORMAL : VideoSizeIcon.BIG;
    }
    subscribeToStreamDirectives() {
        this.minimalSub = this.libService.minimalObs.subscribe((value) => {
            this.isMinimal = value;
        });
        this.displayParticipantNameSub = this.libService.displayParticipantNameObs.subscribe((value) => {
            this.showNickname = value;
            // this.cd.markForCheck();
        });
        this.displayAudioDetectionSub = this.libService.displayAudioDetectionObs.subscribe((value) => {
            this.showAudioDetection = value;
            // this.cd.markForCheck();
        });
        this.settingsButtonSub = this.libService.streamSettingsButtonObs.subscribe((value) => {
            this.showSettingsButton = value;
            // this.cd.markForCheck();
        });
    }
}
StreamComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StreamComponent, deps: [{ token: i1.OpenViduService }, { token: i2.LayoutService }, { token: i3.ParticipantService }, { token: i4.StorageService }, { token: i5.CdkOverlayService }, { token: i6.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Component });
StreamComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: StreamComponent, selector: "ov-stream", inputs: { stream: "stream" }, viewQueries: [{ propertyName: "menuTrigger", first: true, predicate: MatMenuTrigger, descendants: true }, { propertyName: "menu", first: true, predicate: ["menu"], descendants: true }, { propertyName: "streamContainer", first: true, predicate: ["streamContainer"], descendants: true, read: ElementRef }, { propertyName: "nicknameInputElement", first: true, predicate: ["nicknameInput"], descendants: true }], ngImport: i0, template: "<div\n\t*ngIf=\"this._stream\"\n\tclass=\"OV_stream\"\n\t[ngClass]=\"{'no-size': !showVideo}\"\n\t[id]=\"'container-' + this._stream.streamManager?.stream?.streamId\"\n\t#streamContainer\n>\n\t<div *ngIf=\"!isMinimal && showNickname\" id=\"nickname-container\" class=\"nickname\" [class.fullscreen]=\"isFullscreen\">\n\t\t<div (click)=\"toggleNicknameForm()\" class=\"nicknameContainer\" selected *ngIf=\"!toggleNickname\">\n\t\t\t<span id=\"nickname\" *ngIf=\"this._stream.type === 'CAMERA'\">{{ this._stream.participant.nickname }}</span>\n\t\t\t<span id=\"nickname\" *ngIf=\"this._stream.type === 'SCREEN'\">{{ this._stream.participant.nickname }}_SCREEN</span>\n\t\t</div>\n\t\t<div *ngIf=\"toggleNickname && !this._stream.streamManager?.remote\" [class.fullscreen]=\"isFullscreen\" id=\"nickname-input-container\">\n\t\t\t<input\n\t\t\t\tmatInput\n\t\t\t\t#nicknameInput\n\t\t\t\tautocomplete=\"off\"\n\t\t\t\tmaxlength=\"20\"\n\t\t\t\t[(ngModel)]=\"this.nickname\"\n\t\t\t\t(keypress)=\"updateNickname($event)\"\n\t\t\t\t(focusout)=\"updateNickname($event)\"\n\t\t\t/>\n\t\t</div>\n\t</div>\n\n\t<div\n\t\t*ngIf=\"!isMinimal && showAudioDetection && _stream.type === 'CAMERA' && _stream.streamManager?.stream?.audioActive\"\n\t\tid=\"audio-wave-container\"\n\t>\n\t\t<ov-audio-wave [streamManager]=\"_stream.streamManager\"></ov-audio-wave>\n\t</div>\n\n\t<ov-avatar-profile\n\t\t@posterAnimation\n\t\t*ngIf=\"!_stream.streamManager?.stream?.videoActive && _stream.type === 'CAMERA'\"\n\t\t[name]=\"_stream.participant.nickname\"\n\t\t[color]=\"_stream.participant.colorProfile\"\n\t></ov-avatar-profile>\n\n\t<ov-video\n\t\t(dblclick)=\"toggleVideoEnlarged()\"\n\t\t[streamManager]=\"_stream.streamManager\"\n\t\t[mutedSound]=\"_stream?.participant?.isMutedForcibly\"\n\t></ov-video>\n\n\t<div class=\"status-icons\">\n\t\t<button mat-icon-button id=\"statusMic\" *ngIf=\"!this._stream.streamManager?.stream?.audioActive\" disabled>\n\t\t\t<mat-icon>mic_off</mat-icon>\n\t\t</button>\n\t</div>\n\n\t<div *ngIf=\"!isMinimal && showSettingsButton\" id=\"settings-container\" class=\"videoButtons\">\n\t\t<button mat-icon-button (click)=\"toggleVideoMenu($event)\" matTooltip=\"{{ 'STREAM.SETTINGS' | translate }}\" matTooltipPosition=\"above\" aria-label=\"Video settings menu\">\n\t\t\t<mat-icon>more_vert</mat-icon>\n\t\t</button>\n\t\t<span [matMenuTriggerFor]=\"menu\"></span>\n\t\t<mat-menu #menu=\"matMenu\" yPosition=\"above\" xPosition=\"before\">\n\t\t\t<button mat-menu-item id=\"videoZoomButton\" (click)=\"toggleVideoEnlarged()\">\n\t\t\t\t<mat-icon>{{ this.videoSizeIcon }}</mat-icon>\n\t\t\t\t<span *ngIf=\"videoSizeIcon === videoSizeIconEnum.NORMAL\">{{ 'STREAM.ZOOM_OUT' | translate }}</span>\n\t\t\t\t<span *ngIf=\"videoSizeIcon === videoSizeIconEnum.BIG\">{{ 'STREAM.ZOOM_IN' | translate }}</span>\n\t\t\t</button>\n\t\t\t<button mat-menu-item id=\"volumeButton\" *ngIf=\"!this._stream.local\" (click)=\"toggleMuteForcibly()\">\n\t\t\t\t<mat-icon *ngIf=\"!_stream.participant.isMutedForcibly\">volume_up</mat-icon>\n\t\t\t\t<span *ngIf=\"!_stream.participant.isMutedForcibly\">{{ 'STREAM.MUTE_SOUND' | translate }}</span>\n\n\t\t\t\t<mat-icon *ngIf=\"_stream.participant.isMutedForcibly\">volume_off</mat-icon>\n\t\t\t\t<span *ngIf=\"_stream.participant.isMutedForcibly\">{{ 'STREAM.UNMUTE_SOUND' | translate }}</span>\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tmat-menu-item\n\t\t\t\t(click)=\"replaceScreenTrack()\"\n\t\t\t\tid=\"changeScreenButton\"\n\t\t\t\t*ngIf=\"!this._stream.streamManager?.remote && this._stream.streamManager?.stream?.typeOfVideo === videoTypeEnum.SCREEN\"\n\t\t\t>\n\t\t\t\t<mat-icon>picture_in_picture</mat-icon>\n\t\t\t\t<span>{{ 'STREAM.REPLACE_SCREEN' | translate }}</span>\n\t\t\t</button>\n\t\t</mat-menu>\n\t</div>\n</div>\n", styles: [".no-size{height:0px!important;width:0px!important}.nickname{padding:0;position:absolute;z-index:999;border-radius:var(--ov-video-radius);color:var(--ov-text-color);font-family:Roboto,RobotoDraft,Helvetica,Arial,sans-serif}.nicknameContainer{background-color:var(--ov-secondary-color);padding:5px;color:var(--ov-text-color);font-weight:700;border-radius:var(--ov-video-radius)}#nickname-input-container{background-color:var(--ov-secondary-color);border-radius:var(--ov-video-radius)}#closeButton{position:absolute;top:-3px;right:0;z-index:999}#nicknameForm{padding:10px}#audio-wave-container{position:absolute;right:0;z-index:2;padding:5px}.fullscreen{top:40px}video{object-fit:cover;width:100%;height:100%;color:#fff;margin:0;padding:0;border:0;font-size:100%}.status-icons,#settings-container{position:absolute;bottom:0;z-index:10;text-align:center}.status-icons{left:0}.status-icons button,#settings-container button{color:var(--ov-text-color);width:26px;height:26px;margin:5px;border-radius:var(--ov-buttons-radius)}.status-icons button{background-color:var(--ov-warn-color)}.status-icons .mat-icon-button,#settings-container .mat-icon-button{line-height:0px}.status-icons mat-icon,#settings-container mat-icon{font-size:18px}#settings-container{right:0}#settings-container button{background-color:var(--ov-secondary-color)}.OV_stream{width:100%;height:100%;position:relative;overflow:hidden;background-color:transparent;border-radius:var(--ov-video-radius)}input{caret-color:#fff!important}\n"], dependencies: [{ kind: "directive", type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i8.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i8.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i9.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i10.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i11.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "directive", type: i12.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: i13.DefaultClassDirective, selector: "  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]", inputs: ["ngClass", "ngClass.xs", "ngClass.sm", "ngClass.md", "ngClass.lg", "ngClass.xl", "ngClass.lt-sm", "ngClass.lt-md", "ngClass.lt-lg", "ngClass.lt-xl", "ngClass.gt-xs", "ngClass.gt-sm", "ngClass.gt-md", "ngClass.gt-lg"] }, { kind: "component", type: i14.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "component", type: i14.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { kind: "directive", type: i14.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { kind: "component", type: i15.AudioWaveComponent, selector: "ov-audio-wave", inputs: ["streamManager"] }, { kind: "component", type: i16.AvatarProfileComponent, selector: "ov-avatar-profile", inputs: ["name", "color"] }, { kind: "component", type: i17.VideoComponent, selector: "ov-video", inputs: ["mutedSound", "streamManager"] }, { kind: "pipe", type: i18.TranslatePipe, name: "translate" }], animations: [
        trigger('posterAnimation', [
            transition(':enter', [style({ opacity: 0 }), animate('100ms', style({ opacity: 1 }))]),
            transition(':leave', [style({ opacity: 1 }), animate('200ms', style({ opacity: 0 }))]),
        ])
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StreamComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-stream', animations: [
                        trigger('posterAnimation', [
                            transition(':enter', [style({ opacity: 0 }), animate('100ms', style({ opacity: 1 }))]),
                            transition(':leave', [style({ opacity: 1 }), animate('200ms', style({ opacity: 0 }))]),
                        ])
                    ], template: "<div\n\t*ngIf=\"this._stream\"\n\tclass=\"OV_stream\"\n\t[ngClass]=\"{'no-size': !showVideo}\"\n\t[id]=\"'container-' + this._stream.streamManager?.stream?.streamId\"\n\t#streamContainer\n>\n\t<div *ngIf=\"!isMinimal && showNickname\" id=\"nickname-container\" class=\"nickname\" [class.fullscreen]=\"isFullscreen\">\n\t\t<div (click)=\"toggleNicknameForm()\" class=\"nicknameContainer\" selected *ngIf=\"!toggleNickname\">\n\t\t\t<span id=\"nickname\" *ngIf=\"this._stream.type === 'CAMERA'\">{{ this._stream.participant.nickname }}</span>\n\t\t\t<span id=\"nickname\" *ngIf=\"this._stream.type === 'SCREEN'\">{{ this._stream.participant.nickname }}_SCREEN</span>\n\t\t</div>\n\t\t<div *ngIf=\"toggleNickname && !this._stream.streamManager?.remote\" [class.fullscreen]=\"isFullscreen\" id=\"nickname-input-container\">\n\t\t\t<input\n\t\t\t\tmatInput\n\t\t\t\t#nicknameInput\n\t\t\t\tautocomplete=\"off\"\n\t\t\t\tmaxlength=\"20\"\n\t\t\t\t[(ngModel)]=\"this.nickname\"\n\t\t\t\t(keypress)=\"updateNickname($event)\"\n\t\t\t\t(focusout)=\"updateNickname($event)\"\n\t\t\t/>\n\t\t</div>\n\t</div>\n\n\t<div\n\t\t*ngIf=\"!isMinimal && showAudioDetection && _stream.type === 'CAMERA' && _stream.streamManager?.stream?.audioActive\"\n\t\tid=\"audio-wave-container\"\n\t>\n\t\t<ov-audio-wave [streamManager]=\"_stream.streamManager\"></ov-audio-wave>\n\t</div>\n\n\t<ov-avatar-profile\n\t\t@posterAnimation\n\t\t*ngIf=\"!_stream.streamManager?.stream?.videoActive && _stream.type === 'CAMERA'\"\n\t\t[name]=\"_stream.participant.nickname\"\n\t\t[color]=\"_stream.participant.colorProfile\"\n\t></ov-avatar-profile>\n\n\t<ov-video\n\t\t(dblclick)=\"toggleVideoEnlarged()\"\n\t\t[streamManager]=\"_stream.streamManager\"\n\t\t[mutedSound]=\"_stream?.participant?.isMutedForcibly\"\n\t></ov-video>\n\n\t<div class=\"status-icons\">\n\t\t<button mat-icon-button id=\"statusMic\" *ngIf=\"!this._stream.streamManager?.stream?.audioActive\" disabled>\n\t\t\t<mat-icon>mic_off</mat-icon>\n\t\t</button>\n\t</div>\n\n\t<div *ngIf=\"!isMinimal && showSettingsButton\" id=\"settings-container\" class=\"videoButtons\">\n\t\t<button mat-icon-button (click)=\"toggleVideoMenu($event)\" matTooltip=\"{{ 'STREAM.SETTINGS' | translate }}\" matTooltipPosition=\"above\" aria-label=\"Video settings menu\">\n\t\t\t<mat-icon>more_vert</mat-icon>\n\t\t</button>\n\t\t<span [matMenuTriggerFor]=\"menu\"></span>\n\t\t<mat-menu #menu=\"matMenu\" yPosition=\"above\" xPosition=\"before\">\n\t\t\t<button mat-menu-item id=\"videoZoomButton\" (click)=\"toggleVideoEnlarged()\">\n\t\t\t\t<mat-icon>{{ this.videoSizeIcon }}</mat-icon>\n\t\t\t\t<span *ngIf=\"videoSizeIcon === videoSizeIconEnum.NORMAL\">{{ 'STREAM.ZOOM_OUT' | translate }}</span>\n\t\t\t\t<span *ngIf=\"videoSizeIcon === videoSizeIconEnum.BIG\">{{ 'STREAM.ZOOM_IN' | translate }}</span>\n\t\t\t</button>\n\t\t\t<button mat-menu-item id=\"volumeButton\" *ngIf=\"!this._stream.local\" (click)=\"toggleMuteForcibly()\">\n\t\t\t\t<mat-icon *ngIf=\"!_stream.participant.isMutedForcibly\">volume_up</mat-icon>\n\t\t\t\t<span *ngIf=\"!_stream.participant.isMutedForcibly\">{{ 'STREAM.MUTE_SOUND' | translate }}</span>\n\n\t\t\t\t<mat-icon *ngIf=\"_stream.participant.isMutedForcibly\">volume_off</mat-icon>\n\t\t\t\t<span *ngIf=\"_stream.participant.isMutedForcibly\">{{ 'STREAM.UNMUTE_SOUND' | translate }}</span>\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tmat-menu-item\n\t\t\t\t(click)=\"replaceScreenTrack()\"\n\t\t\t\tid=\"changeScreenButton\"\n\t\t\t\t*ngIf=\"!this._stream.streamManager?.remote && this._stream.streamManager?.stream?.typeOfVideo === videoTypeEnum.SCREEN\"\n\t\t\t>\n\t\t\t\t<mat-icon>picture_in_picture</mat-icon>\n\t\t\t\t<span>{{ 'STREAM.REPLACE_SCREEN' | translate }}</span>\n\t\t\t</button>\n\t\t</mat-menu>\n\t</div>\n</div>\n", styles: [".no-size{height:0px!important;width:0px!important}.nickname{padding:0;position:absolute;z-index:999;border-radius:var(--ov-video-radius);color:var(--ov-text-color);font-family:Roboto,RobotoDraft,Helvetica,Arial,sans-serif}.nicknameContainer{background-color:var(--ov-secondary-color);padding:5px;color:var(--ov-text-color);font-weight:700;border-radius:var(--ov-video-radius)}#nickname-input-container{background-color:var(--ov-secondary-color);border-radius:var(--ov-video-radius)}#closeButton{position:absolute;top:-3px;right:0;z-index:999}#nicknameForm{padding:10px}#audio-wave-container{position:absolute;right:0;z-index:2;padding:5px}.fullscreen{top:40px}video{object-fit:cover;width:100%;height:100%;color:#fff;margin:0;padding:0;border:0;font-size:100%}.status-icons,#settings-container{position:absolute;bottom:0;z-index:10;text-align:center}.status-icons{left:0}.status-icons button,#settings-container button{color:var(--ov-text-color);width:26px;height:26px;margin:5px;border-radius:var(--ov-buttons-radius)}.status-icons button{background-color:var(--ov-warn-color)}.status-icons .mat-icon-button,#settings-container .mat-icon-button{line-height:0px}.status-icons mat-icon,#settings-container mat-icon{font-size:18px}#settings-container{right:0}#settings-container button{background-color:var(--ov-secondary-color)}.OV_stream{width:100%;height:100%;position:relative;overflow:hidden;background-color:transparent;border-radius:var(--ov-video-radius)}input{caret-color:#fff!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.OpenViduService }, { type: i2.LayoutService }, { type: i3.ParticipantService }, { type: i4.StorageService }, { type: i5.CdkOverlayService }, { type: i6.OpenViduAngularConfigService }]; }, propDecorators: { menuTrigger: [{
                type: ViewChild,
                args: [MatMenuTrigger]
            }], menu: [{
                type: ViewChild,
                args: ['menu']
            }], streamContainer: [{
                type: ViewChild,
                args: ['streamContainer', { static: false, read: ElementRef }]
            }], stream: [{
                type: Input
            }], nicknameInputElement: [{
                type: ViewChild,
                args: ['nicknameInput']
            }] } });
//# sourceMappingURL=data:application/json;base64,