import { Component, EventEmitter, Output } from '@angular/core';
import { VideoType } from '../../../models/video-type.model';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/openvidu/openvidu.service";
import * as i2 from "../../../services/device/device.service";
import * as i3 from "../../../services/storage/storage.service";
import * as i4 from "../../../services/participant/participant.service";
import * as i5 from "@angular/common";
import * as i6 from "@angular/material/button";
import * as i7 from "@angular/material/icon";
import * as i8 from "@angular/material/form-field";
import * as i9 from "@angular/material/tooltip";
import * as i10 from "@angular/material/select";
import * as i11 from "@angular/material/core";
import * as i12 from "../../../pipes/translate.pipe";
/**
 * @internal
 */
export class AudioDevicesComponent {
    constructor(openviduService, deviceSrv, storageSrv, participantService) {
        this.openviduService = openviduService;
        this.deviceSrv = deviceSrv;
        this.storageSrv = storageSrv;
        this.participantService = participantService;
        this.onDeviceSelectorClicked = new EventEmitter();
        this.onAudioMutedClicked = new EventEmitter();
        this.microphones = [];
    }
    async ngOnInit() {
        this.subscribeToParticipantMediaProperties();
        if (this.openviduService.isSessionConnected()) {
            // Updating devices only with session connected
            await this.deviceSrv.refreshDevices();
        }
        this.hasAudioDevices = this.deviceSrv.hasAudioDeviceAvailable();
        if (this.hasAudioDevices) {
            this.microphones = this.deviceSrv.getMicrophones();
            this.microphoneSelected = this.deviceSrv.getMicrophoneSelected();
        }
        this.isAudioMuted = this.deviceSrv.isAudioMuted();
        if (this.openviduService.isSessionConnected()) {
            this.isAudioMuted = !this.participantService.isMyAudioActive();
        }
        else {
            this.isAudioMuted = this.deviceSrv.isAudioMuted();
        }
    }
    ngOnDestroy() {
        if (this.localParticipantSubscription)
            this.localParticipantSubscription.unsubscribe();
    }
    toggleMic() {
        const publish = this.isAudioMuted;
        this.openviduService.publishAudio(publish);
        this.onAudioMutedClicked.emit(publish);
    }
    async onMicrophoneSelected(event) {
        const audioSource = event?.value;
        if (this.deviceSrv.needUpdateAudioTrack(audioSource)) {
            const pp = { audioSource, videoSource: false };
            await this.openviduService.replaceTrack(VideoType.CAMERA, pp);
            this.deviceSrv.setMicSelected(audioSource);
            this.microphoneSelected = this.deviceSrv.getMicrophoneSelected();
        }
    }
    subscribeToParticipantMediaProperties() {
        this.localParticipantSubscription = this.participantService.localParticipantObs.subscribe((p) => {
            if (p) {
                this.isAudioMuted = !p.hasAudioActive();
                this.storageSrv.setAudioMuted(this.isAudioMuted);
            }
        });
    }
}
AudioDevicesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: AudioDevicesComponent, deps: [{ token: i1.OpenViduService }, { token: i2.DeviceService }, { token: i3.StorageService }, { token: i4.ParticipantService }], target: i0.ɵɵFactoryTarget.Component });
AudioDevicesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: AudioDevicesComponent, selector: "ov-audio-devices-select", outputs: { onDeviceSelectorClicked: "onDeviceSelectorClicked", onAudioMutedClicked: "onAudioMutedClicked" }, ngImport: i0, template: "<div class=\"device-container-element\">\n\t<button mat-icon-button id=\"microphone-button\" [disabled]=\"!hasAudioDevices\" [class.warn-btn]=\"isAudioMuted\" (click)=\"toggleMic()\">\n\t\t<mat-icon\n\t\t\t*ngIf=\"!isAudioMuted\"\n\t\t\t[matTooltipDisabled]=\"!hasAudioDevices\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.MUTE_AUDIO' | translate }}\"\n\t\t\tid=\"mic\"\n\t\t>\n\t\t\tmic\n\t\t</mat-icon>\n\t\t<mat-icon\n\t\t\t*ngIf=\"isAudioMuted\"\n\t\t\t[matTooltipDisabled]=\"!hasAudioDevices\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.UNMUTE_AUDIO' | translate }}\"\n\t\t\tid=\"mic_off\"\n\t\t>\n\t\t\tmic_off\n\t\t</mat-icon>\n\t</button>\n\t<mat-form-field>\n\t\t<mat-label *ngIf=\"hasAudioDevices\">{{ 'PREJOIN.AUDIO_DEVICE' | translate }}</mat-label>\n\t\t<mat-label *ngIf=\"!hasAudioDevices\">{{ 'PREJOIN.NO_AUDIO_DEVICE' | translate }}</mat-label>\n\t\t<mat-select\n\t\t\t[disabled]=\"isAudioMuted || !hasAudioDevices\"\n\t\t\t[value]=\"microphoneSelected?.device\"\n\t\t\t(click)=\"onDeviceSelectorClicked.emit()\"\n\t\t\t(selectionChange)=\"onMicrophoneSelected($event)\"\n\t\t>\n\t\t\t<mat-option *ngFor=\"let microphone of microphones\" [value]=\"microphone.device\">\n\t\t\t\t{{ microphone.label }}\n\t\t\t</mat-option>\n\t\t</mat-select>\n\t</mat-form-field>\n</div>\n", styles: [".device-container-element mat-form-field{width:100%;margin-top:10px;color:#000}.device-container-element button{margin:auto 10px auto auto}.device-container-element{display:flex}.warn-btn{color:var(--ov-text-color);background-color:var(--ov-warn-color)!important}\n"], dependencies: [{ kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i7.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i8.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i8.MatLabel, selector: "mat-label" }, { kind: "directive", type: i9.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "component", type: i10.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { kind: "component", type: i11.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "pipe", type: i12.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: AudioDevicesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-audio-devices-select', template: "<div class=\"device-container-element\">\n\t<button mat-icon-button id=\"microphone-button\" [disabled]=\"!hasAudioDevices\" [class.warn-btn]=\"isAudioMuted\" (click)=\"toggleMic()\">\n\t\t<mat-icon\n\t\t\t*ngIf=\"!isAudioMuted\"\n\t\t\t[matTooltipDisabled]=\"!hasAudioDevices\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.MUTE_AUDIO' | translate }}\"\n\t\t\tid=\"mic\"\n\t\t>\n\t\t\tmic\n\t\t</mat-icon>\n\t\t<mat-icon\n\t\t\t*ngIf=\"isAudioMuted\"\n\t\t\t[matTooltipDisabled]=\"!hasAudioDevices\"\n\t\t\tmatTooltip=\"{{ 'TOOLBAR.UNMUTE_AUDIO' | translate }}\"\n\t\t\tid=\"mic_off\"\n\t\t>\n\t\t\tmic_off\n\t\t</mat-icon>\n\t</button>\n\t<mat-form-field>\n\t\t<mat-label *ngIf=\"hasAudioDevices\">{{ 'PREJOIN.AUDIO_DEVICE' | translate }}</mat-label>\n\t\t<mat-label *ngIf=\"!hasAudioDevices\">{{ 'PREJOIN.NO_AUDIO_DEVICE' | translate }}</mat-label>\n\t\t<mat-select\n\t\t\t[disabled]=\"isAudioMuted || !hasAudioDevices\"\n\t\t\t[value]=\"microphoneSelected?.device\"\n\t\t\t(click)=\"onDeviceSelectorClicked.emit()\"\n\t\t\t(selectionChange)=\"onMicrophoneSelected($event)\"\n\t\t>\n\t\t\t<mat-option *ngFor=\"let microphone of microphones\" [value]=\"microphone.device\">\n\t\t\t\t{{ microphone.label }}\n\t\t\t</mat-option>\n\t\t</mat-select>\n\t</mat-form-field>\n</div>\n", styles: [".device-container-element mat-form-field{width:100%;margin-top:10px;color:#000}.device-container-element button{margin:auto 10px auto auto}.device-container-element{display:flex}.warn-btn{color:var(--ov-text-color);background-color:var(--ov-warn-color)!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.OpenViduService }, { type: i2.DeviceService }, { type: i3.StorageService }, { type: i4.ParticipantService }]; }, propDecorators: { onDeviceSelectorClicked: [{
                type: Output
            }], onAudioMutedClicked: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,