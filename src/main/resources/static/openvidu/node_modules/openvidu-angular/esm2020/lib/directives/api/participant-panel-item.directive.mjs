import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/config/openvidu-angular.config.service";
/**
 * The **muteButton** directive allows show/hide the muted button in participant panel item component.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `participantPanelItem` component:
 *
 * @example
 * <ov-videoconference [participantPanelItemMuteButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ParticipantPanelItemComponent}.
 * @example
 * <ov-participant-panel-item [muteButton]="false"></ov-participant-panel-item>
 */
export class ParticipantPanelItemMuteButtonDirective {
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.muteValue = true;
    }
    set participantPanelItemMuteButton(value) {
        this.muteValue = value;
        this.update(this.muteValue);
    }
    set muteButton(value) {
        this.muteValue = value;
        this.update(this.muteValue);
    }
    ngAfterViewInit() {
        this.update(this.muteValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.muteValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.participantItemMuteButton.getValue() !== value) {
            this.libService.participantItemMuteButton.next(value);
        }
    }
}
ParticipantPanelItemMuteButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantPanelItemMuteButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ParticipantPanelItemMuteButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ParticipantPanelItemMuteButtonDirective, selector: "ov-videoconference[participantPanelItemMuteButton], ov-participant-panel-item[muteButton]", inputs: { participantPanelItemMuteButton: "participantPanelItemMuteButton", muteButton: "muteButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ParticipantPanelItemMuteButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[participantPanelItemMuteButton], ov-participant-panel-item[muteButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { participantPanelItemMuteButton: [{
                type: Input
            }], muteButton: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljaXBhbnQtcGFuZWwtaXRlbS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9vcGVudmlkdS1hbmd1bGFyL3NyYy9saWIvZGlyZWN0aXZlcy9hcGkvcGFydGljaXBhbnQtcGFuZWwtaXRlbS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBNEIsS0FBSyxFQUFjLE1BQU0sZUFBZSxDQUFDOzs7QUFHdkY7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFJSCxNQUFNLE9BQU8sdUNBQXVDO0lBWW5ELFlBQW1CLFVBQXNCLEVBQVUsVUFBd0M7UUFBeEUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLGVBQVUsR0FBVixVQUFVLENBQThCO1FBRjNGLGNBQVMsR0FBWSxJQUFJLENBQUM7SUFFb0UsQ0FBQztJQVgvRixJQUFhLDhCQUE4QixDQUFDLEtBQWM7UUFDekQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUNELElBQWEsVUFBVSxDQUFDLEtBQWM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQU1ELGVBQWU7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBQ0QsV0FBVztRQUNWLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFDRCxLQUFLO1FBQ0osSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWM7UUFDcEIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssRUFBRTtZQUNuRSxJQUFJLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0RDtJQUNGLENBQUM7O29JQTdCVyx1Q0FBdUM7d0hBQXZDLHVDQUF1QzsyRkFBdkMsdUNBQXVDO2tCQUhuRCxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSwyRkFBMkY7aUJBQ3JHOzRJQUVhLDhCQUE4QjtzQkFBMUMsS0FBSztnQkFJTyxVQUFVO3NCQUF0QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIElucHV0LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPcGVuVmlkdUFuZ3VsYXJDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY29uZmlnL29wZW52aWR1LWFuZ3VsYXIuY29uZmlnLnNlcnZpY2UnO1xuXG4vKipcbiAqIFRoZSAqKm11dGVCdXR0b24qKiBkaXJlY3RpdmUgYWxsb3dzIHNob3cvaGlkZSB0aGUgbXV0ZWQgYnV0dG9uIGluIHBhcnRpY2lwYW50IHBhbmVsIGl0ZW0gY29tcG9uZW50LlxuICpcbiAqIERlZmF1bHQ6IGB0cnVlYFxuICpcbiAqIEl0IGNhbiBiZSB1c2VkIGluIHRoZSBwYXJlbnQgZWxlbWVudCB7QGxpbmsgVmlkZW9jb25mZXJlbmNlQ29tcG9uZW50fSBzcGVjaWZ5aW5nIHRoZSBuYW1lIG9mIHRoZSBgcGFydGljaXBhbnRQYW5lbEl0ZW1gIGNvbXBvbmVudDpcbiAqXG4gKiBAZXhhbXBsZVxuICogPG92LXZpZGVvY29uZmVyZW5jZSBbcGFydGljaXBhbnRQYW5lbEl0ZW1NdXRlQnV0dG9uXT1cImZhbHNlXCI+PC9vdi12aWRlb2NvbmZlcmVuY2U+XG4gKlxuICogXFxcbiAqIEFuZCBpdCBhbHNvIGNhbiBiZSB1c2VkIGluIHRoZSB7QGxpbmsgUGFydGljaXBhbnRQYW5lbEl0ZW1Db21wb25lbnR9LlxuICogQGV4YW1wbGVcbiAqIDxvdi1wYXJ0aWNpcGFudC1wYW5lbC1pdGVtIFttdXRlQnV0dG9uXT1cImZhbHNlXCI+PC9vdi1wYXJ0aWNpcGFudC1wYW5lbC1pdGVtPlxuICovXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdvdi12aWRlb2NvbmZlcmVuY2VbcGFydGljaXBhbnRQYW5lbEl0ZW1NdXRlQnV0dG9uXSwgb3YtcGFydGljaXBhbnQtcGFuZWwtaXRlbVttdXRlQnV0dG9uXSdcbn0pXG5leHBvcnQgY2xhc3MgUGFydGljaXBhbnRQYW5lbEl0ZW1NdXRlQnV0dG9uRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcblx0QElucHV0KCkgc2V0IHBhcnRpY2lwYW50UGFuZWxJdGVtTXV0ZUJ1dHRvbih2YWx1ZTogYm9vbGVhbikge1xuXHRcdHRoaXMubXV0ZVZhbHVlID0gdmFsdWU7XG5cdFx0dGhpcy51cGRhdGUodGhpcy5tdXRlVmFsdWUpO1xuXHR9XG5cdEBJbnB1dCgpIHNldCBtdXRlQnV0dG9uKHZhbHVlOiBib29sZWFuKSB7XG5cdFx0dGhpcy5tdXRlVmFsdWUgPSB2YWx1ZTtcblx0XHR0aGlzLnVwZGF0ZSh0aGlzLm11dGVWYWx1ZSk7XG5cdH1cblxuXHRtdXRlVmFsdWU6IGJvb2xlYW4gPSB0cnVlO1xuXG5cdGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIGxpYlNlcnZpY2U6IE9wZW5WaWR1QW5ndWxhckNvbmZpZ1NlcnZpY2UpIHt9XG5cblx0bmdBZnRlclZpZXdJbml0KCkge1xuXHRcdHRoaXMudXBkYXRlKHRoaXMubXV0ZVZhbHVlKTtcblx0fVxuXHRuZ09uRGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLmNsZWFyKCk7XG5cdH1cblx0Y2xlYXIoKSB7XG5cdFx0dGhpcy5tdXRlVmFsdWUgPSB0cnVlO1xuXHRcdHRoaXMudXBkYXRlKHRydWUpO1xuXHR9XG5cblx0dXBkYXRlKHZhbHVlOiBib29sZWFuKSB7XG5cdFx0aWYgKHRoaXMubGliU2VydmljZS5wYXJ0aWNpcGFudEl0ZW1NdXRlQnV0dG9uLmdldFZhbHVlKCkgIT09IHZhbHVlKSB7XG5cdFx0XHR0aGlzLmxpYlNlcnZpY2UucGFydGljaXBhbnRJdGVtTXV0ZUJ1dHRvbi5uZXh0KHZhbHVlKTtcblx0XHR9XG5cdH1cbn0iXX0=