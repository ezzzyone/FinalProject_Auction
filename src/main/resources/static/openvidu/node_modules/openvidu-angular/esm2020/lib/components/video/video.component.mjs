import { Component, Input, ViewChild } from '@angular/core';
import { VideoType } from '../../models/video-type.model';
import * as i0 from "@angular/core";
/**
 * @internal
 */
export class VideoComponent {
    constructor() {
        this.type = VideoType.CAMERA;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            if (this._streamManager && this._videoElement) {
                this.updateVideoStyles();
                this._streamManager.addVideoElement(this._videoElement.nativeElement);
            }
        });
    }
    set videoElement(element) {
        this._videoElement = element;
    }
    set streamManager(streamManager) {
        if (streamManager) {
            this._streamManager = streamManager;
            if (!!this._videoElement && this._streamManager) {
                this.updateVideoStyles();
                this._streamManager.addVideoElement(this._videoElement.nativeElement);
            }
        }
    }
    updateVideoStyles() {
        this.type = this._streamManager?.stream?.typeOfVideo;
        if (this.type === VideoType.SCREEN) {
            this._videoElement.nativeElement.style.objectFit = 'contain';
            this._videoElement.nativeElement.classList.add('screen-type');
        }
        else {
            this._videoElement.nativeElement.style.objectFit = 'cover';
            this._videoElement.nativeElement.classList.add('camera-type');
        }
    }
}
VideoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: VideoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
VideoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.8", type: VideoComponent, selector: "ov-video", inputs: { mutedSound: "mutedSound", streamManager: "streamManager" }, viewQueries: [{ propertyName: "videoElement", first: true, predicate: ["videoElement"], descendants: true }], ngImport: i0, template: `
		<video
			class="OT_video-element"
			#videoElement
			[attr.id]="streamManager && _streamManager.stream ? 'video-' + _streamManager.stream.streamId : 'video-undefined'"
			[muted]="mutedSound"
		></video>
	`, isInline: true, styles: ["video{object-fit:cover;width:100%;height:100%;color:#fff;margin:0;padding:0;border:0;font-size:100%;border-radius:var(--ov-video-radius);background-color:#000}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: VideoComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ov-video', template: `
		<video
			class="OT_video-element"
			#videoElement
			[attr.id]="streamManager && _streamManager.stream ? 'video-' + _streamManager.stream.streamId : 'video-undefined'"
			[muted]="mutedSound"
		></video>
	`, styles: ["video{object-fit:cover;width:100%;height:100%;color:#fff;margin:0;padding:0;border:0;font-size:100%;border-radius:var(--ov-video-radius);background-color:#000}\n"] }]
        }], propDecorators: { mutedSound: [{
                type: Input
            }], videoElement: [{
                type: ViewChild,
                args: ['videoElement', { static: false }]
            }], streamManager: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvb3BlbnZpZHUtYW5ndWxhci9zcmMvbGliL2NvbXBvbmVudHMvdmlkZW8vdmlkZW8uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFjLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQUUxRDs7R0FFRztBQWFILE1BQU0sT0FBTyxjQUFjO0lBWjNCO1FBZ0JDLFNBQUksR0FBYyxTQUFTLENBQUMsTUFBTSxDQUFDO0tBdUNuQztJQXJDQSxlQUFlO1FBQ2QsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUM5QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztnQkFDekIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUN0RTtRQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELElBQ0ksWUFBWSxDQUFDLE9BQW1CO1FBQ25DLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUNJLGFBQWEsQ0FBQyxhQUE0QjtRQUM3QyxJQUFJLGFBQWEsRUFBRTtZQUNsQixJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztZQUNwQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQ2hELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2dCQUN6QixJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ3RFO1NBQ0Q7SUFDRixDQUFDO0lBRU8saUJBQWlCO1FBRXhCLElBQUksQ0FBQyxJQUFJLEdBQWMsSUFBSSxDQUFDLGNBQWMsRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDO1FBQ2hFLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1lBQzdELElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDOUQ7YUFBTTtZQUNOLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO1lBQzNELElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDOUQ7SUFFRixDQUFDOzsyR0ExQ1csY0FBYzsrRkFBZCxjQUFjLG9PQVZoQjs7Ozs7OztFQU9UOzJGQUdXLGNBQWM7a0JBWjFCLFNBQVM7K0JBQ0MsVUFBVSxZQUNWOzs7Ozs7O0VBT1Q7OEJBSVEsVUFBVTtzQkFBbEIsS0FBSztnQkFlRixZQUFZO3NCQURmLFNBQVM7dUJBQUMsY0FBYyxFQUFFLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQztnQkFNckMsYUFBYTtzQkFEaEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3RyZWFtTWFuYWdlciB9IGZyb20gJ29wZW52aWR1LWJyb3dzZXInO1xuaW1wb3J0IHsgVmlkZW9UeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3ZpZGVvLXR5cGUubW9kZWwnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdvdi12aWRlbycsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PHZpZGVvXG5cdFx0XHRjbGFzcz1cIk9UX3ZpZGVvLWVsZW1lbnRcIlxuXHRcdFx0I3ZpZGVvRWxlbWVudFxuXHRcdFx0W2F0dHIuaWRdPVwic3RyZWFtTWFuYWdlciAmJiBfc3RyZWFtTWFuYWdlci5zdHJlYW0gPyAndmlkZW8tJyArIF9zdHJlYW1NYW5hZ2VyLnN0cmVhbS5zdHJlYW1JZCA6ICd2aWRlby11bmRlZmluZWQnXCJcblx0XHRcdFttdXRlZF09XCJtdXRlZFNvdW5kXCJcblx0XHQ+PC92aWRlbz5cblx0YCxcblx0c3R5bGVVcmxzOiBbJy4vdmlkZW8uY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFZpZGVvQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cdEBJbnB1dCgpIG11dGVkU291bmQ6IGJvb2xlYW47XG5cdF9zdHJlYW1NYW5hZ2VyOiBTdHJlYW1NYW5hZ2VyO1xuXHRfdmlkZW9FbGVtZW50OiBFbGVtZW50UmVmO1xuXHR0eXBlOiBWaWRlb1R5cGUgPSBWaWRlb1R5cGUuQ0FNRVJBO1xuXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGlmICh0aGlzLl9zdHJlYW1NYW5hZ2VyICYmIHRoaXMuX3ZpZGVvRWxlbWVudCkge1xuXHRcdFx0XHR0aGlzLnVwZGF0ZVZpZGVvU3R5bGVzKCk7XG5cdFx0XHRcdHRoaXMuX3N0cmVhbU1hbmFnZXIuYWRkVmlkZW9FbGVtZW50KHRoaXMuX3ZpZGVvRWxlbWVudC5uYXRpdmVFbGVtZW50KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdEBWaWV3Q2hpbGQoJ3ZpZGVvRWxlbWVudCcsIHtzdGF0aWM6ZmFsc2V9KVxuXHRzZXQgdmlkZW9FbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcblx0XHR0aGlzLl92aWRlb0VsZW1lbnQgPSBlbGVtZW50O1xuXHR9XG5cblx0QElucHV0KClcblx0c2V0IHN0cmVhbU1hbmFnZXIoc3RyZWFtTWFuYWdlcjogU3RyZWFtTWFuYWdlcikge1xuXHRcdGlmIChzdHJlYW1NYW5hZ2VyKSB7XG5cdFx0XHR0aGlzLl9zdHJlYW1NYW5hZ2VyID0gc3RyZWFtTWFuYWdlcjtcblx0XHRcdGlmICghIXRoaXMuX3ZpZGVvRWxlbWVudCAmJiB0aGlzLl9zdHJlYW1NYW5hZ2VyKSB7XG5cdFx0XHRcdHRoaXMudXBkYXRlVmlkZW9TdHlsZXMoKTtcblx0XHRcdFx0dGhpcy5fc3RyZWFtTWFuYWdlci5hZGRWaWRlb0VsZW1lbnQodGhpcy5fdmlkZW9FbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgdXBkYXRlVmlkZW9TdHlsZXMoKSB7XG5cblx0XHR0aGlzLnR5cGUgPSA8VmlkZW9UeXBlPnRoaXMuX3N0cmVhbU1hbmFnZXI/LnN0cmVhbT8udHlwZU9mVmlkZW87XG5cdFx0aWYgKHRoaXMudHlwZSA9PT0gVmlkZW9UeXBlLlNDUkVFTikge1xuXHRcdFx0dGhpcy5fdmlkZW9FbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc3R5bGUub2JqZWN0Rml0ID0gJ2NvbnRhaW4nO1xuXHRcdFx0dGhpcy5fdmlkZW9FbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2NyZWVuLXR5cGUnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fdmlkZW9FbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc3R5bGUub2JqZWN0Rml0ID0gJ2NvdmVyJztcblx0XHRcdHRoaXMuX3ZpZGVvRWxlbWVudC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NhbWVyYS10eXBlJyk7XG5cdFx0fVxuXG5cdH1cbn1cbiJdfQ==