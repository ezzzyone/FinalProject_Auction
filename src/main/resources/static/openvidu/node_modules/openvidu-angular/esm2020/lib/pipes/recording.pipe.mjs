import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @internal
 */
export class DurationFromSecondsPipe {
    transform(durationInSeconds) {
        if (durationInSeconds < 60) {
            return Math.floor(durationInSeconds) + 's';
        }
        else if (durationInSeconds < 3600) {
            return Math.floor(durationInSeconds / 60) + 'm ' + Math.floor(durationInSeconds % 60) + 's';
        }
        else {
            const hours = Math.floor(durationInSeconds / 3600);
            const minutes = Math.floor((durationInSeconds - hours * 3600) / 60);
            return hours + 'h ' + minutes + 'm';
        }
    }
}
DurationFromSecondsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: DurationFromSecondsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
DurationFromSecondsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.2.8", ngImport: i0, type: DurationFromSecondsPipe, name: "duration" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: DurationFromSecondsPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'duration'
                }]
        }] });
/**
 * @internal
 */
export class SearchByStringPropertyPipe {
    transform(items, props) {
        if (!items || !props || props.properties.length === 0 || !props.filter) {
            return items;
        }
        return items.filter(item => {
            return props.properties.some(prop => {
                const multipleProps = prop.split('.');
                let recursiveProp = item;
                try {
                    multipleProps.forEach(p => {
                        recursiveProp = recursiveProp[p];
                        if (recursiveProp === null || recursiveProp === undefined) {
                            throw new Error('Property not found');
                        }
                    });
                }
                catch (error) {
                    return false;
                }
                return recursiveProp.indexOf(props.filter) !== -1;
            });
        });
    }
}
SearchByStringPropertyPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: SearchByStringPropertyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
SearchByStringPropertyPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.2.8", ngImport: i0, type: SearchByStringPropertyPipe, name: "searchByStringProperty" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: SearchByStringPropertyPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'searchByStringProperty'
                }]
        }] });
/**
 * @internal
 */
export class ThumbnailFromUrlPipe {
    transform(url) {
        if (url.includes('.mp4')) {
            const lastPart = url.split('/').pop();
            let thumbnailUrl = lastPart?.replace('mp4', 'jpg');
            thumbnailUrl = `recordings/${thumbnailUrl?.split('.')[0]}/${thumbnailUrl}`;
            return thumbnailUrl;
        }
        return url;
    }
}
ThumbnailFromUrlPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ThumbnailFromUrlPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ThumbnailFromUrlPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.2.8", ngImport: i0, type: ThumbnailFromUrlPipe, name: "thumbnailUrl" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ThumbnailFromUrlPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'thumbnailUrl'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkaW5nLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9vcGVudmlkdS1hbmd1bGFyL3NyYy9saWIvcGlwZXMvcmVjb3JkaW5nLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBRXBEOztHQUVHO0FBSUgsTUFBTSxPQUFPLHVCQUF1QjtJQUNuQyxTQUFTLENBQUMsaUJBQXlCO1FBQ2xDLElBQUksaUJBQWlCLEdBQUcsRUFBRSxFQUFFO1lBQzNCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUMzQzthQUFNLElBQUksaUJBQWlCLEdBQUcsSUFBSSxFQUFFO1lBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7U0FDNUY7YUFBTTtZQUNOLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLGlCQUFpQixHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNwRSxPQUFPLEtBQUssR0FBRyxJQUFJLEdBQUcsT0FBTyxHQUFHLEdBQUcsQ0FBQztTQUNwQztJQUNGLENBQUM7O29IQVhXLHVCQUF1QjtrSEFBdkIsdUJBQXVCOzJGQUF2Qix1QkFBdUI7a0JBSG5DLElBQUk7bUJBQUM7b0JBQ0wsSUFBSSxFQUFFLFVBQVU7aUJBQ2hCOztBQWVEOztHQUVHO0FBSUgsTUFBTSxPQUFPLDBCQUEwQjtJQUN0QyxTQUFTLENBQUMsS0FBWSxFQUFFLEtBQStDO1FBQ3RFLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN0RSxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3JDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQztnQkFDekIsSUFBSTtvQkFDRixhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUMzQixhQUFhLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNqQyxJQUFJLGFBQWEsS0FBSyxJQUFJLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTs0QkFDekQsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO3lCQUN2QztvQkFDQSxDQUFDLENBQUMsQ0FBQztpQkFDSjtnQkFBQyxPQUFPLEtBQUssRUFBRTtvQkFDZCxPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxPQUFPLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2pELENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDRixDQUFDOzt1SEF0QlMsMEJBQTBCO3FIQUExQiwwQkFBMEI7MkZBQTFCLDBCQUEwQjtrQkFIckMsSUFBSTttQkFBQztvQkFDTixJQUFJLEVBQUUsd0JBQXdCO2lCQUM5Qjs7QUEwQkQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8sb0JBQW9CO0lBQ2hDLFNBQVMsQ0FBQyxHQUFXO1FBQ3BCLElBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBQztZQUN2QixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3RDLElBQUksWUFBWSxHQUFHLFFBQVEsRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ25ELFlBQVksR0FBRyxjQUFjLFlBQVksRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksWUFBWSxFQUFFLENBQUM7WUFDM0UsT0FBTyxZQUFZLENBQUM7U0FDcEI7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7O2lIQVRXLG9CQUFvQjsrR0FBcEIsb0JBQW9COzJGQUFwQixvQkFBb0I7a0JBSC9CLElBQUk7bUJBQUM7b0JBQ04sSUFBSSxFQUFFLGNBQWM7aUJBQ3BCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5AUGlwZSh7XG5cdG5hbWU6ICdkdXJhdGlvbidcbn0pXG5leHBvcnQgY2xhc3MgRHVyYXRpb25Gcm9tU2Vjb25kc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblx0dHJhbnNmb3JtKGR1cmF0aW9uSW5TZWNvbmRzOiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdGlmIChkdXJhdGlvbkluU2Vjb25kcyA8IDYwKSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vcihkdXJhdGlvbkluU2Vjb25kcykgKyAncyc7XG5cdFx0fSBlbHNlIGlmIChkdXJhdGlvbkluU2Vjb25kcyA8IDM2MDApIHtcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKGR1cmF0aW9uSW5TZWNvbmRzIC8gNjApICsgJ20gJyArIE1hdGguZmxvb3IoZHVyYXRpb25JblNlY29uZHMgJSA2MCkgKyAncyc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihkdXJhdGlvbkluU2Vjb25kcyAvIDM2MDApO1xuXHRcdFx0Y29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKGR1cmF0aW9uSW5TZWNvbmRzIC0gaG91cnMgKiAzNjAwKSAvIDYwKTtcblx0XHRcdHJldHVybiBob3VycyArICdoICcgKyBtaW51dGVzICsgJ20nO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG4gQFBpcGUoe1xuXHRuYW1lOiAnc2VhcmNoQnlTdHJpbmdQcm9wZXJ0eSdcbn0pXG5leHBvcnQgY2xhc3MgU2VhcmNoQnlTdHJpbmdQcm9wZXJ0eVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblx0dHJhbnNmb3JtKGl0ZW1zOiBhbnlbXSwgcHJvcHM6IHsgcHJvcGVydGllczogc3RyaW5nW10sIGZpbHRlcjogc3RyaW5nIH0pOiBhbnkge1xuXHRcdGlmICghaXRlbXMgfHwgIXByb3BzIHx8IHByb3BzLnByb3BlcnRpZXMubGVuZ3RoID09PSAwIHx8ICFwcm9wcy5maWx0ZXIpIHtcblx0XHQgIHJldHVybiBpdGVtcztcblx0XHR9XG5cdFx0cmV0dXJuIGl0ZW1zLmZpbHRlcihpdGVtID0+IHtcblx0XHQgIHJldHVybiBwcm9wcy5wcm9wZXJ0aWVzLnNvbWUocHJvcCA9PiB7XG5cdFx0XHRjb25zdCBtdWx0aXBsZVByb3BzID0gcHJvcC5zcGxpdCgnLicpO1xuXHRcdFx0bGV0IHJlY3Vyc2l2ZVByb3AgPSBpdGVtO1xuXHRcdFx0dHJ5IHtcblx0XHRcdCAgbXVsdGlwbGVQcm9wcy5mb3JFYWNoKHAgPT4ge1xuXHRcdFx0XHRyZWN1cnNpdmVQcm9wID0gcmVjdXJzaXZlUHJvcFtwXTtcblx0XHRcdFx0aWYgKHJlY3Vyc2l2ZVByb3AgPT09IG51bGwgfHwgcmVjdXJzaXZlUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdCAgdGhyb3cgbmV3IEVycm9yKCdQcm9wZXJ0eSBub3QgZm91bmQnKTtcblx0XHRcdFx0fVxuXHRcdFx0ICB9KTtcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHQgIHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWN1cnNpdmVQcm9wLmluZGV4T2YocHJvcHMuZmlsdGVyKSAhPT0gLTE7XG5cdFx0ICB9KVxuXHRcdH0pO1xuXHQgIH1cbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuIEBQaXBlKHtcblx0bmFtZTogJ3RodW1ibmFpbFVybCdcbn0pXG5leHBvcnQgY2xhc3MgVGh1bWJuYWlsRnJvbVVybFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblx0dHJhbnNmb3JtKHVybDogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRpZih1cmwuaW5jbHVkZXMoJy5tcDQnKSl7XG5cdFx0XHRjb25zdCBsYXN0UGFydCA9IHVybC5zcGxpdCgnLycpLnBvcCgpO1xuXHRcdFx0bGV0IHRodW1ibmFpbFVybCA9IGxhc3RQYXJ0Py5yZXBsYWNlKCdtcDQnLCAnanBnJyk7XG5cdFx0XHR0aHVtYm5haWxVcmwgPSBgcmVjb3JkaW5ncy8ke3RodW1ibmFpbFVybD8uc3BsaXQoJy4nKVswXX0vJHt0aHVtYm5haWxVcmx9YDtcblx0XHRcdHJldHVybiB0aHVtYm5haWxVcmw7XG5cdFx0fVxuXHRcdHJldHVybiB1cmw7XG5cdH1cbn1cbiJdfQ==