import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { LayoutAlignment, LayoutClass, OpenViduLayout } from '../../models/layout.model';
import * as i0 from "@angular/core";
/**
 * @internal
 */
export class LayoutService {
    constructor() {
        this.layoutContainer = null;
        this.layoutWidth = new BehaviorSubject(0);
        this.captionsToggling = new BehaviorSubject(false);
        this.layoutWidthObs = this.layoutWidth.asObservable();
        this.captionsTogglingObs = this.captionsToggling.asObservable();
    }
    initialize(container) {
        this.layoutContainer = container;
        this.openviduLayout = new OpenViduLayout();
        this.openviduLayoutOptions = this.getOptions();
        if (this.layoutContainer) {
            this.openviduLayout.initLayoutContainer(this.layoutContainer, this.openviduLayoutOptions);
        }
        this.sendLayoutWidthEvent();
    }
    getOptions() {
        const options = {
            maxRatio: 3 / 2,
            minRatio: 9 / 16,
            fixedRatio: false /* If this is true then the aspect ratio of the video is maintained
      and minRatio and maxRatio are ignored (default false) */,
            bigClass: LayoutClass.BIG_ELEMENT,
            smallClass: LayoutClass.SMALL_ELEMENT,
            ignoredClass: LayoutClass.IGNORED_ELEMENT,
            bigPercentage: 0.8,
            minBigPercentage: 0,
            bigFixedRatio: false,
            bigMaxRatio: 9 / 16,
            bigMinRatio: 9 / 16,
            bigFirst: true,
            animate: true,
            alignItems: LayoutAlignment.CENTER,
            bigAlignItems: LayoutAlignment.CENTER,
            smallAlignItems: LayoutAlignment.CENTER,
            maxWidth: Infinity,
            maxHeight: Infinity,
            smallMaxWidth: Infinity,
            smallMaxHeight: Infinity,
            bigMaxWidth: Infinity,
            bigMaxHeight: Infinity,
            scaleLastRow: true,
            bigScaleLastRow: true
        };
        return options;
    }
    toggleCaptions() {
        this.captionsToggling.next(!this.captionsToggling.getValue());
    }
    update(timeout = null) {
        const updateAux = () => {
            if (!!this.openviduLayout) {
                this.openviduLayout.updateLayout(this.layoutContainer, this.openviduLayoutOptions);
                this.sendLayoutWidthEvent();
            }
        };
        if (typeof timeout === 'number' && timeout >= 0) {
            setTimeout(() => updateAux(), timeout);
        }
        else {
            updateAux();
        }
    }
    getLayout() {
        return this.openviduLayout;
    }
    clear() {
        this.openviduLayout = null;
    }
    sendLayoutWidthEvent() {
        const sidenavLayoutElement = this.getHTMLElementByClassName(this.openviduLayout?.getLayoutContainer(), LayoutClass.SIDENAV_CONTAINER);
        if (sidenavLayoutElement && sidenavLayoutElement.clientWidth) {
            this.layoutWidth.next(sidenavLayoutElement.clientWidth);
        }
    }
    getHTMLElementByClassName(element, className) {
        while (!!element && element !== document.body) {
            if (element.className.includes(className)) {
                return element;
            }
            element = element.parentElement;
        }
        return null;
    }
}
LayoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: LayoutService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
LayoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: LayoutService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: LayoutService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,