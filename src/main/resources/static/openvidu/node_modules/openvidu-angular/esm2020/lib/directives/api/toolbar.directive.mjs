import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/config/openvidu-angular.config.service";
/**
 * The **screenshareButton** directive allows show/hide the screenshare toolbar button.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarScreenshareButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [screenshareButton]="false"></ov-toolbar>
 */
export class ToolbarScreenshareButtonDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.screenshareValue = true;
    }
    /**
     * @ignore
     */
    set toolbarScreenshareButton(value) {
        this.screenshareValue = value;
        this.update(this.screenshareValue);
    }
    /**
     * @ignore
     */
    set screenshareButton(value) {
        this.screenshareValue = value;
        this.update(this.screenshareValue);
    }
    ngAfterViewInit() {
        this.update(this.screenshareValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.screenshareValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.screenshareButton.getValue() !== value) {
            this.libService.screenshareButton.next(value);
        }
    }
}
ToolbarScreenshareButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarScreenshareButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarScreenshareButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarScreenshareButtonDirective, selector: "ov-videoconference[toolbarScreenshareButton], ov-toolbar[screenshareButton]", inputs: { toolbarScreenshareButton: "toolbarScreenshareButton", screenshareButton: "screenshareButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarScreenshareButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarScreenshareButton], ov-toolbar[screenshareButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarScreenshareButton: [{
                type: Input
            }], screenshareButton: [{
                type: Input
            }] } });
/**
 * The **recordingButton** directive allows show/hide the start/stop recording toolbar button.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarRecordingButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [recordingButton]="false"></ov-toolbar>
 *
 * @internal
 */
export class ToolbarRecordingButtonDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.recordingValue = true;
    }
    /**
     * @ignore
     */
    set toolbarRecordingButton(value) {
        this.recordingValue = value;
        this.update(this.recordingValue);
    }
    /**
     * @ignore
     */
    set recordingButton(value) {
        this.recordingValue = value;
        this.update(this.recordingValue);
    }
    ngAfterViewInit() {
        this.update(this.recordingValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.recordingValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.recordingButton.getValue() !== value) {
            this.libService.recordingButton.next(value);
        }
    }
}
ToolbarRecordingButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarRecordingButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarRecordingButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarRecordingButtonDirective, selector: "ov-videoconference[toolbarRecordingButton], ov-toolbar[recordingButton]", inputs: { toolbarRecordingButton: "toolbarRecordingButton", recordingButton: "recordingButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarRecordingButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarRecordingButton], ov-toolbar[recordingButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarRecordingButton: [{
                type: Input
            }], recordingButton: [{
                type: Input
            }] } });
/**
 * The **fullscreenButton** directive allows show/hide the fullscreen toolbar button.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarFullscreenButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [fullscreenButton]="false"></ov-toolbar>
 */
export class ToolbarFullscreenButtonDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.fullscreenValue = true;
    }
    /**
     * @ignore
     */
    set toolbarFullscreenButton(value) {
        this.fullscreenValue = value;
        this.update(this.fullscreenValue);
    }
    /**
     * @ignore
     */
    set fullscreenButton(value) {
        this.fullscreenValue = value;
        this.update(this.fullscreenValue);
    }
    ngAfterViewInit() {
        this.update(this.fullscreenValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.fullscreenValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.fullscreenButton.getValue() !== value) {
            this.libService.fullscreenButton.next(value);
        }
    }
}
ToolbarFullscreenButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarFullscreenButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarFullscreenButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarFullscreenButtonDirective, selector: "ov-videoconference[toolbarFullscreenButton], ov-toolbar[fullscreenButton]", inputs: { toolbarFullscreenButton: "toolbarFullscreenButton", fullscreenButton: "fullscreenButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarFullscreenButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarFullscreenButton], ov-toolbar[fullscreenButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarFullscreenButton: [{
                type: Input
            }], fullscreenButton: [{
                type: Input
            }] } });
/**
 * The **backgroundEffectsButton** directive allows show/hide the background effects toolbar button.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarBackgroundEffectsButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [backgroundEffectsButton]="false"></ov-toolbar>
 */
export class ToolbarBackgroundEffectsButtonDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.backgroundEffectsValue = true;
    }
    /**
     * @ignore
     */
    set toolbarBackgroundEffectsButton(value) {
        this.backgroundEffectsValue = value;
        this.update(this.backgroundEffectsValue);
    }
    /**
     * @ignore
     */
    set backgroundEffectsButton(value) {
        this.backgroundEffectsValue = value;
        this.update(this.backgroundEffectsValue);
    }
    ngAfterViewInit() {
        this.update(this.backgroundEffectsValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.backgroundEffectsValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.backgroundEffectsButton.getValue() !== value) {
            this.libService.backgroundEffectsButton.next(value);
        }
    }
}
ToolbarBackgroundEffectsButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarBackgroundEffectsButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarBackgroundEffectsButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarBackgroundEffectsButtonDirective, selector: "ov-videoconference[toolbarBackgroundEffectsButton], ov-toolbar[backgroundEffectsButton]", inputs: { toolbarBackgroundEffectsButton: "toolbarBackgroundEffectsButton", backgroundEffectsButton: "backgroundEffectsButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarBackgroundEffectsButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarBackgroundEffectsButton], ov-toolbar[backgroundEffectsButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarBackgroundEffectsButton: [{
                type: Input
            }], backgroundEffectsButton: [{
                type: Input
            }] } });
/**
 * The **captionsButton** directive allows show/hide the captions toolbar button.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarCaptionsButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [captionsButton]="false"></ov-toolbar>
 */
export class ToolbarCaptionsButtonDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.captionsButtonValue = true;
    }
    /**
     * @ignore
     */
    set toolbarCaptionsButton(value) {
        this.captionsButtonValue = value;
        this.update(this.captionsButtonValue);
    }
    /**
     * @ignore
     */
    set captionsButton(value) {
        this.captionsButtonValue = value;
        this.update(this.captionsButtonValue);
    }
    ngAfterViewInit() {
        this.update(this.captionsButtonValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.captionsButtonValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.captionsButton.getValue() !== value) {
            this.libService.captionsButton.next(value);
        }
    }
}
ToolbarCaptionsButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarCaptionsButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarCaptionsButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarCaptionsButtonDirective, selector: "ov-videoconference[toolbarCaptionsButton], ov-toolbar[captionsButton]", inputs: { toolbarCaptionsButton: "toolbarCaptionsButton", captionsButton: "captionsButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarCaptionsButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarCaptionsButton], ov-toolbar[captionsButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarCaptionsButton: [{
                type: Input
            }], captionsButton: [{
                type: Input
            }] } });
/**
 * The **settingsButton** directive allows show/hide the settings toolbar button.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarSettingsButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [settingsButton]="false"></ov-toolbar>
 */
export class ToolbarSettingsButtonDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.settingsValue = true;
    }
    /**
     * @ignore
     */
    set toolbarSettingsButton(value) {
        this.settingsValue = value;
        this.update(this.settingsValue);
    }
    /**
     * @ignore
     */
    set settingsButton(value) {
        this.settingsValue = value;
        this.update(this.settingsValue);
    }
    ngAfterViewInit() {
        this.update(this.settingsValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.settingsValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.toolbarSettingsButton.getValue() !== value) {
            this.libService.toolbarSettingsButton.next(value);
        }
    }
}
ToolbarSettingsButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarSettingsButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarSettingsButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarSettingsButtonDirective, selector: "ov-videoconference[toolbarSettingsButton], ov-toolbar[settingsButton]", inputs: { toolbarSettingsButton: "toolbarSettingsButton", settingsButton: "settingsButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarSettingsButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarSettingsButton], ov-toolbar[settingsButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarSettingsButton: [{
                type: Input
            }], settingsButton: [{
                type: Input
            }] } });
/**
 * The **leaveButton** directive allows show/hide the leave toolbar button.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarLeaveButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [leaveButton]="false"></ov-toolbar>
 */
export class ToolbarLeaveButtonDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.leaveValue = true;
    }
    /**
     * @ignore
     */
    set toolbarLeaveButton(value) {
        this.leaveValue = value;
        this.update(this.leaveValue);
    }
    /**
     * @ignore
     */
    set leaveButton(value) {
        this.leaveValue = value;
        this.update(this.leaveValue);
    }
    ngAfterViewInit() {
        this.update(this.leaveValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.leaveValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.leaveButton.getValue() !== value) {
            this.libService.leaveButton.next(value);
        }
    }
}
ToolbarLeaveButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarLeaveButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarLeaveButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarLeaveButtonDirective, selector: "ov-videoconference[toolbarLeaveButton], ov-toolbar[leaveButton]", inputs: { toolbarLeaveButton: "toolbarLeaveButton", leaveButton: "leaveButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarLeaveButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarLeaveButton], ov-toolbar[leaveButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarLeaveButton: [{
                type: Input
            }], leaveButton: [{
                type: Input
            }] } });
/**
 * The **participantsPanelButton** directive allows show/hide the participants panel toolbar button.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarParticipantsPanelButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [participantsPanelButton]="false"></ov-toolbar>
 */
export class ToolbarParticipantsPanelButtonDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.participantsPanelValue = true;
    }
    /**
     * @ignore
     */
    set toolbarParticipantsPanelButton(value) {
        this.participantsPanelValue = value;
        this.update(this.participantsPanelValue);
    }
    /**
     * @ignore
     */
    set participantsPanelButton(value) {
        this.participantsPanelValue = value;
        this.update(this.participantsPanelValue);
    }
    ngAfterViewInit() {
        this.update(this.participantsPanelValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.participantsPanelValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.participantsPanelButton.getValue() !== value) {
            this.libService.participantsPanelButton.next(value);
        }
    }
}
ToolbarParticipantsPanelButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarParticipantsPanelButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarParticipantsPanelButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarParticipantsPanelButtonDirective, selector: "ov-videoconference[toolbarParticipantsPanelButton], ov-toolbar[participantsPanelButton]", inputs: { toolbarParticipantsPanelButton: "toolbarParticipantsPanelButton", participantsPanelButton: "participantsPanelButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarParticipantsPanelButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarParticipantsPanelButton], ov-toolbar[participantsPanelButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarParticipantsPanelButton: [{
                type: Input
            }], participantsPanelButton: [{
                type: Input
            }] } });
/**
 * The **chatPanelButton** directive allows show/hide the chat panel toolbar button.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarChatPanelButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [chatPanelButton]="false"></ov-toolbar>
 */
export class ToolbarChatPanelButtonDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.toolbarChatPanelValue = true;
    }
    /**
     * @ignore
     */
    set toolbarChatPanelButton(value) {
        this.toolbarChatPanelValue = value;
        this.update(this.toolbarChatPanelValue);
    }
    /**
     * @ignore
     */
    set chatPanelButton(value) {
        this.toolbarChatPanelValue = value;
        this.update(this.toolbarChatPanelValue);
    }
    ngAfterViewInit() {
        this.update(this.toolbarChatPanelValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.toolbarChatPanelValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.chatPanelButton.getValue() !== value) {
            this.libService.chatPanelButton.next(value);
        }
    }
}
ToolbarChatPanelButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarChatPanelButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarChatPanelButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarChatPanelButtonDirective, selector: "ov-videoconference[toolbarChatPanelButton], ov-toolbar[chatPanelButton]", inputs: { toolbarChatPanelButton: "toolbarChatPanelButton", chatPanelButton: "chatPanelButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarChatPanelButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarChatPanelButton], ov-toolbar[chatPanelButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarChatPanelButton: [{
                type: Input
            }], chatPanelButton: [{
                type: Input
            }] } });
/**
 * The **activitiesPanelButton** directive allows show/hide the activities panel toolbar button.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarActivitiesPanelButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [activitiesPanelButton]="false"></ov-toolbar>
 *
 * @internal
 */
export class ToolbarActivitiesPanelButtonDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.toolbarActivitiesPanelValue = true;
    }
    /**
     * @ignore
     */
    set toolbarActivitiesPanelButton(value) {
        this.toolbarActivitiesPanelValue = value;
        this.update(this.toolbarActivitiesPanelValue);
    }
    /**
     * @ignore
     */
    set activitiesPanelButton(value) {
        this.toolbarActivitiesPanelValue = value;
        this.update(this.toolbarActivitiesPanelValue);
    }
    ngAfterViewInit() {
        this.update(this.toolbarActivitiesPanelValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.toolbarActivitiesPanelValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.activitiesPanelButton.getValue() !== value) {
            this.libService.activitiesPanelButton.next(value);
        }
    }
}
ToolbarActivitiesPanelButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarActivitiesPanelButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarActivitiesPanelButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarActivitiesPanelButtonDirective, selector: "ov-videoconference[toolbarActivitiesPanelButton], ov-toolbar[activitiesPanelButton]", inputs: { toolbarActivitiesPanelButton: "toolbarActivitiesPanelButton", activitiesPanelButton: "activitiesPanelButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarActivitiesPanelButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarActivitiesPanelButton], ov-toolbar[activitiesPanelButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarActivitiesPanelButton: [{
                type: Input
            }], activitiesPanelButton: [{
                type: Input
            }] } });
/**
 * The **displaySessionName** directive allows show/hide the session name.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarDisplaySessionName]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [displaySessionName]="false"></ov-toolbar>
 */
export class ToolbarDisplaySessionNameDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.displaySessionValue = true;
    }
    /**
     * @ignore
     */
    set toolbarDisplaySessionName(value) {
        this.displaySessionValue = value;
        this.update(this.displaySessionValue);
    }
    /**
     * @ignore
     */
    set displaySessionName(value) {
        this.displaySessionValue = value;
        this.update(this.displaySessionValue);
    }
    ngAfterViewInit() {
        this.update(this.displaySessionValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.displaySessionValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.displaySessionName.getValue() !== value) {
            this.libService.displaySessionName.next(value);
        }
    }
}
ToolbarDisplaySessionNameDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarDisplaySessionNameDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarDisplaySessionNameDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarDisplaySessionNameDirective, selector: "ov-videoconference[toolbarDisplaySessionName], ov-toolbar[displaySessionName]", inputs: { toolbarDisplaySessionName: "toolbarDisplaySessionName", displaySessionName: "displaySessionName" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarDisplaySessionNameDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarDisplaySessionName], ov-toolbar[displaySessionName]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarDisplaySessionName: [{
                type: Input
            }], displaySessionName: [{
                type: Input
            }] } });
/**
 * The **displayLogo** directive allows show/hide the branding logo.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `toolbar` component:
 *
 * @example
 * <ov-videoconference [toolbarDisplayLogo]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link ToolbarComponent}.
 * @example
 * <ov-toolbar [displayLogo]="false"></ov-toolbar>
 */
export class ToolbarDisplayLogoDirective {
    /**
     * @ignore
     */
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
        this.displayLogoValue = true;
    }
    /**
     * @ignore
     */
    set toolbarDisplayLogo(value) {
        this.displayLogoValue = value;
        this.update(this.displayLogoValue);
    }
    /**
     * @ignore
     */
    set displayLogo(value) {
        this.displayLogoValue = value;
        this.update(this.displayLogoValue);
    }
    ngAfterViewInit() {
        this.update(this.displayLogoValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    clear() {
        this.displayLogoValue = true;
        this.update(true);
    }
    update(value) {
        if (this.libService.displayLogo.getValue() !== value) {
            this.libService.displayLogo.next(value);
        }
    }
}
ToolbarDisplayLogoDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarDisplayLogoDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarDisplayLogoDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: ToolbarDisplayLogoDirective, selector: "ov-videoconference[toolbarDisplayLogo], ov-toolbar[displayLogo]", inputs: { toolbarDisplayLogo: "toolbarDisplayLogo", displayLogo: "displayLogo" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: ToolbarDisplayLogoDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[toolbarDisplayLogo], ov-toolbar[displayLogo]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { toolbarDisplayLogo: [{
                type: Input
            }], displayLogo: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,