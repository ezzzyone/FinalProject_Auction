import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/config/openvidu-angular.config.service";
/**
 * The **displayParticipantName** directive allows show/hide the participants name in stream component.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `stream` component:
 *
 * @example
 * <ov-videoconference [streamDisplayParticipantName]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link StreamComponent}.
 * @example
 * <ov-stream [displayParticipantName]="false"></ov-stream>
 */
export class StreamDisplayParticipantNameDirective {
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
    }
    set streamDisplayParticipantName(value) {
        this.displayParticipantNameValue = value;
        this.update(this.displayParticipantNameValue);
    }
    set displayParticipantName(value) {
        this.displayParticipantNameValue = value;
        this.update(this.displayParticipantNameValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    ngAfterViewInit() {
        this.update(this.displayParticipantNameValue);
    }
    update(value) {
        if (this.libService.displayParticipantName.getValue() !== value) {
            this.libService.displayParticipantName.next(value);
        }
    }
    clear() {
        this.update(true);
    }
}
StreamDisplayParticipantNameDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StreamDisplayParticipantNameDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
StreamDisplayParticipantNameDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: StreamDisplayParticipantNameDirective, selector: "ov-videoconference[streamDisplayParticipantName], ov-stream[displayParticipantName]", inputs: { streamDisplayParticipantName: "streamDisplayParticipantName", displayParticipantName: "displayParticipantName" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StreamDisplayParticipantNameDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[streamDisplayParticipantName], ov-stream[displayParticipantName]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { streamDisplayParticipantName: [{
                type: Input
            }], displayParticipantName: [{
                type: Input
            }] } });
/**
 * The **displayAudioDetection** directive allows show/hide the participants audio detection in stream component.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `stream` component:
 *
 * @example
 * <ov-videoconference [streamDisplayAudioDetection]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link StreamComponent}.
 * @example
 * <ov-stream [displayAudioDetection]="false"></ov-stream>
 */
export class StreamDisplayAudioDetectionDirective {
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
    }
    set streamDisplayAudioDetection(value) {
        this.displayAudioDetectionValue = value;
        this.update(this.displayAudioDetectionValue);
    }
    set displayAudioDetection(value) {
        this.displayAudioDetectionValue = value;
        this.update(this.displayAudioDetectionValue);
    }
    ngAfterViewInit() {
        this.update(this.displayAudioDetectionValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    update(value) {
        if (this.libService.displayAudioDetection.getValue() !== value) {
            this.libService.displayAudioDetection.next(value);
        }
    }
    clear() {
        this.update(true);
    }
}
StreamDisplayAudioDetectionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StreamDisplayAudioDetectionDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
StreamDisplayAudioDetectionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: StreamDisplayAudioDetectionDirective, selector: "ov-videoconference[streamDisplayAudioDetection], ov-stream[displayAudioDetection]", inputs: { streamDisplayAudioDetection: "streamDisplayAudioDetection", displayAudioDetection: "displayAudioDetection" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StreamDisplayAudioDetectionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[streamDisplayAudioDetection], ov-stream[displayAudioDetection]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { streamDisplayAudioDetection: [{
                type: Input
            }], displayAudioDetection: [{
                type: Input
            }] } });
/**
 * The **settingsButton** directive allows show/hide the participants settings button in stream component.
 *
 * Default: `true`
 *
 * It can be used in the parent element {@link VideoconferenceComponent} specifying the name of the `stream` component:
 *
 * @example
 * <ov-videoconference [streamSettingsButton]="false"></ov-videoconference>
 *
 * \
 * And it also can be used in the {@link StreamComponent}.
 * @example
 * <ov-stream [settingsButton]="false"></ov-stream>
 */
export class StreamSettingsButtonDirective {
    constructor(elementRef, libService) {
        this.elementRef = elementRef;
        this.libService = libService;
    }
    set streamSettingsButton(value) {
        this.settingsValue = value;
        this.update(this.settingsValue);
    }
    set settingsButton(value) {
        this.settingsValue = value;
        this.update(this.settingsValue);
    }
    ngAfterViewInit() {
        this.update(this.settingsValue);
    }
    ngOnDestroy() {
        this.clear();
    }
    update(value) {
        if (this.libService.streamSettingsButton.getValue() !== value) {
            this.libService.streamSettingsButton.next(value);
        }
    }
    clear() {
        this.update(true);
    }
}
StreamSettingsButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StreamSettingsButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.OpenViduAngularConfigService }], target: i0.ɵɵFactoryTarget.Directive });
StreamSettingsButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.8", type: StreamSettingsButtonDirective, selector: "ov-videoconference[streamSettingsButton], ov-stream[settingsButton]", inputs: { streamSettingsButton: "streamSettingsButton", settingsButton: "settingsButton" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.8", ngImport: i0, type: StreamSettingsButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ov-videoconference[streamSettingsButton], ov-stream[settingsButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.OpenViduAngularConfigService }]; }, propDecorators: { streamSettingsButton: [{
                type: Input
            }], settingsButton: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,