import { BehaviorSubject, Observable } from 'rxjs';
import { OpenViduAngularConfig, ParticipantFactoryFunction } from '../../config/openvidu-angular.config';
import { RecordingInfo } from '../../models/recording.model';
import * as i0 from "@angular/core";
/**
 * @internal
 */
export declare class OpenViduAngularConfigService {
    private configuration;
    minimal: BehaviorSubject<boolean>;
    minimalObs: Observable<boolean>;
    participantName: BehaviorSubject<string>;
    participantNameObs: Observable<string>;
    prejoin: BehaviorSubject<boolean>;
    prejoinObs: Observable<boolean>;
    videoMuted: BehaviorSubject<boolean>;
    videoMutedObs: Observable<boolean>;
    audioMuted: BehaviorSubject<boolean>;
    audioMutedObs: Observable<boolean>;
    screenshareButton: BehaviorSubject<boolean>;
    screenshareButtonObs: Observable<boolean>;
    fullscreenButton: BehaviorSubject<boolean>;
    fullscreenButtonObs: Observable<boolean>;
    captionsButton: BehaviorSubject<boolean>;
    captionsButtonObs: Observable<boolean>;
    toolbarSettingsButton: BehaviorSubject<boolean>;
    toolbarSettingsButtonObs: Observable<boolean>;
    leaveButton: BehaviorSubject<boolean>;
    leaveButtonObs: Observable<boolean>;
    participantsPanelButton: BehaviorSubject<boolean>;
    participantsPanelButtonObs: Observable<boolean>;
    chatPanelButton: BehaviorSubject<boolean>;
    chatPanelButtonObs: Observable<boolean>;
    activitiesPanelButton: BehaviorSubject<boolean>;
    activitiesPanelButtonObs: Observable<boolean>;
    displaySessionName: BehaviorSubject<boolean>;
    displaySessionNameObs: Observable<boolean>;
    displayLogo: BehaviorSubject<boolean>;
    displayLogoObs: Observable<boolean>;
    displayParticipantName: BehaviorSubject<boolean>;
    displayParticipantNameObs: Observable<boolean>;
    displayAudioDetection: BehaviorSubject<boolean>;
    displayAudioDetectionObs: Observable<boolean>;
    streamSettingsButton: BehaviorSubject<boolean>;
    streamSettingsButtonObs: Observable<boolean>;
    participantItemMuteButton: BehaviorSubject<boolean>;
    participantItemMuteButtonObs: Observable<boolean>;
    backgroundEffectsButton: BehaviorSubject<boolean>;
    backgroundEffectsButtonObs: Observable<boolean>;
    recordingsList: BehaviorSubject<RecordingInfo[]>;
    recordingsListObs: Observable<RecordingInfo[]>;
    recordingButton: BehaviorSubject<boolean>;
    recordingButtonObs: Observable<boolean>;
    recordingActivity: BehaviorSubject<boolean>;
    recordingActivityObs: Observable<boolean>;
    recordingError: BehaviorSubject<any>;
    recordingErrorObs: Observable<any>;
    adminRecordingsList: BehaviorSubject<RecordingInfo[]>;
    adminRecordingsListObs: Observable<RecordingInfo[]>;
    adminLoginError: BehaviorSubject<any>;
    adminLoginErrorObs: Observable<any>;
    constructor(config: OpenViduAngularConfig);
    getConfig(): OpenViduAngularConfig;
    isProduction(): boolean;
    hasParticipantFactory(): boolean;
    getParticipantFactory(): ParticipantFactoryFunction;
    static ɵfac: i0.ɵɵFactoryDeclaration<OpenViduAngularConfigService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<OpenViduAngularConfigService>;
}
